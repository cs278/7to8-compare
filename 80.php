<?php
return (static function () {
$closure1 = function () {};
$closure2 = function () {};
$fh1 = fopen('php://memory', 'rb');
$fh2 = fopen('php://memory', 'wb');
$proc = proc_open(['/bin/false'], [], $pipes);
/** @var array<string,array{int<-1,1>, array{type: int, message: string}|null, mixed, mixed}> */
$tests = [];
$tests['false <=> false'] = [0, null, false, false];
$tests['false <=> true'] = [-1, null, false, true];
$tests['false <=> null'] = [0, null, false, null];
$tests['false <=> 0'] = [0, null, false, 0];
$tests['false <=> 1'] = [-1, null, false, 1];
$tests['false <=> -1'] = [-1, null, false, -1];
$tests['false <=> 0.0'] = [0, null, false, 0.0];
$tests['false <=> -1.0'] = [-1, null, false, -1.0];
$tests['false <=> 1.0'] = [-1, null, false, 1.0];
$tests['false <=> \'\''] = [0, null, false, ''];
$tests['false <=> \'0\''] = [0, null, false, '0'];
$tests['false <=> \'-0\''] = [-1, null, false, '-0'];
$tests['false <=> \'+0\''] = [-1, null, false, '+0'];
$tests['false <=> \'0.0\''] = [-1, null, false, '0.0'];
$tests['false <=> \'-0.0\''] = [-1, null, false, '-0.0'];
$tests['false <=> \'+0.0\''] = [-1, null, false, '+0.0'];
$tests['false <=> \'1.0\''] = [-1, null, false, '1.0'];
$tests['false <=> \'-1.0\''] = [-1, null, false, '-1.0'];
$tests['false <=> \'+1.0\''] = [-1, null, false, '+1.0'];
$tests['false <=> \'-1\''] = [-1, null, false, '-1'];
$tests['false <=> \'+1\''] = [-1, null, false, '+1'];
$tests['false <=> \'1\''] = [-1, null, false, '1'];
$tests['false <=> \' 0\''] = [-1, null, false, ' 0'];
$tests['false <=> \' -0\''] = [-1, null, false, ' -0'];
$tests['false <=> \' +0\''] = [-1, null, false, ' +0'];
$tests['false <=> \' 0\' '] = [-1, null, false, ' 0 '];
$tests['false <=> \' -0\''] = [-1, null, false, ' -0 '];
$tests['false <=> \' +0\''] = [-1, null, false, ' +0 '];
$tests['false <=> \'0\' '] = [-1, null, false, '0 '];
$tests['false <=> \'-0\''] = [-1, null, false, '-0 '];
$tests['false <=> \'+0\''] = [-1, null, false, '+0 '];
$tests['false <=> \' 0.0\''] = [-1, null, false, ' 0.0'];
$tests['false <=> \' -0.0\''] = [-1, null, false, ' -0.0'];
$tests['false <=> \' +0.0\''] = [-1, null, false, ' +0.0'];
$tests['false <=> \' 0.0\' '] = [-1, null, false, ' 0.0 '];
$tests['false <=> \' -0.0\''] = [-1, null, false, ' -0.0 '];
$tests['false <=> \' +0.0\''] = [-1, null, false, ' +0.0 '];
$tests['false <=> \'0.0\' '] = [-1, null, false, '0.0 '];
$tests['false <=> \'-0.0\''] = [-1, null, false, '-0.0 '];
$tests['false <=> \'+0.0\''] = [-1, null, false, '+0.0 '];
$tests['false <=> \'03\''] = [-1, null, false, '03'];
$tests['false <=> \'2abc\''] = [-1, null, false, '2abc'];
$tests['false <=> \'2.5abc\''] = [-1, null, false, '2.5abc'];
$tests['false <=> \'abc2abc\''] = [-1, null, false, 'abc2abc'];
$tests['false <=> \'abc2.5abc\''] = [-1, null, false, 'abc2.5abc'];
$tests['false <=> \'\\0\''] = [-1, null, false, hex2bin('00')];
$tests['false <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [-1, null, false, hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['false <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [-1, null, false, hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['false <=> 12.0000000000001'] = [-1, null, false, 12.0000000000001];
$tests['false <=> 12.000000000000002'] = [-1, null, false, 12.000000000000002];
$tests['false <=> pi'] = [-1, null, false, M_PI];
$tests['false <=> int(max)'] = [-1, null, false, PHP_INT_MAX];
$tests['false <=> int(min)'] = [-1, null, false, PHP_INT_MIN];
$tests['false <=> float(epsilon)'] = [-1, null, false, PHP_FLOAT_EPSILON];
$tests['false <=> float(min)'] = [-1, null, false, PHP_FLOAT_MIN];
$tests['false <=> float(max)'] = [-1, null, false, PHP_FLOAT_MAX];
$tests['false <=> float(inf)'] = [-1, null, false, INF];
$tests['false <=> float(-inf)'] = [-1, null, false, -INF];
$tests['false <=> float(nan)'] = [-1, null, false, NAN];
$tests['false <=> $closure1'] = [-1, null, false, $closure1];
$tests['false <=> $closure2'] = [-1, null, false, $closure2];
$tests['false <=> $fh1'] = [-1, null, false, $fh1];
$tests['false <=> $fh2'] = [-1, null, false, $fh2];
$tests['false <=> $proc'] = [-1, null, false, $proc];
$tests['false <=> DateTime(2024-01-01T12:00:00Z)'] = [-1, null, false, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['false <=> DateTime(2024-01-01T12:00:01Z)'] = [-1, null, false, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['false <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [-1, null, false, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['false <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [-1, null, false, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['false <=> []'] = [0, null, false, []];
$tests['false <=> [[]]'] = [-1, null, false, [[]]];
$tests['false <=> [1 => []]'] = [-1, null, false, [1 => []]];
$tests['false <=> [1 => null]'] = [-1, null, false, [1 => null]];
$tests['false <=> [0]'] = [-1, null, false, [0]];
$tests['false <=> [0.0]'] = [-1, null, false, [0.0]];
$tests['false <=> [null]'] = [-1, null, false, [null]];
$tests['false <=> [false]'] = [-1, null, false, [false]];
$tests['false <=> [true]'] = [-1, null, false, [true]];
$tests['false <=> [\'\']'] = [-1, null, false, ['']];
$tests['false <=> [a, b, c]'] = [-1, null, false, ['a','b','c']];
$tests['false <=> [$fh1]'] = [-1, null, false, [$fh1]];
$tests['false <=> [foo => bar]'] = [-1, null, false, ['foo' => 'bar']];
$tests['false <=> object[]'] = [-1, null, false, (object) []];
$tests['false <=> object[[]]'] = [-1, null, false, (object) [[]]];
$tests['false <=> object[1 => []]'] = [-1, null, false, (object) [1 => []]];
$tests['false <=> object[1 => null]'] = [-1, null, false, (object) [1 => null]];
$tests['false <=> object[0]'] = [-1, null, false, (object) [0]];
$tests['false <=> object[0.0]'] = [-1, null, false, (object) [0.0]];
$tests['false <=> object[null]'] = [-1, null, false, (object) [null]];
$tests['false <=> object[false]'] = [-1, null, false, (object) [false]];
$tests['false <=> object[true]'] = [-1, null, false, (object) [true]];
$tests['false <=> object[\'\']'] = [-1, null, false, (object) ['']];
$tests['false <=> object[a, b, c]'] = [-1, null, false, (object) ['a','b','c']];
$tests['false <=> object[$fh1]'] = [-1, null, false, (object) [$fh1]];
$tests['false <=> object[foo => bar]'] = [-1, null, false, (object) ['foo' => 'bar']];
$tests['true <=> false'] = [1, null, true, false];
$tests['true <=> true'] = [0, null, true, true];
$tests['true <=> null'] = [1, null, true, null];
$tests['true <=> 0'] = [1, null, true, 0];
$tests['true <=> 1'] = [0, null, true, 1];
$tests['true <=> -1'] = [0, null, true, -1];
$tests['true <=> 0.0'] = [1, null, true, 0.0];
$tests['true <=> -1.0'] = [0, null, true, -1.0];
$tests['true <=> 1.0'] = [0, null, true, 1.0];
$tests['true <=> \'\''] = [1, null, true, ''];
$tests['true <=> \'0\''] = [1, null, true, '0'];
$tests['true <=> \'-0\''] = [0, null, true, '-0'];
$tests['true <=> \'+0\''] = [0, null, true, '+0'];
$tests['true <=> \'0.0\''] = [0, null, true, '0.0'];
$tests['true <=> \'-0.0\''] = [0, null, true, '-0.0'];
$tests['true <=> \'+0.0\''] = [0, null, true, '+0.0'];
$tests['true <=> \'1.0\''] = [0, null, true, '1.0'];
$tests['true <=> \'-1.0\''] = [0, null, true, '-1.0'];
$tests['true <=> \'+1.0\''] = [0, null, true, '+1.0'];
$tests['true <=> \'-1\''] = [0, null, true, '-1'];
$tests['true <=> \'+1\''] = [0, null, true, '+1'];
$tests['true <=> \'1\''] = [0, null, true, '1'];
$tests['true <=> \' 0\''] = [0, null, true, ' 0'];
$tests['true <=> \' -0\''] = [0, null, true, ' -0'];
$tests['true <=> \' +0\''] = [0, null, true, ' +0'];
$tests['true <=> \' 0\' '] = [0, null, true, ' 0 '];
$tests['true <=> \' -0\''] = [0, null, true, ' -0 '];
$tests['true <=> \' +0\''] = [0, null, true, ' +0 '];
$tests['true <=> \'0\' '] = [0, null, true, '0 '];
$tests['true <=> \'-0\''] = [0, null, true, '-0 '];
$tests['true <=> \'+0\''] = [0, null, true, '+0 '];
$tests['true <=> \' 0.0\''] = [0, null, true, ' 0.0'];
$tests['true <=> \' -0.0\''] = [0, null, true, ' -0.0'];
$tests['true <=> \' +0.0\''] = [0, null, true, ' +0.0'];
$tests['true <=> \' 0.0\' '] = [0, null, true, ' 0.0 '];
$tests['true <=> \' -0.0\''] = [0, null, true, ' -0.0 '];
$tests['true <=> \' +0.0\''] = [0, null, true, ' +0.0 '];
$tests['true <=> \'0.0\' '] = [0, null, true, '0.0 '];
$tests['true <=> \'-0.0\''] = [0, null, true, '-0.0 '];
$tests['true <=> \'+0.0\''] = [0, null, true, '+0.0 '];
$tests['true <=> \'03\''] = [0, null, true, '03'];
$tests['true <=> \'2abc\''] = [0, null, true, '2abc'];
$tests['true <=> \'2.5abc\''] = [0, null, true, '2.5abc'];
$tests['true <=> \'abc2abc\''] = [0, null, true, 'abc2abc'];
$tests['true <=> \'abc2.5abc\''] = [0, null, true, 'abc2.5abc'];
$tests['true <=> \'\\0\''] = [0, null, true, hex2bin('00')];
$tests['true <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [0, null, true, hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['true <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [0, null, true, hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['true <=> 12.0000000000001'] = [0, null, true, 12.0000000000001];
$tests['true <=> 12.000000000000002'] = [0, null, true, 12.000000000000002];
$tests['true <=> pi'] = [0, null, true, M_PI];
$tests['true <=> int(max)'] = [0, null, true, PHP_INT_MAX];
$tests['true <=> int(min)'] = [0, null, true, PHP_INT_MIN];
$tests['true <=> float(epsilon)'] = [0, null, true, PHP_FLOAT_EPSILON];
$tests['true <=> float(min)'] = [0, null, true, PHP_FLOAT_MIN];
$tests['true <=> float(max)'] = [0, null, true, PHP_FLOAT_MAX];
$tests['true <=> float(inf)'] = [0, null, true, INF];
$tests['true <=> float(-inf)'] = [0, null, true, -INF];
$tests['true <=> float(nan)'] = [0, null, true, NAN];
$tests['true <=> $closure1'] = [0, null, true, $closure1];
$tests['true <=> $closure2'] = [0, null, true, $closure2];
$tests['true <=> $fh1'] = [0, null, true, $fh1];
$tests['true <=> $fh2'] = [0, null, true, $fh2];
$tests['true <=> $proc'] = [0, null, true, $proc];
$tests['true <=> DateTime(2024-01-01T12:00:00Z)'] = [0, null, true, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['true <=> DateTime(2024-01-01T12:00:01Z)'] = [0, null, true, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['true <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [0, null, true, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['true <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [0, null, true, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['true <=> []'] = [1, null, true, []];
$tests['true <=> [[]]'] = [0, null, true, [[]]];
$tests['true <=> [1 => []]'] = [0, null, true, [1 => []]];
$tests['true <=> [1 => null]'] = [0, null, true, [1 => null]];
$tests['true <=> [0]'] = [0, null, true, [0]];
$tests['true <=> [0.0]'] = [0, null, true, [0.0]];
$tests['true <=> [null]'] = [0, null, true, [null]];
$tests['true <=> [false]'] = [0, null, true, [false]];
$tests['true <=> [true]'] = [0, null, true, [true]];
$tests['true <=> [\'\']'] = [0, null, true, ['']];
$tests['true <=> [a, b, c]'] = [0, null, true, ['a','b','c']];
$tests['true <=> [$fh1]'] = [0, null, true, [$fh1]];
$tests['true <=> [foo => bar]'] = [0, null, true, ['foo' => 'bar']];
$tests['true <=> object[]'] = [0, null, true, (object) []];
$tests['true <=> object[[]]'] = [0, null, true, (object) [[]]];
$tests['true <=> object[1 => []]'] = [0, null, true, (object) [1 => []]];
$tests['true <=> object[1 => null]'] = [0, null, true, (object) [1 => null]];
$tests['true <=> object[0]'] = [0, null, true, (object) [0]];
$tests['true <=> object[0.0]'] = [0, null, true, (object) [0.0]];
$tests['true <=> object[null]'] = [0, null, true, (object) [null]];
$tests['true <=> object[false]'] = [0, null, true, (object) [false]];
$tests['true <=> object[true]'] = [0, null, true, (object) [true]];
$tests['true <=> object[\'\']'] = [0, null, true, (object) ['']];
$tests['true <=> object[a, b, c]'] = [0, null, true, (object) ['a','b','c']];
$tests['true <=> object[$fh1]'] = [0, null, true, (object) [$fh1]];
$tests['true <=> object[foo => bar]'] = [0, null, true, (object) ['foo' => 'bar']];
$tests['null <=> false'] = [0, null, null, false];
$tests['null <=> true'] = [-1, null, null, true];
$tests['null <=> null'] = [0, null, null, null];
$tests['null <=> 0'] = [0, null, null, 0];
$tests['null <=> 1'] = [-1, null, null, 1];
$tests['null <=> -1'] = [-1, null, null, -1];
$tests['null <=> 0.0'] = [0, null, null, 0.0];
$tests['null <=> -1.0'] = [-1, null, null, -1.0];
$tests['null <=> 1.0'] = [-1, null, null, 1.0];
$tests['null <=> \'\''] = [0, null, null, ''];
$tests['null <=> \'0\''] = [-1, null, null, '0'];
$tests['null <=> \'-0\''] = [-1, null, null, '-0'];
$tests['null <=> \'+0\''] = [-1, null, null, '+0'];
$tests['null <=> \'0.0\''] = [-1, null, null, '0.0'];
$tests['null <=> \'-0.0\''] = [-1, null, null, '-0.0'];
$tests['null <=> \'+0.0\''] = [-1, null, null, '+0.0'];
$tests['null <=> \'1.0\''] = [-1, null, null, '1.0'];
$tests['null <=> \'-1.0\''] = [-1, null, null, '-1.0'];
$tests['null <=> \'+1.0\''] = [-1, null, null, '+1.0'];
$tests['null <=> \'-1\''] = [-1, null, null, '-1'];
$tests['null <=> \'+1\''] = [-1, null, null, '+1'];
$tests['null <=> \'1\''] = [-1, null, null, '1'];
$tests['null <=> \' 0\''] = [-1, null, null, ' 0'];
$tests['null <=> \' -0\''] = [-1, null, null, ' -0'];
$tests['null <=> \' +0\''] = [-1, null, null, ' +0'];
$tests['null <=> \' 0\' '] = [-1, null, null, ' 0 '];
$tests['null <=> \' -0\''] = [-1, null, null, ' -0 '];
$tests['null <=> \' +0\''] = [-1, null, null, ' +0 '];
$tests['null <=> \'0\' '] = [-1, null, null, '0 '];
$tests['null <=> \'-0\''] = [-1, null, null, '-0 '];
$tests['null <=> \'+0\''] = [-1, null, null, '+0 '];
$tests['null <=> \' 0.0\''] = [-1, null, null, ' 0.0'];
$tests['null <=> \' -0.0\''] = [-1, null, null, ' -0.0'];
$tests['null <=> \' +0.0\''] = [-1, null, null, ' +0.0'];
$tests['null <=> \' 0.0\' '] = [-1, null, null, ' 0.0 '];
$tests['null <=> \' -0.0\''] = [-1, null, null, ' -0.0 '];
$tests['null <=> \' +0.0\''] = [-1, null, null, ' +0.0 '];
$tests['null <=> \'0.0\' '] = [-1, null, null, '0.0 '];
$tests['null <=> \'-0.0\''] = [-1, null, null, '-0.0 '];
$tests['null <=> \'+0.0\''] = [-1, null, null, '+0.0 '];
$tests['null <=> \'03\''] = [-1, null, null, '03'];
$tests['null <=> \'2abc\''] = [-1, null, null, '2abc'];
$tests['null <=> \'2.5abc\''] = [-1, null, null, '2.5abc'];
$tests['null <=> \'abc2abc\''] = [-1, null, null, 'abc2abc'];
$tests['null <=> \'abc2.5abc\''] = [-1, null, null, 'abc2.5abc'];
$tests['null <=> \'\\0\''] = [-1, null, null, hex2bin('00')];
$tests['null <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [-1, null, null, hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['null <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [-1, null, null, hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['null <=> 12.0000000000001'] = [-1, null, null, 12.0000000000001];
$tests['null <=> 12.000000000000002'] = [-1, null, null, 12.000000000000002];
$tests['null <=> pi'] = [-1, null, null, M_PI];
$tests['null <=> int(max)'] = [-1, null, null, PHP_INT_MAX];
$tests['null <=> int(min)'] = [-1, null, null, PHP_INT_MIN];
$tests['null <=> float(epsilon)'] = [-1, null, null, PHP_FLOAT_EPSILON];
$tests['null <=> float(min)'] = [-1, null, null, PHP_FLOAT_MIN];
$tests['null <=> float(max)'] = [-1, null, null, PHP_FLOAT_MAX];
$tests['null <=> float(inf)'] = [-1, null, null, INF];
$tests['null <=> float(-inf)'] = [-1, null, null, -INF];
$tests['null <=> float(nan)'] = [-1, null, null, NAN];
$tests['null <=> $closure1'] = [-1, null, null, $closure1];
$tests['null <=> $closure2'] = [-1, null, null, $closure2];
$tests['null <=> $fh1'] = [-1, null, null, $fh1];
$tests['null <=> $fh2'] = [-1, null, null, $fh2];
$tests['null <=> $proc'] = [-1, null, null, $proc];
$tests['null <=> DateTime(2024-01-01T12:00:00Z)'] = [-1, null, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['null <=> DateTime(2024-01-01T12:00:01Z)'] = [-1, null, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['null <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [-1, null, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['null <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [-1, null, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['null <=> []'] = [0, null, null, []];
$tests['null <=> [[]]'] = [-1, null, null, [[]]];
$tests['null <=> [1 => []]'] = [-1, null, null, [1 => []]];
$tests['null <=> [1 => null]'] = [-1, null, null, [1 => null]];
$tests['null <=> [0]'] = [-1, null, null, [0]];
$tests['null <=> [0.0]'] = [-1, null, null, [0.0]];
$tests['null <=> [null]'] = [-1, null, null, [null]];
$tests['null <=> [false]'] = [-1, null, null, [false]];
$tests['null <=> [true]'] = [-1, null, null, [true]];
$tests['null <=> [\'\']'] = [-1, null, null, ['']];
$tests['null <=> [a, b, c]'] = [-1, null, null, ['a','b','c']];
$tests['null <=> [$fh1]'] = [-1, null, null, [$fh1]];
$tests['null <=> [foo => bar]'] = [-1, null, null, ['foo' => 'bar']];
$tests['null <=> object[]'] = [-1, null, null, (object) []];
$tests['null <=> object[[]]'] = [-1, null, null, (object) [[]]];
$tests['null <=> object[1 => []]'] = [-1, null, null, (object) [1 => []]];
$tests['null <=> object[1 => null]'] = [-1, null, null, (object) [1 => null]];
$tests['null <=> object[0]'] = [-1, null, null, (object) [0]];
$tests['null <=> object[0.0]'] = [-1, null, null, (object) [0.0]];
$tests['null <=> object[null]'] = [-1, null, null, (object) [null]];
$tests['null <=> object[false]'] = [-1, null, null, (object) [false]];
$tests['null <=> object[true]'] = [-1, null, null, (object) [true]];
$tests['null <=> object[\'\']'] = [-1, null, null, (object) ['']];
$tests['null <=> object[a, b, c]'] = [-1, null, null, (object) ['a','b','c']];
$tests['null <=> object[$fh1]'] = [-1, null, null, (object) [$fh1]];
$tests['null <=> object[foo => bar]'] = [-1, null, null, (object) ['foo' => 'bar']];
$tests['0 <=> false'] = [0, null, 0, false];
$tests['0 <=> true'] = [-1, null, 0, true];
$tests['0 <=> null'] = [0, null, 0, null];
$tests['0 <=> 0'] = [0, null, 0, 0];
$tests['0 <=> 1'] = [-1, null, 0, 1];
$tests['0 <=> -1'] = [1, null, 0, -1];
$tests['0 <=> 0.0'] = [0, null, 0, 0.0];
$tests['0 <=> -1.0'] = [1, null, 0, -1.0];
$tests['0 <=> 1.0'] = [-1, null, 0, 1.0];
$tests['0 <=> \'\''] = [1, null, 0, ''];
$tests['0 <=> \'0\''] = [0, null, 0, '0'];
$tests['0 <=> \'-0\''] = [0, null, 0, '-0'];
$tests['0 <=> \'+0\''] = [0, null, 0, '+0'];
$tests['0 <=> \'0.0\''] = [0, null, 0, '0.0'];
$tests['0 <=> \'-0.0\''] = [0, null, 0, '-0.0'];
$tests['0 <=> \'+0.0\''] = [0, null, 0, '+0.0'];
$tests['0 <=> \'1.0\''] = [-1, null, 0, '1.0'];
$tests['0 <=> \'-1.0\''] = [1, null, 0, '-1.0'];
$tests['0 <=> \'+1.0\''] = [-1, null, 0, '+1.0'];
$tests['0 <=> \'-1\''] = [1, null, 0, '-1'];
$tests['0 <=> \'+1\''] = [-1, null, 0, '+1'];
$tests['0 <=> \'1\''] = [-1, null, 0, '1'];
$tests['0 <=> \' 0\''] = [0, null, 0, ' 0'];
$tests['0 <=> \' -0\''] = [0, null, 0, ' -0'];
$tests['0 <=> \' +0\''] = [0, null, 0, ' +0'];
$tests['0 <=> \' 0\' '] = [0, null, 0, ' 0 '];
$tests['0 <=> \' -0\''] = [0, null, 0, ' -0 '];
$tests['0 <=> \' +0\''] = [0, null, 0, ' +0 '];
$tests['0 <=> \'0\' '] = [0, null, 0, '0 '];
$tests['0 <=> \'-0\''] = [0, null, 0, '-0 '];
$tests['0 <=> \'+0\''] = [0, null, 0, '+0 '];
$tests['0 <=> \' 0.0\''] = [0, null, 0, ' 0.0'];
$tests['0 <=> \' -0.0\''] = [0, null, 0, ' -0.0'];
$tests['0 <=> \' +0.0\''] = [0, null, 0, ' +0.0'];
$tests['0 <=> \' 0.0\' '] = [0, null, 0, ' 0.0 '];
$tests['0 <=> \' -0.0\''] = [0, null, 0, ' -0.0 '];
$tests['0 <=> \' +0.0\''] = [0, null, 0, ' +0.0 '];
$tests['0 <=> \'0.0\' '] = [0, null, 0, '0.0 '];
$tests['0 <=> \'-0.0\''] = [0, null, 0, '-0.0 '];
$tests['0 <=> \'+0.0\''] = [0, null, 0, '+0.0 '];
$tests['0 <=> \'03\''] = [-1, null, 0, '03'];
$tests['0 <=> \'2abc\''] = [-1, null, 0, '2abc'];
$tests['0 <=> \'2.5abc\''] = [-1, null, 0, '2.5abc'];
$tests['0 <=> \'abc2abc\''] = [-1, null, 0, 'abc2abc'];
$tests['0 <=> \'abc2.5abc\''] = [-1, null, 0, 'abc2.5abc'];
$tests['0 <=> \'\\0\''] = [1, null, 0, hex2bin('00')];
$tests['0 <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [-1, null, 0, hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['0 <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [1, null, 0, hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['0 <=> 12.0000000000001'] = [-1, null, 0, 12.0000000000001];
$tests['0 <=> 12.000000000000002'] = [-1, null, 0, 12.000000000000002];
$tests['0 <=> pi'] = [-1, null, 0, M_PI];
$tests['0 <=> int(max)'] = [-1, null, 0, PHP_INT_MAX];
$tests['0 <=> int(min)'] = [1, null, 0, PHP_INT_MIN];
$tests['0 <=> float(epsilon)'] = [-1, null, 0, PHP_FLOAT_EPSILON];
$tests['0 <=> float(min)'] = [-1, null, 0, PHP_FLOAT_MIN];
$tests['0 <=> float(max)'] = [-1, null, 0, PHP_FLOAT_MAX];
$tests['0 <=> float(inf)'] = [-1, null, 0, INF];
$tests['0 <=> float(-inf)'] = [1, null, 0, -INF];
$tests['0 <=> float(nan)'] = [1, null, 0, NAN];
$tests['0 <=> $closure1'] = [-1, ['type' => 8,'message' => 'Object of class Closure could not be converted to int'], 0, $closure1];
$tests['0 <=> $closure2'] = [-1, ['type' => 8,'message' => 'Object of class Closure could not be converted to int'], 0, $closure2];
$tests['0 <=> $fh1'] = [-1, null, 0, $fh1];
$tests['0 <=> $fh2'] = [-1, null, 0, $fh2];
$tests['0 <=> $proc'] = [-1, null, 0, $proc];
$tests['0 <=> DateTime(2024-01-01T12:00:00Z)'] = [-1, ['type' => 8,'message' => 'Object of class DateTime could not be converted to int'], 0, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['0 <=> DateTime(2024-01-01T12:00:01Z)'] = [-1, ['type' => 8,'message' => 'Object of class DateTime could not be converted to int'], 0, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['0 <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [-1, ['type' => 8,'message' => 'Object of class DateTimeImmutable could not be converted to int'], 0, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['0 <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [-1, ['type' => 8,'message' => 'Object of class DateTimeImmutable could not be converted to int'], 0, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['0 <=> []'] = [-1, null, 0, []];
$tests['0 <=> [[]]'] = [-1, null, 0, [[]]];
$tests['0 <=> [1 => []]'] = [-1, null, 0, [1 => []]];
$tests['0 <=> [1 => null]'] = [-1, null, 0, [1 => null]];
$tests['0 <=> [0]'] = [-1, null, 0, [0]];
$tests['0 <=> [0.0]'] = [-1, null, 0, [0.0]];
$tests['0 <=> [null]'] = [-1, null, 0, [null]];
$tests['0 <=> [false]'] = [-1, null, 0, [false]];
$tests['0 <=> [true]'] = [-1, null, 0, [true]];
$tests['0 <=> [\'\']'] = [-1, null, 0, ['']];
$tests['0 <=> [a, b, c]'] = [-1, null, 0, ['a','b','c']];
$tests['0 <=> [$fh1]'] = [-1, null, 0, [$fh1]];
$tests['0 <=> [foo => bar]'] = [-1, null, 0, ['foo' => 'bar']];
$tests['0 <=> object[]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], 0, (object) []];
$tests['0 <=> object[[]]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], 0, (object) [[]]];
$tests['0 <=> object[1 => []]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], 0, (object) [1 => []]];
$tests['0 <=> object[1 => null]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], 0, (object) [1 => null]];
$tests['0 <=> object[0]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], 0, (object) [0]];
$tests['0 <=> object[0.0]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], 0, (object) [0.0]];
$tests['0 <=> object[null]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], 0, (object) [null]];
$tests['0 <=> object[false]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], 0, (object) [false]];
$tests['0 <=> object[true]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], 0, (object) [true]];
$tests['0 <=> object[\'\']'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], 0, (object) ['']];
$tests['0 <=> object[a, b, c]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], 0, (object) ['a','b','c']];
$tests['0 <=> object[$fh1]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], 0, (object) [$fh1]];
$tests['0 <=> object[foo => bar]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], 0, (object) ['foo' => 'bar']];
$tests['1 <=> false'] = [1, null, 1, false];
$tests['1 <=> true'] = [0, null, 1, true];
$tests['1 <=> null'] = [1, null, 1, null];
$tests['1 <=> 0'] = [1, null, 1, 0];
$tests['1 <=> 1'] = [0, null, 1, 1];
$tests['1 <=> -1'] = [1, null, 1, -1];
$tests['1 <=> 0.0'] = [1, null, 1, 0.0];
$tests['1 <=> -1.0'] = [1, null, 1, -1.0];
$tests['1 <=> 1.0'] = [0, null, 1, 1.0];
$tests['1 <=> \'\''] = [1, null, 1, ''];
$tests['1 <=> \'0\''] = [1, null, 1, '0'];
$tests['1 <=> \'-0\''] = [1, null, 1, '-0'];
$tests['1 <=> \'+0\''] = [1, null, 1, '+0'];
$tests['1 <=> \'0.0\''] = [1, null, 1, '0.0'];
$tests['1 <=> \'-0.0\''] = [1, null, 1, '-0.0'];
$tests['1 <=> \'+0.0\''] = [1, null, 1, '+0.0'];
$tests['1 <=> \'1.0\''] = [0, null, 1, '1.0'];
$tests['1 <=> \'-1.0\''] = [1, null, 1, '-1.0'];
$tests['1 <=> \'+1.0\''] = [0, null, 1, '+1.0'];
$tests['1 <=> \'-1\''] = [1, null, 1, '-1'];
$tests['1 <=> \'+1\''] = [0, null, 1, '+1'];
$tests['1 <=> \'1\''] = [0, null, 1, '1'];
$tests['1 <=> \' 0\''] = [1, null, 1, ' 0'];
$tests['1 <=> \' -0\''] = [1, null, 1, ' -0'];
$tests['1 <=> \' +0\''] = [1, null, 1, ' +0'];
$tests['1 <=> \' 0\' '] = [1, null, 1, ' 0 '];
$tests['1 <=> \' -0\''] = [1, null, 1, ' -0 '];
$tests['1 <=> \' +0\''] = [1, null, 1, ' +0 '];
$tests['1 <=> \'0\' '] = [1, null, 1, '0 '];
$tests['1 <=> \'-0\''] = [1, null, 1, '-0 '];
$tests['1 <=> \'+0\''] = [1, null, 1, '+0 '];
$tests['1 <=> \' 0.0\''] = [1, null, 1, ' 0.0'];
$tests['1 <=> \' -0.0\''] = [1, null, 1, ' -0.0'];
$tests['1 <=> \' +0.0\''] = [1, null, 1, ' +0.0'];
$tests['1 <=> \' 0.0\' '] = [1, null, 1, ' 0.0 '];
$tests['1 <=> \' -0.0\''] = [1, null, 1, ' -0.0 '];
$tests['1 <=> \' +0.0\''] = [1, null, 1, ' +0.0 '];
$tests['1 <=> \'0.0\' '] = [1, null, 1, '0.0 '];
$tests['1 <=> \'-0.0\''] = [1, null, 1, '-0.0 '];
$tests['1 <=> \'+0.0\''] = [1, null, 1, '+0.0 '];
$tests['1 <=> \'03\''] = [-1, null, 1, '03'];
$tests['1 <=> \'2abc\''] = [-1, null, 1, '2abc'];
$tests['1 <=> \'2.5abc\''] = [-1, null, 1, '2.5abc'];
$tests['1 <=> \'abc2abc\''] = [-1, null, 1, 'abc2abc'];
$tests['1 <=> \'abc2.5abc\''] = [-1, null, 1, 'abc2.5abc'];
$tests['1 <=> \'\\0\''] = [1, null, 1, hex2bin('00')];
$tests['1 <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [-1, null, 1, hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['1 <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [1, null, 1, hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['1 <=> 12.0000000000001'] = [-1, null, 1, 12.0000000000001];
$tests['1 <=> 12.000000000000002'] = [-1, null, 1, 12.000000000000002];
$tests['1 <=> pi'] = [-1, null, 1, M_PI];
$tests['1 <=> int(max)'] = [-1, null, 1, PHP_INT_MAX];
$tests['1 <=> int(min)'] = [1, null, 1, PHP_INT_MIN];
$tests['1 <=> float(epsilon)'] = [1, null, 1, PHP_FLOAT_EPSILON];
$tests['1 <=> float(min)'] = [1, null, 1, PHP_FLOAT_MIN];
$tests['1 <=> float(max)'] = [-1, null, 1, PHP_FLOAT_MAX];
$tests['1 <=> float(inf)'] = [-1, null, 1, INF];
$tests['1 <=> float(-inf)'] = [1, null, 1, -INF];
$tests['1 <=> float(nan)'] = [1, null, 1, NAN];
$tests['1 <=> $closure1'] = [0, ['type' => 8,'message' => 'Object of class Closure could not be converted to int'], 1, $closure1];
$tests['1 <=> $closure2'] = [0, ['type' => 8,'message' => 'Object of class Closure could not be converted to int'], 1, $closure2];
$tests['1 <=> $fh1'] = [-1, null, 1, $fh1];
$tests['1 <=> $fh2'] = [-1, null, 1, $fh2];
$tests['1 <=> $proc'] = [-1, null, 1, $proc];
$tests['1 <=> DateTime(2024-01-01T12:00:00Z)'] = [0, ['type' => 8,'message' => 'Object of class DateTime could not be converted to int'], 1, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['1 <=> DateTime(2024-01-01T12:00:01Z)'] = [0, ['type' => 8,'message' => 'Object of class DateTime could not be converted to int'], 1, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['1 <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [0, ['type' => 8,'message' => 'Object of class DateTimeImmutable could not be converted to int'], 1, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['1 <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [0, ['type' => 8,'message' => 'Object of class DateTimeImmutable could not be converted to int'], 1, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['1 <=> []'] = [-1, null, 1, []];
$tests['1 <=> [[]]'] = [-1, null, 1, [[]]];
$tests['1 <=> [1 => []]'] = [-1, null, 1, [1 => []]];
$tests['1 <=> [1 => null]'] = [-1, null, 1, [1 => null]];
$tests['1 <=> [0]'] = [-1, null, 1, [0]];
$tests['1 <=> [0.0]'] = [-1, null, 1, [0.0]];
$tests['1 <=> [null]'] = [-1, null, 1, [null]];
$tests['1 <=> [false]'] = [-1, null, 1, [false]];
$tests['1 <=> [true]'] = [-1, null, 1, [true]];
$tests['1 <=> [\'\']'] = [-1, null, 1, ['']];
$tests['1 <=> [a, b, c]'] = [-1, null, 1, ['a','b','c']];
$tests['1 <=> [$fh1]'] = [-1, null, 1, [$fh1]];
$tests['1 <=> [foo => bar]'] = [-1, null, 1, ['foo' => 'bar']];
$tests['1 <=> object[]'] = [0, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], 1, (object) []];
$tests['1 <=> object[[]]'] = [0, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], 1, (object) [[]]];
$tests['1 <=> object[1 => []]'] = [0, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], 1, (object) [1 => []]];
$tests['1 <=> object[1 => null]'] = [0, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], 1, (object) [1 => null]];
$tests['1 <=> object[0]'] = [0, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], 1, (object) [0]];
$tests['1 <=> object[0.0]'] = [0, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], 1, (object) [0.0]];
$tests['1 <=> object[null]'] = [0, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], 1, (object) [null]];
$tests['1 <=> object[false]'] = [0, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], 1, (object) [false]];
$tests['1 <=> object[true]'] = [0, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], 1, (object) [true]];
$tests['1 <=> object[\'\']'] = [0, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], 1, (object) ['']];
$tests['1 <=> object[a, b, c]'] = [0, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], 1, (object) ['a','b','c']];
$tests['1 <=> object[$fh1]'] = [0, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], 1, (object) [$fh1]];
$tests['1 <=> object[foo => bar]'] = [0, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], 1, (object) ['foo' => 'bar']];
$tests['-1 <=> false'] = [1, null, -1, false];
$tests['-1 <=> true'] = [0, null, -1, true];
$tests['-1 <=> null'] = [1, null, -1, null];
$tests['-1 <=> 0'] = [-1, null, -1, 0];
$tests['-1 <=> 1'] = [-1, null, -1, 1];
$tests['-1 <=> -1'] = [0, null, -1, -1];
$tests['-1 <=> 0.0'] = [-1, null, -1, 0.0];
$tests['-1 <=> -1.0'] = [0, null, -1, -1.0];
$tests['-1 <=> 1.0'] = [-1, null, -1, 1.0];
$tests['-1 <=> \'\''] = [1, null, -1, ''];
$tests['-1 <=> \'0\''] = [-1, null, -1, '0'];
$tests['-1 <=> \'-0\''] = [-1, null, -1, '-0'];
$tests['-1 <=> \'+0\''] = [-1, null, -1, '+0'];
$tests['-1 <=> \'0.0\''] = [-1, null, -1, '0.0'];
$tests['-1 <=> \'-0.0\''] = [-1, null, -1, '-0.0'];
$tests['-1 <=> \'+0.0\''] = [-1, null, -1, '+0.0'];
$tests['-1 <=> \'1.0\''] = [-1, null, -1, '1.0'];
$tests['-1 <=> \'-1.0\''] = [0, null, -1, '-1.0'];
$tests['-1 <=> \'+1.0\''] = [-1, null, -1, '+1.0'];
$tests['-1 <=> \'-1\''] = [0, null, -1, '-1'];
$tests['-1 <=> \'+1\''] = [-1, null, -1, '+1'];
$tests['-1 <=> \'1\''] = [-1, null, -1, '1'];
$tests['-1 <=> \' 0\''] = [-1, null, -1, ' 0'];
$tests['-1 <=> \' -0\''] = [-1, null, -1, ' -0'];
$tests['-1 <=> \' +0\''] = [-1, null, -1, ' +0'];
$tests['-1 <=> \' 0\' '] = [-1, null, -1, ' 0 '];
$tests['-1 <=> \' -0\''] = [-1, null, -1, ' -0 '];
$tests['-1 <=> \' +0\''] = [-1, null, -1, ' +0 '];
$tests['-1 <=> \'0\' '] = [-1, null, -1, '0 '];
$tests['-1 <=> \'-0\''] = [-1, null, -1, '-0 '];
$tests['-1 <=> \'+0\''] = [-1, null, -1, '+0 '];
$tests['-1 <=> \' 0.0\''] = [-1, null, -1, ' 0.0'];
$tests['-1 <=> \' -0.0\''] = [-1, null, -1, ' -0.0'];
$tests['-1 <=> \' +0.0\''] = [-1, null, -1, ' +0.0'];
$tests['-1 <=> \' 0.0\' '] = [-1, null, -1, ' 0.0 '];
$tests['-1 <=> \' -0.0\''] = [-1, null, -1, ' -0.0 '];
$tests['-1 <=> \' +0.0\''] = [-1, null, -1, ' +0.0 '];
$tests['-1 <=> \'0.0\' '] = [-1, null, -1, '0.0 '];
$tests['-1 <=> \'-0.0\''] = [-1, null, -1, '-0.0 '];
$tests['-1 <=> \'+0.0\''] = [-1, null, -1, '+0.0 '];
$tests['-1 <=> \'03\''] = [-1, null, -1, '03'];
$tests['-1 <=> \'2abc\''] = [-1, null, -1, '2abc'];
$tests['-1 <=> \'2.5abc\''] = [-1, null, -1, '2.5abc'];
$tests['-1 <=> \'abc2abc\''] = [-1, null, -1, 'abc2abc'];
$tests['-1 <=> \'abc2.5abc\''] = [-1, null, -1, 'abc2.5abc'];
$tests['-1 <=> \'\\0\''] = [1, null, -1, hex2bin('00')];
$tests['-1 <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [-1, null, -1, hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['-1 <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [1, null, -1, hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['-1 <=> 12.0000000000001'] = [-1, null, -1, 12.0000000000001];
$tests['-1 <=> 12.000000000000002'] = [-1, null, -1, 12.000000000000002];
$tests['-1 <=> pi'] = [-1, null, -1, M_PI];
$tests['-1 <=> int(max)'] = [-1, null, -1, PHP_INT_MAX];
$tests['-1 <=> int(min)'] = [1, null, -1, PHP_INT_MIN];
$tests['-1 <=> float(epsilon)'] = [-1, null, -1, PHP_FLOAT_EPSILON];
$tests['-1 <=> float(min)'] = [-1, null, -1, PHP_FLOAT_MIN];
$tests['-1 <=> float(max)'] = [-1, null, -1, PHP_FLOAT_MAX];
$tests['-1 <=> float(inf)'] = [-1, null, -1, INF];
$tests['-1 <=> float(-inf)'] = [1, null, -1, -INF];
$tests['-1 <=> float(nan)'] = [1, null, -1, NAN];
$tests['-1 <=> $closure1'] = [-1, ['type' => 8,'message' => 'Object of class Closure could not be converted to int'], -1, $closure1];
$tests['-1 <=> $closure2'] = [-1, ['type' => 8,'message' => 'Object of class Closure could not be converted to int'], -1, $closure2];
$tests['-1 <=> $fh1'] = [-1, null, -1, $fh1];
$tests['-1 <=> $fh2'] = [-1, null, -1, $fh2];
$tests['-1 <=> $proc'] = [-1, null, -1, $proc];
$tests['-1 <=> DateTime(2024-01-01T12:00:00Z)'] = [-1, ['type' => 8,'message' => 'Object of class DateTime could not be converted to int'], -1, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['-1 <=> DateTime(2024-01-01T12:00:01Z)'] = [-1, ['type' => 8,'message' => 'Object of class DateTime could not be converted to int'], -1, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['-1 <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [-1, ['type' => 8,'message' => 'Object of class DateTimeImmutable could not be converted to int'], -1, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['-1 <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [-1, ['type' => 8,'message' => 'Object of class DateTimeImmutable could not be converted to int'], -1, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['-1 <=> []'] = [-1, null, -1, []];
$tests['-1 <=> [[]]'] = [-1, null, -1, [[]]];
$tests['-1 <=> [1 => []]'] = [-1, null, -1, [1 => []]];
$tests['-1 <=> [1 => null]'] = [-1, null, -1, [1 => null]];
$tests['-1 <=> [0]'] = [-1, null, -1, [0]];
$tests['-1 <=> [0.0]'] = [-1, null, -1, [0.0]];
$tests['-1 <=> [null]'] = [-1, null, -1, [null]];
$tests['-1 <=> [false]'] = [-1, null, -1, [false]];
$tests['-1 <=> [true]'] = [-1, null, -1, [true]];
$tests['-1 <=> [\'\']'] = [-1, null, -1, ['']];
$tests['-1 <=> [a, b, c]'] = [-1, null, -1, ['a','b','c']];
$tests['-1 <=> [$fh1]'] = [-1, null, -1, [$fh1]];
$tests['-1 <=> [foo => bar]'] = [-1, null, -1, ['foo' => 'bar']];
$tests['-1 <=> object[]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], -1, (object) []];
$tests['-1 <=> object[[]]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], -1, (object) [[]]];
$tests['-1 <=> object[1 => []]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], -1, (object) [1 => []]];
$tests['-1 <=> object[1 => null]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], -1, (object) [1 => null]];
$tests['-1 <=> object[0]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], -1, (object) [0]];
$tests['-1 <=> object[0.0]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], -1, (object) [0.0]];
$tests['-1 <=> object[null]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], -1, (object) [null]];
$tests['-1 <=> object[false]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], -1, (object) [false]];
$tests['-1 <=> object[true]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], -1, (object) [true]];
$tests['-1 <=> object[\'\']'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], -1, (object) ['']];
$tests['-1 <=> object[a, b, c]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], -1, (object) ['a','b','c']];
$tests['-1 <=> object[$fh1]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], -1, (object) [$fh1]];
$tests['-1 <=> object[foo => bar]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], -1, (object) ['foo' => 'bar']];
$tests['0.0 <=> false'] = [0, null, 0.0, false];
$tests['0.0 <=> true'] = [-1, null, 0.0, true];
$tests['0.0 <=> null'] = [0, null, 0.0, null];
$tests['0.0 <=> 0'] = [0, null, 0.0, 0];
$tests['0.0 <=> 1'] = [-1, null, 0.0, 1];
$tests['0.0 <=> -1'] = [1, null, 0.0, -1];
$tests['0.0 <=> 0.0'] = [0, null, 0.0, 0.0];
$tests['0.0 <=> -1.0'] = [1, null, 0.0, -1.0];
$tests['0.0 <=> 1.0'] = [-1, null, 0.0, 1.0];
$tests['0.0 <=> \'\''] = [1, null, 0.0, ''];
$tests['0.0 <=> \'0\''] = [0, null, 0.0, '0'];
$tests['0.0 <=> \'-0\''] = [0, null, 0.0, '-0'];
$tests['0.0 <=> \'+0\''] = [0, null, 0.0, '+0'];
$tests['0.0 <=> \'0.0\''] = [0, null, 0.0, '0.0'];
$tests['0.0 <=> \'-0.0\''] = [0, null, 0.0, '-0.0'];
$tests['0.0 <=> \'+0.0\''] = [0, null, 0.0, '+0.0'];
$tests['0.0 <=> \'1.0\''] = [-1, null, 0.0, '1.0'];
$tests['0.0 <=> \'-1.0\''] = [1, null, 0.0, '-1.0'];
$tests['0.0 <=> \'+1.0\''] = [-1, null, 0.0, '+1.0'];
$tests['0.0 <=> \'-1\''] = [1, null, 0.0, '-1'];
$tests['0.0 <=> \'+1\''] = [-1, null, 0.0, '+1'];
$tests['0.0 <=> \'1\''] = [-1, null, 0.0, '1'];
$tests['0.0 <=> \' 0\''] = [0, null, 0.0, ' 0'];
$tests['0.0 <=> \' -0\''] = [0, null, 0.0, ' -0'];
$tests['0.0 <=> \' +0\''] = [0, null, 0.0, ' +0'];
$tests['0.0 <=> \' 0\' '] = [0, null, 0.0, ' 0 '];
$tests['0.0 <=> \' -0\''] = [0, null, 0.0, ' -0 '];
$tests['0.0 <=> \' +0\''] = [0, null, 0.0, ' +0 '];
$tests['0.0 <=> \'0\' '] = [0, null, 0.0, '0 '];
$tests['0.0 <=> \'-0\''] = [0, null, 0.0, '-0 '];
$tests['0.0 <=> \'+0\''] = [0, null, 0.0, '+0 '];
$tests['0.0 <=> \' 0.0\''] = [0, null, 0.0, ' 0.0'];
$tests['0.0 <=> \' -0.0\''] = [0, null, 0.0, ' -0.0'];
$tests['0.0 <=> \' +0.0\''] = [0, null, 0.0, ' +0.0'];
$tests['0.0 <=> \' 0.0\' '] = [0, null, 0.0, ' 0.0 '];
$tests['0.0 <=> \' -0.0\''] = [0, null, 0.0, ' -0.0 '];
$tests['0.0 <=> \' +0.0\''] = [0, null, 0.0, ' +0.0 '];
$tests['0.0 <=> \'0.0\' '] = [0, null, 0.0, '0.0 '];
$tests['0.0 <=> \'-0.0\''] = [0, null, 0.0, '-0.0 '];
$tests['0.0 <=> \'+0.0\''] = [0, null, 0.0, '+0.0 '];
$tests['0.0 <=> \'03\''] = [-1, null, 0.0, '03'];
$tests['0.0 <=> \'2abc\''] = [-1, null, 0.0, '2abc'];
$tests['0.0 <=> \'2.5abc\''] = [-1, null, 0.0, '2.5abc'];
$tests['0.0 <=> \'abc2abc\''] = [-1, null, 0.0, 'abc2abc'];
$tests['0.0 <=> \'abc2.5abc\''] = [-1, null, 0.0, 'abc2.5abc'];
$tests['0.0 <=> \'\\0\''] = [1, null, 0.0, hex2bin('00')];
$tests['0.0 <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [-1, null, 0.0, hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['0.0 <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [1, null, 0.0, hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['0.0 <=> 12.0000000000001'] = [-1, null, 0.0, 12.0000000000001];
$tests['0.0 <=> 12.000000000000002'] = [-1, null, 0.0, 12.000000000000002];
$tests['0.0 <=> pi'] = [-1, null, 0.0, M_PI];
$tests['0.0 <=> int(max)'] = [-1, null, 0.0, PHP_INT_MAX];
$tests['0.0 <=> int(min)'] = [1, null, 0.0, PHP_INT_MIN];
$tests['0.0 <=> float(epsilon)'] = [-1, null, 0.0, PHP_FLOAT_EPSILON];
$tests['0.0 <=> float(min)'] = [-1, null, 0.0, PHP_FLOAT_MIN];
$tests['0.0 <=> float(max)'] = [-1, null, 0.0, PHP_FLOAT_MAX];
$tests['0.0 <=> float(inf)'] = [-1, null, 0.0, INF];
$tests['0.0 <=> float(-inf)'] = [1, null, 0.0, -INF];
$tests['0.0 <=> float(nan)'] = [1, null, 0.0, NAN];
$tests['0.0 <=> $closure1'] = [-1, ['type' => 8,'message' => 'Object of class Closure could not be converted to float'], 0.0, $closure1];
$tests['0.0 <=> $closure2'] = [-1, ['type' => 8,'message' => 'Object of class Closure could not be converted to float'], 0.0, $closure2];
$tests['0.0 <=> $fh1'] = [-1, null, 0.0, $fh1];
$tests['0.0 <=> $fh2'] = [-1, null, 0.0, $fh2];
$tests['0.0 <=> $proc'] = [-1, null, 0.0, $proc];
$tests['0.0 <=> DateTime(2024-01-01T12:00:00Z)'] = [-1, ['type' => 8,'message' => 'Object of class DateTime could not be converted to float'], 0.0, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['0.0 <=> DateTime(2024-01-01T12:00:01Z)'] = [-1, ['type' => 8,'message' => 'Object of class DateTime could not be converted to float'], 0.0, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['0.0 <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [-1, ['type' => 8,'message' => 'Object of class DateTimeImmutable could not be converted to float'], 0.0, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['0.0 <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [-1, ['type' => 8,'message' => 'Object of class DateTimeImmutable could not be converted to float'], 0.0, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['0.0 <=> []'] = [-1, null, 0.0, []];
$tests['0.0 <=> [[]]'] = [-1, null, 0.0, [[]]];
$tests['0.0 <=> [1 => []]'] = [-1, null, 0.0, [1 => []]];
$tests['0.0 <=> [1 => null]'] = [-1, null, 0.0, [1 => null]];
$tests['0.0 <=> [0]'] = [-1, null, 0.0, [0]];
$tests['0.0 <=> [0.0]'] = [-1, null, 0.0, [0.0]];
$tests['0.0 <=> [null]'] = [-1, null, 0.0, [null]];
$tests['0.0 <=> [false]'] = [-1, null, 0.0, [false]];
$tests['0.0 <=> [true]'] = [-1, null, 0.0, [true]];
$tests['0.0 <=> [\'\']'] = [-1, null, 0.0, ['']];
$tests['0.0 <=> [a, b, c]'] = [-1, null, 0.0, ['a','b','c']];
$tests['0.0 <=> [$fh1]'] = [-1, null, 0.0, [$fh1]];
$tests['0.0 <=> [foo => bar]'] = [-1, null, 0.0, ['foo' => 'bar']];
$tests['0.0 <=> object[]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], 0.0, (object) []];
$tests['0.0 <=> object[[]]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], 0.0, (object) [[]]];
$tests['0.0 <=> object[1 => []]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], 0.0, (object) [1 => []]];
$tests['0.0 <=> object[1 => null]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], 0.0, (object) [1 => null]];
$tests['0.0 <=> object[0]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], 0.0, (object) [0]];
$tests['0.0 <=> object[0.0]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], 0.0, (object) [0.0]];
$tests['0.0 <=> object[null]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], 0.0, (object) [null]];
$tests['0.0 <=> object[false]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], 0.0, (object) [false]];
$tests['0.0 <=> object[true]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], 0.0, (object) [true]];
$tests['0.0 <=> object[\'\']'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], 0.0, (object) ['']];
$tests['0.0 <=> object[a, b, c]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], 0.0, (object) ['a','b','c']];
$tests['0.0 <=> object[$fh1]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], 0.0, (object) [$fh1]];
$tests['0.0 <=> object[foo => bar]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], 0.0, (object) ['foo' => 'bar']];
$tests['-1.0 <=> false'] = [1, null, -1.0, false];
$tests['-1.0 <=> true'] = [0, null, -1.0, true];
$tests['-1.0 <=> null'] = [1, null, -1.0, null];
$tests['-1.0 <=> 0'] = [-1, null, -1.0, 0];
$tests['-1.0 <=> 1'] = [-1, null, -1.0, 1];
$tests['-1.0 <=> -1'] = [0, null, -1.0, -1];
$tests['-1.0 <=> 0.0'] = [-1, null, -1.0, 0.0];
$tests['-1.0 <=> -1.0'] = [0, null, -1.0, -1.0];
$tests['-1.0 <=> 1.0'] = [-1, null, -1.0, 1.0];
$tests['-1.0 <=> \'\''] = [1, null, -1.0, ''];
$tests['-1.0 <=> \'0\''] = [-1, null, -1.0, '0'];
$tests['-1.0 <=> \'-0\''] = [-1, null, -1.0, '-0'];
$tests['-1.0 <=> \'+0\''] = [-1, null, -1.0, '+0'];
$tests['-1.0 <=> \'0.0\''] = [-1, null, -1.0, '0.0'];
$tests['-1.0 <=> \'-0.0\''] = [-1, null, -1.0, '-0.0'];
$tests['-1.0 <=> \'+0.0\''] = [-1, null, -1.0, '+0.0'];
$tests['-1.0 <=> \'1.0\''] = [-1, null, -1.0, '1.0'];
$tests['-1.0 <=> \'-1.0\''] = [0, null, -1.0, '-1.0'];
$tests['-1.0 <=> \'+1.0\''] = [-1, null, -1.0, '+1.0'];
$tests['-1.0 <=> \'-1\''] = [0, null, -1.0, '-1'];
$tests['-1.0 <=> \'+1\''] = [-1, null, -1.0, '+1'];
$tests['-1.0 <=> \'1\''] = [-1, null, -1.0, '1'];
$tests['-1.0 <=> \' 0\''] = [-1, null, -1.0, ' 0'];
$tests['-1.0 <=> \' -0\''] = [-1, null, -1.0, ' -0'];
$tests['-1.0 <=> \' +0\''] = [-1, null, -1.0, ' +0'];
$tests['-1.0 <=> \' 0\' '] = [-1, null, -1.0, ' 0 '];
$tests['-1.0 <=> \' -0\''] = [-1, null, -1.0, ' -0 '];
$tests['-1.0 <=> \' +0\''] = [-1, null, -1.0, ' +0 '];
$tests['-1.0 <=> \'0\' '] = [-1, null, -1.0, '0 '];
$tests['-1.0 <=> \'-0\''] = [-1, null, -1.0, '-0 '];
$tests['-1.0 <=> \'+0\''] = [-1, null, -1.0, '+0 '];
$tests['-1.0 <=> \' 0.0\''] = [-1, null, -1.0, ' 0.0'];
$tests['-1.0 <=> \' -0.0\''] = [-1, null, -1.0, ' -0.0'];
$tests['-1.0 <=> \' +0.0\''] = [-1, null, -1.0, ' +0.0'];
$tests['-1.0 <=> \' 0.0\' '] = [-1, null, -1.0, ' 0.0 '];
$tests['-1.0 <=> \' -0.0\''] = [-1, null, -1.0, ' -0.0 '];
$tests['-1.0 <=> \' +0.0\''] = [-1, null, -1.0, ' +0.0 '];
$tests['-1.0 <=> \'0.0\' '] = [-1, null, -1.0, '0.0 '];
$tests['-1.0 <=> \'-0.0\''] = [-1, null, -1.0, '-0.0 '];
$tests['-1.0 <=> \'+0.0\''] = [-1, null, -1.0, '+0.0 '];
$tests['-1.0 <=> \'03\''] = [-1, null, -1.0, '03'];
$tests['-1.0 <=> \'2abc\''] = [-1, null, -1.0, '2abc'];
$tests['-1.0 <=> \'2.5abc\''] = [-1, null, -1.0, '2.5abc'];
$tests['-1.0 <=> \'abc2abc\''] = [-1, null, -1.0, 'abc2abc'];
$tests['-1.0 <=> \'abc2.5abc\''] = [-1, null, -1.0, 'abc2.5abc'];
$tests['-1.0 <=> \'\\0\''] = [1, null, -1.0, hex2bin('00')];
$tests['-1.0 <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [-1, null, -1.0, hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['-1.0 <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [1, null, -1.0, hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['-1.0 <=> 12.0000000000001'] = [-1, null, -1.0, 12.0000000000001];
$tests['-1.0 <=> 12.000000000000002'] = [-1, null, -1.0, 12.000000000000002];
$tests['-1.0 <=> pi'] = [-1, null, -1.0, M_PI];
$tests['-1.0 <=> int(max)'] = [-1, null, -1.0, PHP_INT_MAX];
$tests['-1.0 <=> int(min)'] = [1, null, -1.0, PHP_INT_MIN];
$tests['-1.0 <=> float(epsilon)'] = [-1, null, -1.0, PHP_FLOAT_EPSILON];
$tests['-1.0 <=> float(min)'] = [-1, null, -1.0, PHP_FLOAT_MIN];
$tests['-1.0 <=> float(max)'] = [-1, null, -1.0, PHP_FLOAT_MAX];
$tests['-1.0 <=> float(inf)'] = [-1, null, -1.0, INF];
$tests['-1.0 <=> float(-inf)'] = [1, null, -1.0, -INF];
$tests['-1.0 <=> float(nan)'] = [1, null, -1.0, NAN];
$tests['-1.0 <=> $closure1'] = [-1, ['type' => 8,'message' => 'Object of class Closure could not be converted to float'], -1.0, $closure1];
$tests['-1.0 <=> $closure2'] = [-1, ['type' => 8,'message' => 'Object of class Closure could not be converted to float'], -1.0, $closure2];
$tests['-1.0 <=> $fh1'] = [-1, null, -1.0, $fh1];
$tests['-1.0 <=> $fh2'] = [-1, null, -1.0, $fh2];
$tests['-1.0 <=> $proc'] = [-1, null, -1.0, $proc];
$tests['-1.0 <=> DateTime(2024-01-01T12:00:00Z)'] = [-1, ['type' => 8,'message' => 'Object of class DateTime could not be converted to float'], -1.0, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['-1.0 <=> DateTime(2024-01-01T12:00:01Z)'] = [-1, ['type' => 8,'message' => 'Object of class DateTime could not be converted to float'], -1.0, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['-1.0 <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [-1, ['type' => 8,'message' => 'Object of class DateTimeImmutable could not be converted to float'], -1.0, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['-1.0 <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [-1, ['type' => 8,'message' => 'Object of class DateTimeImmutable could not be converted to float'], -1.0, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['-1.0 <=> []'] = [-1, null, -1.0, []];
$tests['-1.0 <=> [[]]'] = [-1, null, -1.0, [[]]];
$tests['-1.0 <=> [1 => []]'] = [-1, null, -1.0, [1 => []]];
$tests['-1.0 <=> [1 => null]'] = [-1, null, -1.0, [1 => null]];
$tests['-1.0 <=> [0]'] = [-1, null, -1.0, [0]];
$tests['-1.0 <=> [0.0]'] = [-1, null, -1.0, [0.0]];
$tests['-1.0 <=> [null]'] = [-1, null, -1.0, [null]];
$tests['-1.0 <=> [false]'] = [-1, null, -1.0, [false]];
$tests['-1.0 <=> [true]'] = [-1, null, -1.0, [true]];
$tests['-1.0 <=> [\'\']'] = [-1, null, -1.0, ['']];
$tests['-1.0 <=> [a, b, c]'] = [-1, null, -1.0, ['a','b','c']];
$tests['-1.0 <=> [$fh1]'] = [-1, null, -1.0, [$fh1]];
$tests['-1.0 <=> [foo => bar]'] = [-1, null, -1.0, ['foo' => 'bar']];
$tests['-1.0 <=> object[]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], -1.0, (object) []];
$tests['-1.0 <=> object[[]]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], -1.0, (object) [[]]];
$tests['-1.0 <=> object[1 => []]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], -1.0, (object) [1 => []]];
$tests['-1.0 <=> object[1 => null]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], -1.0, (object) [1 => null]];
$tests['-1.0 <=> object[0]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], -1.0, (object) [0]];
$tests['-1.0 <=> object[0.0]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], -1.0, (object) [0.0]];
$tests['-1.0 <=> object[null]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], -1.0, (object) [null]];
$tests['-1.0 <=> object[false]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], -1.0, (object) [false]];
$tests['-1.0 <=> object[true]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], -1.0, (object) [true]];
$tests['-1.0 <=> object[\'\']'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], -1.0, (object) ['']];
$tests['-1.0 <=> object[a, b, c]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], -1.0, (object) ['a','b','c']];
$tests['-1.0 <=> object[$fh1]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], -1.0, (object) [$fh1]];
$tests['-1.0 <=> object[foo => bar]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], -1.0, (object) ['foo' => 'bar']];
$tests['1.0 <=> false'] = [1, null, 1.0, false];
$tests['1.0 <=> true'] = [0, null, 1.0, true];
$tests['1.0 <=> null'] = [1, null, 1.0, null];
$tests['1.0 <=> 0'] = [1, null, 1.0, 0];
$tests['1.0 <=> 1'] = [0, null, 1.0, 1];
$tests['1.0 <=> -1'] = [1, null, 1.0, -1];
$tests['1.0 <=> 0.0'] = [1, null, 1.0, 0.0];
$tests['1.0 <=> -1.0'] = [1, null, 1.0, -1.0];
$tests['1.0 <=> 1.0'] = [0, null, 1.0, 1.0];
$tests['1.0 <=> \'\''] = [1, null, 1.0, ''];
$tests['1.0 <=> \'0\''] = [1, null, 1.0, '0'];
$tests['1.0 <=> \'-0\''] = [1, null, 1.0, '-0'];
$tests['1.0 <=> \'+0\''] = [1, null, 1.0, '+0'];
$tests['1.0 <=> \'0.0\''] = [1, null, 1.0, '0.0'];
$tests['1.0 <=> \'-0.0\''] = [1, null, 1.0, '-0.0'];
$tests['1.0 <=> \'+0.0\''] = [1, null, 1.0, '+0.0'];
$tests['1.0 <=> \'1.0\''] = [0, null, 1.0, '1.0'];
$tests['1.0 <=> \'-1.0\''] = [1, null, 1.0, '-1.0'];
$tests['1.0 <=> \'+1.0\''] = [0, null, 1.0, '+1.0'];
$tests['1.0 <=> \'-1\''] = [1, null, 1.0, '-1'];
$tests['1.0 <=> \'+1\''] = [0, null, 1.0, '+1'];
$tests['1.0 <=> \'1\''] = [0, null, 1.0, '1'];
$tests['1.0 <=> \' 0\''] = [1, null, 1.0, ' 0'];
$tests['1.0 <=> \' -0\''] = [1, null, 1.0, ' -0'];
$tests['1.0 <=> \' +0\''] = [1, null, 1.0, ' +0'];
$tests['1.0 <=> \' 0\' '] = [1, null, 1.0, ' 0 '];
$tests['1.0 <=> \' -0\''] = [1, null, 1.0, ' -0 '];
$tests['1.0 <=> \' +0\''] = [1, null, 1.0, ' +0 '];
$tests['1.0 <=> \'0\' '] = [1, null, 1.0, '0 '];
$tests['1.0 <=> \'-0\''] = [1, null, 1.0, '-0 '];
$tests['1.0 <=> \'+0\''] = [1, null, 1.0, '+0 '];
$tests['1.0 <=> \' 0.0\''] = [1, null, 1.0, ' 0.0'];
$tests['1.0 <=> \' -0.0\''] = [1, null, 1.0, ' -0.0'];
$tests['1.0 <=> \' +0.0\''] = [1, null, 1.0, ' +0.0'];
$tests['1.0 <=> \' 0.0\' '] = [1, null, 1.0, ' 0.0 '];
$tests['1.0 <=> \' -0.0\''] = [1, null, 1.0, ' -0.0 '];
$tests['1.0 <=> \' +0.0\''] = [1, null, 1.0, ' +0.0 '];
$tests['1.0 <=> \'0.0\' '] = [1, null, 1.0, '0.0 '];
$tests['1.0 <=> \'-0.0\''] = [1, null, 1.0, '-0.0 '];
$tests['1.0 <=> \'+0.0\''] = [1, null, 1.0, '+0.0 '];
$tests['1.0 <=> \'03\''] = [-1, null, 1.0, '03'];
$tests['1.0 <=> \'2abc\''] = [-1, null, 1.0, '2abc'];
$tests['1.0 <=> \'2.5abc\''] = [-1, null, 1.0, '2.5abc'];
$tests['1.0 <=> \'abc2abc\''] = [-1, null, 1.0, 'abc2abc'];
$tests['1.0 <=> \'abc2.5abc\''] = [-1, null, 1.0, 'abc2.5abc'];
$tests['1.0 <=> \'\\0\''] = [1, null, 1.0, hex2bin('00')];
$tests['1.0 <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [-1, null, 1.0, hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['1.0 <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [1, null, 1.0, hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['1.0 <=> 12.0000000000001'] = [-1, null, 1.0, 12.0000000000001];
$tests['1.0 <=> 12.000000000000002'] = [-1, null, 1.0, 12.000000000000002];
$tests['1.0 <=> pi'] = [-1, null, 1.0, M_PI];
$tests['1.0 <=> int(max)'] = [-1, null, 1.0, PHP_INT_MAX];
$tests['1.0 <=> int(min)'] = [1, null, 1.0, PHP_INT_MIN];
$tests['1.0 <=> float(epsilon)'] = [1, null, 1.0, PHP_FLOAT_EPSILON];
$tests['1.0 <=> float(min)'] = [1, null, 1.0, PHP_FLOAT_MIN];
$tests['1.0 <=> float(max)'] = [-1, null, 1.0, PHP_FLOAT_MAX];
$tests['1.0 <=> float(inf)'] = [-1, null, 1.0, INF];
$tests['1.0 <=> float(-inf)'] = [1, null, 1.0, -INF];
$tests['1.0 <=> float(nan)'] = [1, null, 1.0, NAN];
$tests['1.0 <=> $closure1'] = [0, ['type' => 8,'message' => 'Object of class Closure could not be converted to float'], 1.0, $closure1];
$tests['1.0 <=> $closure2'] = [0, ['type' => 8,'message' => 'Object of class Closure could not be converted to float'], 1.0, $closure2];
$tests['1.0 <=> $fh1'] = [-1, null, 1.0, $fh1];
$tests['1.0 <=> $fh2'] = [-1, null, 1.0, $fh2];
$tests['1.0 <=> $proc'] = [-1, null, 1.0, $proc];
$tests['1.0 <=> DateTime(2024-01-01T12:00:00Z)'] = [0, ['type' => 8,'message' => 'Object of class DateTime could not be converted to float'], 1.0, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['1.0 <=> DateTime(2024-01-01T12:00:01Z)'] = [0, ['type' => 8,'message' => 'Object of class DateTime could not be converted to float'], 1.0, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['1.0 <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [0, ['type' => 8,'message' => 'Object of class DateTimeImmutable could not be converted to float'], 1.0, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['1.0 <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [0, ['type' => 8,'message' => 'Object of class DateTimeImmutable could not be converted to float'], 1.0, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['1.0 <=> []'] = [-1, null, 1.0, []];
$tests['1.0 <=> [[]]'] = [-1, null, 1.0, [[]]];
$tests['1.0 <=> [1 => []]'] = [-1, null, 1.0, [1 => []]];
$tests['1.0 <=> [1 => null]'] = [-1, null, 1.0, [1 => null]];
$tests['1.0 <=> [0]'] = [-1, null, 1.0, [0]];
$tests['1.0 <=> [0.0]'] = [-1, null, 1.0, [0.0]];
$tests['1.0 <=> [null]'] = [-1, null, 1.0, [null]];
$tests['1.0 <=> [false]'] = [-1, null, 1.0, [false]];
$tests['1.0 <=> [true]'] = [-1, null, 1.0, [true]];
$tests['1.0 <=> [\'\']'] = [-1, null, 1.0, ['']];
$tests['1.0 <=> [a, b, c]'] = [-1, null, 1.0, ['a','b','c']];
$tests['1.0 <=> [$fh1]'] = [-1, null, 1.0, [$fh1]];
$tests['1.0 <=> [foo => bar]'] = [-1, null, 1.0, ['foo' => 'bar']];
$tests['1.0 <=> object[]'] = [0, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], 1.0, (object) []];
$tests['1.0 <=> object[[]]'] = [0, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], 1.0, (object) [[]]];
$tests['1.0 <=> object[1 => []]'] = [0, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], 1.0, (object) [1 => []]];
$tests['1.0 <=> object[1 => null]'] = [0, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], 1.0, (object) [1 => null]];
$tests['1.0 <=> object[0]'] = [0, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], 1.0, (object) [0]];
$tests['1.0 <=> object[0.0]'] = [0, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], 1.0, (object) [0.0]];
$tests['1.0 <=> object[null]'] = [0, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], 1.0, (object) [null]];
$tests['1.0 <=> object[false]'] = [0, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], 1.0, (object) [false]];
$tests['1.0 <=> object[true]'] = [0, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], 1.0, (object) [true]];
$tests['1.0 <=> object[\'\']'] = [0, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], 1.0, (object) ['']];
$tests['1.0 <=> object[a, b, c]'] = [0, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], 1.0, (object) ['a','b','c']];
$tests['1.0 <=> object[$fh1]'] = [0, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], 1.0, (object) [$fh1]];
$tests['1.0 <=> object[foo => bar]'] = [0, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], 1.0, (object) ['foo' => 'bar']];
$tests['\'\' <=> false'] = [0, null, '', false];
$tests['\'\' <=> true'] = [-1, null, '', true];
$tests['\'\' <=> null'] = [0, null, '', null];
$tests['\'\' <=> 0'] = [-1, null, '', 0];
$tests['\'\' <=> 1'] = [-1, null, '', 1];
$tests['\'\' <=> -1'] = [-1, null, '', -1];
$tests['\'\' <=> 0.0'] = [-1, null, '', 0.0];
$tests['\'\' <=> -1.0'] = [-1, null, '', -1.0];
$tests['\'\' <=> 1.0'] = [-1, null, '', 1.0];
$tests['\'\' <=> \'\''] = [0, null, '', ''];
$tests['\'\' <=> \'0\''] = [-1, null, '', '0'];
$tests['\'\' <=> \'-0\''] = [-1, null, '', '-0'];
$tests['\'\' <=> \'+0\''] = [-1, null, '', '+0'];
$tests['\'\' <=> \'0.0\''] = [-1, null, '', '0.0'];
$tests['\'\' <=> \'-0.0\''] = [-1, null, '', '-0.0'];
$tests['\'\' <=> \'+0.0\''] = [-1, null, '', '+0.0'];
$tests['\'\' <=> \'1.0\''] = [-1, null, '', '1.0'];
$tests['\'\' <=> \'-1.0\''] = [-1, null, '', '-1.0'];
$tests['\'\' <=> \'+1.0\''] = [-1, null, '', '+1.0'];
$tests['\'\' <=> \'-1\''] = [-1, null, '', '-1'];
$tests['\'\' <=> \'+1\''] = [-1, null, '', '+1'];
$tests['\'\' <=> \'1\''] = [-1, null, '', '1'];
$tests['\'\' <=> \' 0\''] = [-1, null, '', ' 0'];
$tests['\'\' <=> \' -0\''] = [-1, null, '', ' -0'];
$tests['\'\' <=> \' +0\''] = [-1, null, '', ' +0'];
$tests['\'\' <=> \' 0\' '] = [-1, null, '', ' 0 '];
$tests['\'\' <=> \' -0\''] = [-1, null, '', ' -0 '];
$tests['\'\' <=> \' +0\''] = [-1, null, '', ' +0 '];
$tests['\'\' <=> \'0\' '] = [-1, null, '', '0 '];
$tests['\'\' <=> \'-0\''] = [-1, null, '', '-0 '];
$tests['\'\' <=> \'+0\''] = [-1, null, '', '+0 '];
$tests['\'\' <=> \' 0.0\''] = [-1, null, '', ' 0.0'];
$tests['\'\' <=> \' -0.0\''] = [-1, null, '', ' -0.0'];
$tests['\'\' <=> \' +0.0\''] = [-1, null, '', ' +0.0'];
$tests['\'\' <=> \' 0.0\' '] = [-1, null, '', ' 0.0 '];
$tests['\'\' <=> \' -0.0\''] = [-1, null, '', ' -0.0 '];
$tests['\'\' <=> \' +0.0\''] = [-1, null, '', ' +0.0 '];
$tests['\'\' <=> \'0.0\' '] = [-1, null, '', '0.0 '];
$tests['\'\' <=> \'-0.0\''] = [-1, null, '', '-0.0 '];
$tests['\'\' <=> \'+0.0\''] = [-1, null, '', '+0.0 '];
$tests['\'\' <=> \'03\''] = [-1, null, '', '03'];
$tests['\'\' <=> \'2abc\''] = [-1, null, '', '2abc'];
$tests['\'\' <=> \'2.5abc\''] = [-1, null, '', '2.5abc'];
$tests['\'\' <=> \'abc2abc\''] = [-1, null, '', 'abc2abc'];
$tests['\'\' <=> \'abc2.5abc\''] = [-1, null, '', 'abc2.5abc'];
$tests['\'\' <=> \'\\0\''] = [-1, null, '', hex2bin('00')];
$tests['\'\' <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [-1, null, '', hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['\'\' <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [-1, null, '', hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['\'\' <=> 12.0000000000001'] = [-1, null, '', 12.0000000000001];
$tests['\'\' <=> 12.000000000000002'] = [-1, null, '', 12.000000000000002];
$tests['\'\' <=> pi'] = [-1, null, '', M_PI];
$tests['\'\' <=> int(max)'] = [-1, null, '', PHP_INT_MAX];
$tests['\'\' <=> int(min)'] = [-1, null, '', PHP_INT_MIN];
$tests['\'\' <=> float(epsilon)'] = [-1, null, '', PHP_FLOAT_EPSILON];
$tests['\'\' <=> float(min)'] = [-1, null, '', PHP_FLOAT_MIN];
$tests['\'\' <=> float(max)'] = [-1, null, '', PHP_FLOAT_MAX];
$tests['\'\' <=> float(inf)'] = [-1, null, '', INF];
$tests['\'\' <=> float(-inf)'] = [-1, null, '', -INF];
$tests['\'\' <=> float(nan)'] = [1, null, '', NAN];
$tests['\'\' <=> $closure1'] = [-1, null, '', $closure1];
$tests['\'\' <=> $closure2'] = [-1, null, '', $closure2];
$tests['\'\' <=> $fh1'] = [-1, null, '', $fh1];
$tests['\'\' <=> $fh2'] = [-1, null, '', $fh2];
$tests['\'\' <=> $proc'] = [-1, null, '', $proc];
$tests['\'\' <=> DateTime(2024-01-01T12:00:00Z)'] = [-1, null, '', unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'\' <=> DateTime(2024-01-01T12:00:01Z)'] = [-1, null, '', unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'\' <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [-1, null, '', unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'\' <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [-1, null, '', unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'\' <=> []'] = [-1, null, '', []];
$tests['\'\' <=> [[]]'] = [-1, null, '', [[]]];
$tests['\'\' <=> [1 => []]'] = [-1, null, '', [1 => []]];
$tests['\'\' <=> [1 => null]'] = [-1, null, '', [1 => null]];
$tests['\'\' <=> [0]'] = [-1, null, '', [0]];
$tests['\'\' <=> [0.0]'] = [-1, null, '', [0.0]];
$tests['\'\' <=> [null]'] = [-1, null, '', [null]];
$tests['\'\' <=> [false]'] = [-1, null, '', [false]];
$tests['\'\' <=> [true]'] = [-1, null, '', [true]];
$tests['\'\' <=> [\'\']'] = [-1, null, '', ['']];
$tests['\'\' <=> [a, b, c]'] = [-1, null, '', ['a','b','c']];
$tests['\'\' <=> [$fh1]'] = [-1, null, '', [$fh1]];
$tests['\'\' <=> [foo => bar]'] = [-1, null, '', ['foo' => 'bar']];
$tests['\'\' <=> object[]'] = [-1, null, '', (object) []];
$tests['\'\' <=> object[[]]'] = [-1, null, '', (object) [[]]];
$tests['\'\' <=> object[1 => []]'] = [-1, null, '', (object) [1 => []]];
$tests['\'\' <=> object[1 => null]'] = [-1, null, '', (object) [1 => null]];
$tests['\'\' <=> object[0]'] = [-1, null, '', (object) [0]];
$tests['\'\' <=> object[0.0]'] = [-1, null, '', (object) [0.0]];
$tests['\'\' <=> object[null]'] = [-1, null, '', (object) [null]];
$tests['\'\' <=> object[false]'] = [-1, null, '', (object) [false]];
$tests['\'\' <=> object[true]'] = [-1, null, '', (object) [true]];
$tests['\'\' <=> object[\'\']'] = [-1, null, '', (object) ['']];
$tests['\'\' <=> object[a, b, c]'] = [-1, null, '', (object) ['a','b','c']];
$tests['\'\' <=> object[$fh1]'] = [-1, null, '', (object) [$fh1]];
$tests['\'\' <=> object[foo => bar]'] = [-1, null, '', (object) ['foo' => 'bar']];
$tests['\'0\' <=> false'] = [0, null, '0', false];
$tests['\'0\' <=> true'] = [-1, null, '0', true];
$tests['\'0\' <=> null'] = [1, null, '0', null];
$tests['\'0\' <=> 0'] = [0, null, '0', 0];
$tests['\'0\' <=> 1'] = [-1, null, '0', 1];
$tests['\'0\' <=> -1'] = [1, null, '0', -1];
$tests['\'0\' <=> 0.0'] = [0, null, '0', 0.0];
$tests['\'0\' <=> -1.0'] = [1, null, '0', -1.0];
$tests['\'0\' <=> 1.0'] = [-1, null, '0', 1.0];
$tests['\'0\' <=> \'\''] = [1, null, '0', ''];
$tests['\'0\' <=> \'0\''] = [0, null, '0', '0'];
$tests['\'0\' <=> \'-0\''] = [0, null, '0', '-0'];
$tests['\'0\' <=> \'+0\''] = [0, null, '0', '+0'];
$tests['\'0\' <=> \'0.0\''] = [0, null, '0', '0.0'];
$tests['\'0\' <=> \'-0.0\''] = [0, null, '0', '-0.0'];
$tests['\'0\' <=> \'+0.0\''] = [0, null, '0', '+0.0'];
$tests['\'0\' <=> \'1.0\''] = [-1, null, '0', '1.0'];
$tests['\'0\' <=> \'-1.0\''] = [1, null, '0', '-1.0'];
$tests['\'0\' <=> \'+1.0\''] = [-1, null, '0', '+1.0'];
$tests['\'0\' <=> \'-1\''] = [1, null, '0', '-1'];
$tests['\'0\' <=> \'+1\''] = [-1, null, '0', '+1'];
$tests['\'0\' <=> \'1\''] = [-1, null, '0', '1'];
$tests['\'0\' <=> \' 0\''] = [0, null, '0', ' 0'];
$tests['\'0\' <=> \' -0\''] = [0, null, '0', ' -0'];
$tests['\'0\' <=> \' +0\''] = [0, null, '0', ' +0'];
$tests['\'0\' <=> \' 0\' '] = [0, null, '0', ' 0 '];
$tests['\'0\' <=> \' -0\''] = [0, null, '0', ' -0 '];
$tests['\'0\' <=> \' +0\''] = [0, null, '0', ' +0 '];
$tests['\'0\' <=> \'0\' '] = [0, null, '0', '0 '];
$tests['\'0\' <=> \'-0\''] = [0, null, '0', '-0 '];
$tests['\'0\' <=> \'+0\''] = [0, null, '0', '+0 '];
$tests['\'0\' <=> \' 0.0\''] = [0, null, '0', ' 0.0'];
$tests['\'0\' <=> \' -0.0\''] = [0, null, '0', ' -0.0'];
$tests['\'0\' <=> \' +0.0\''] = [0, null, '0', ' +0.0'];
$tests['\'0\' <=> \' 0.0\' '] = [0, null, '0', ' 0.0 '];
$tests['\'0\' <=> \' -0.0\''] = [0, null, '0', ' -0.0 '];
$tests['\'0\' <=> \' +0.0\''] = [0, null, '0', ' +0.0 '];
$tests['\'0\' <=> \'0.0\' '] = [0, null, '0', '0.0 '];
$tests['\'0\' <=> \'-0.0\''] = [0, null, '0', '-0.0 '];
$tests['\'0\' <=> \'+0.0\''] = [0, null, '0', '+0.0 '];
$tests['\'0\' <=> \'03\''] = [-1, null, '0', '03'];
$tests['\'0\' <=> \'2abc\''] = [-1, null, '0', '2abc'];
$tests['\'0\' <=> \'2.5abc\''] = [-1, null, '0', '2.5abc'];
$tests['\'0\' <=> \'abc2abc\''] = [-1, null, '0', 'abc2abc'];
$tests['\'0\' <=> \'abc2.5abc\''] = [-1, null, '0', 'abc2.5abc'];
$tests['\'0\' <=> \'\\0\''] = [1, null, '0', hex2bin('00')];
$tests['\'0\' <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [-1, null, '0', hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['\'0\' <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [1, null, '0', hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['\'0\' <=> 12.0000000000001'] = [-1, null, '0', 12.0000000000001];
$tests['\'0\' <=> 12.000000000000002'] = [-1, null, '0', 12.000000000000002];
$tests['\'0\' <=> pi'] = [-1, null, '0', M_PI];
$tests['\'0\' <=> int(max)'] = [-1, null, '0', PHP_INT_MAX];
$tests['\'0\' <=> int(min)'] = [1, null, '0', PHP_INT_MIN];
$tests['\'0\' <=> float(epsilon)'] = [-1, null, '0', PHP_FLOAT_EPSILON];
$tests['\'0\' <=> float(min)'] = [-1, null, '0', PHP_FLOAT_MIN];
$tests['\'0\' <=> float(max)'] = [-1, null, '0', PHP_FLOAT_MAX];
$tests['\'0\' <=> float(inf)'] = [-1, null, '0', INF];
$tests['\'0\' <=> float(-inf)'] = [1, null, '0', -INF];
$tests['\'0\' <=> float(nan)'] = [1, null, '0', NAN];
$tests['\'0\' <=> $closure1'] = [-1, null, '0', $closure1];
$tests['\'0\' <=> $closure2'] = [-1, null, '0', $closure2];
$tests['\'0\' <=> $fh1'] = [-1, null, '0', $fh1];
$tests['\'0\' <=> $fh2'] = [-1, null, '0', $fh2];
$tests['\'0\' <=> $proc'] = [-1, null, '0', $proc];
$tests['\'0\' <=> DateTime(2024-01-01T12:00:00Z)'] = [-1, null, '0', unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'0\' <=> DateTime(2024-01-01T12:00:01Z)'] = [-1, null, '0', unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'0\' <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [-1, null, '0', unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'0\' <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [-1, null, '0', unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'0\' <=> []'] = [-1, null, '0', []];
$tests['\'0\' <=> [[]]'] = [-1, null, '0', [[]]];
$tests['\'0\' <=> [1 => []]'] = [-1, null, '0', [1 => []]];
$tests['\'0\' <=> [1 => null]'] = [-1, null, '0', [1 => null]];
$tests['\'0\' <=> [0]'] = [-1, null, '0', [0]];
$tests['\'0\' <=> [0.0]'] = [-1, null, '0', [0.0]];
$tests['\'0\' <=> [null]'] = [-1, null, '0', [null]];
$tests['\'0\' <=> [false]'] = [-1, null, '0', [false]];
$tests['\'0\' <=> [true]'] = [-1, null, '0', [true]];
$tests['\'0\' <=> [\'\']'] = [-1, null, '0', ['']];
$tests['\'0\' <=> [a, b, c]'] = [-1, null, '0', ['a','b','c']];
$tests['\'0\' <=> [$fh1]'] = [-1, null, '0', [$fh1]];
$tests['\'0\' <=> [foo => bar]'] = [-1, null, '0', ['foo' => 'bar']];
$tests['\'0\' <=> object[]'] = [-1, null, '0', (object) []];
$tests['\'0\' <=> object[[]]'] = [-1, null, '0', (object) [[]]];
$tests['\'0\' <=> object[1 => []]'] = [-1, null, '0', (object) [1 => []]];
$tests['\'0\' <=> object[1 => null]'] = [-1, null, '0', (object) [1 => null]];
$tests['\'0\' <=> object[0]'] = [-1, null, '0', (object) [0]];
$tests['\'0\' <=> object[0.0]'] = [-1, null, '0', (object) [0.0]];
$tests['\'0\' <=> object[null]'] = [-1, null, '0', (object) [null]];
$tests['\'0\' <=> object[false]'] = [-1, null, '0', (object) [false]];
$tests['\'0\' <=> object[true]'] = [-1, null, '0', (object) [true]];
$tests['\'0\' <=> object[\'\']'] = [-1, null, '0', (object) ['']];
$tests['\'0\' <=> object[a, b, c]'] = [-1, null, '0', (object) ['a','b','c']];
$tests['\'0\' <=> object[$fh1]'] = [-1, null, '0', (object) [$fh1]];
$tests['\'0\' <=> object[foo => bar]'] = [-1, null, '0', (object) ['foo' => 'bar']];
$tests['\'-0\' <=> false'] = [1, null, '-0', false];
$tests['\'-0\' <=> true'] = [0, null, '-0', true];
$tests['\'-0\' <=> null'] = [1, null, '-0', null];
$tests['\'-0\' <=> 0'] = [0, null, '-0', 0];
$tests['\'-0\' <=> 1'] = [-1, null, '-0', 1];
$tests['\'-0\' <=> -1'] = [1, null, '-0', -1];
$tests['\'-0\' <=> 0.0'] = [0, null, '-0', 0.0];
$tests['\'-0\' <=> -1.0'] = [1, null, '-0', -1.0];
$tests['\'-0\' <=> 1.0'] = [-1, null, '-0', 1.0];
$tests['\'-0\' <=> \'\''] = [1, null, '-0', ''];
$tests['\'-0\' <=> \'0\''] = [0, null, '-0', '0'];
$tests['\'-0\' <=> \'-0\''] = [0, null, '-0', '-0'];
$tests['\'-0\' <=> \'+0\''] = [0, null, '-0', '+0'];
$tests['\'-0\' <=> \'0.0\''] = [0, null, '-0', '0.0'];
$tests['\'-0\' <=> \'-0.0\''] = [0, null, '-0', '-0.0'];
$tests['\'-0\' <=> \'+0.0\''] = [0, null, '-0', '+0.0'];
$tests['\'-0\' <=> \'1.0\''] = [-1, null, '-0', '1.0'];
$tests['\'-0\' <=> \'-1.0\''] = [1, null, '-0', '-1.0'];
$tests['\'-0\' <=> \'+1.0\''] = [-1, null, '-0', '+1.0'];
$tests['\'-0\' <=> \'-1\''] = [1, null, '-0', '-1'];
$tests['\'-0\' <=> \'+1\''] = [-1, null, '-0', '+1'];
$tests['\'-0\' <=> \'1\''] = [-1, null, '-0', '1'];
$tests['\'-0\' <=> \' 0\''] = [0, null, '-0', ' 0'];
$tests['\'-0\' <=> \' -0\''] = [0, null, '-0', ' -0'];
$tests['\'-0\' <=> \' +0\''] = [0, null, '-0', ' +0'];
$tests['\'-0\' <=> \' 0\' '] = [0, null, '-0', ' 0 '];
$tests['\'-0\' <=> \' -0\''] = [0, null, '-0', ' -0 '];
$tests['\'-0\' <=> \' +0\''] = [0, null, '-0', ' +0 '];
$tests['\'-0\' <=> \'0\' '] = [0, null, '-0', '0 '];
$tests['\'-0\' <=> \'-0\''] = [0, null, '-0', '-0 '];
$tests['\'-0\' <=> \'+0\''] = [0, null, '-0', '+0 '];
$tests['\'-0\' <=> \' 0.0\''] = [0, null, '-0', ' 0.0'];
$tests['\'-0\' <=> \' -0.0\''] = [0, null, '-0', ' -0.0'];
$tests['\'-0\' <=> \' +0.0\''] = [0, null, '-0', ' +0.0'];
$tests['\'-0\' <=> \' 0.0\' '] = [0, null, '-0', ' 0.0 '];
$tests['\'-0\' <=> \' -0.0\''] = [0, null, '-0', ' -0.0 '];
$tests['\'-0\' <=> \' +0.0\''] = [0, null, '-0', ' +0.0 '];
$tests['\'-0\' <=> \'0.0\' '] = [0, null, '-0', '0.0 '];
$tests['\'-0\' <=> \'-0.0\''] = [0, null, '-0', '-0.0 '];
$tests['\'-0\' <=> \'+0.0\''] = [0, null, '-0', '+0.0 '];
$tests['\'-0\' <=> \'03\''] = [-1, null, '-0', '03'];
$tests['\'-0\' <=> \'2abc\''] = [-1, null, '-0', '2abc'];
$tests['\'-0\' <=> \'2.5abc\''] = [-1, null, '-0', '2.5abc'];
$tests['\'-0\' <=> \'abc2abc\''] = [-1, null, '-0', 'abc2abc'];
$tests['\'-0\' <=> \'abc2.5abc\''] = [-1, null, '-0', 'abc2.5abc'];
$tests['\'-0\' <=> \'\\0\''] = [1, null, '-0', hex2bin('00')];
$tests['\'-0\' <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [-1, null, '-0', hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['\'-0\' <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [1, null, '-0', hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['\'-0\' <=> 12.0000000000001'] = [-1, null, '-0', 12.0000000000001];
$tests['\'-0\' <=> 12.000000000000002'] = [-1, null, '-0', 12.000000000000002];
$tests['\'-0\' <=> pi'] = [-1, null, '-0', M_PI];
$tests['\'-0\' <=> int(max)'] = [-1, null, '-0', PHP_INT_MAX];
$tests['\'-0\' <=> int(min)'] = [1, null, '-0', PHP_INT_MIN];
$tests['\'-0\' <=> float(epsilon)'] = [-1, null, '-0', PHP_FLOAT_EPSILON];
$tests['\'-0\' <=> float(min)'] = [-1, null, '-0', PHP_FLOAT_MIN];
$tests['\'-0\' <=> float(max)'] = [-1, null, '-0', PHP_FLOAT_MAX];
$tests['\'-0\' <=> float(inf)'] = [-1, null, '-0', INF];
$tests['\'-0\' <=> float(-inf)'] = [1, null, '-0', -INF];
$tests['\'-0\' <=> float(nan)'] = [1, null, '-0', NAN];
$tests['\'-0\' <=> $closure1'] = [-1, null, '-0', $closure1];
$tests['\'-0\' <=> $closure2'] = [-1, null, '-0', $closure2];
$tests['\'-0\' <=> $fh1'] = [-1, null, '-0', $fh1];
$tests['\'-0\' <=> $fh2'] = [-1, null, '-0', $fh2];
$tests['\'-0\' <=> $proc'] = [-1, null, '-0', $proc];
$tests['\'-0\' <=> DateTime(2024-01-01T12:00:00Z)'] = [-1, null, '-0', unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'-0\' <=> DateTime(2024-01-01T12:00:01Z)'] = [-1, null, '-0', unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'-0\' <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [-1, null, '-0', unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'-0\' <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [-1, null, '-0', unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'-0\' <=> []'] = [-1, null, '-0', []];
$tests['\'-0\' <=> [[]]'] = [-1, null, '-0', [[]]];
$tests['\'-0\' <=> [1 => []]'] = [-1, null, '-0', [1 => []]];
$tests['\'-0\' <=> [1 => null]'] = [-1, null, '-0', [1 => null]];
$tests['\'-0\' <=> [0]'] = [-1, null, '-0', [0]];
$tests['\'-0\' <=> [0.0]'] = [-1, null, '-0', [0.0]];
$tests['\'-0\' <=> [null]'] = [-1, null, '-0', [null]];
$tests['\'-0\' <=> [false]'] = [-1, null, '-0', [false]];
$tests['\'-0\' <=> [true]'] = [-1, null, '-0', [true]];
$tests['\'-0\' <=> [\'\']'] = [-1, null, '-0', ['']];
$tests['\'-0\' <=> [a, b, c]'] = [-1, null, '-0', ['a','b','c']];
$tests['\'-0\' <=> [$fh1]'] = [-1, null, '-0', [$fh1]];
$tests['\'-0\' <=> [foo => bar]'] = [-1, null, '-0', ['foo' => 'bar']];
$tests['\'-0\' <=> object[]'] = [-1, null, '-0', (object) []];
$tests['\'-0\' <=> object[[]]'] = [-1, null, '-0', (object) [[]]];
$tests['\'-0\' <=> object[1 => []]'] = [-1, null, '-0', (object) [1 => []]];
$tests['\'-0\' <=> object[1 => null]'] = [-1, null, '-0', (object) [1 => null]];
$tests['\'-0\' <=> object[0]'] = [-1, null, '-0', (object) [0]];
$tests['\'-0\' <=> object[0.0]'] = [-1, null, '-0', (object) [0.0]];
$tests['\'-0\' <=> object[null]'] = [-1, null, '-0', (object) [null]];
$tests['\'-0\' <=> object[false]'] = [-1, null, '-0', (object) [false]];
$tests['\'-0\' <=> object[true]'] = [-1, null, '-0', (object) [true]];
$tests['\'-0\' <=> object[\'\']'] = [-1, null, '-0', (object) ['']];
$tests['\'-0\' <=> object[a, b, c]'] = [-1, null, '-0', (object) ['a','b','c']];
$tests['\'-0\' <=> object[$fh1]'] = [-1, null, '-0', (object) [$fh1]];
$tests['\'-0\' <=> object[foo => bar]'] = [-1, null, '-0', (object) ['foo' => 'bar']];
$tests['\'+0\' <=> false'] = [1, null, '+0', false];
$tests['\'+0\' <=> true'] = [0, null, '+0', true];
$tests['\'+0\' <=> null'] = [1, null, '+0', null];
$tests['\'+0\' <=> 0'] = [0, null, '+0', 0];
$tests['\'+0\' <=> 1'] = [-1, null, '+0', 1];
$tests['\'+0\' <=> -1'] = [1, null, '+0', -1];
$tests['\'+0\' <=> 0.0'] = [0, null, '+0', 0.0];
$tests['\'+0\' <=> -1.0'] = [1, null, '+0', -1.0];
$tests['\'+0\' <=> 1.0'] = [-1, null, '+0', 1.0];
$tests['\'+0\' <=> \'\''] = [1, null, '+0', ''];
$tests['\'+0\' <=> \'0\''] = [0, null, '+0', '0'];
$tests['\'+0\' <=> \'-0\''] = [0, null, '+0', '-0'];
$tests['\'+0\' <=> \'+0\''] = [0, null, '+0', '+0'];
$tests['\'+0\' <=> \'0.0\''] = [0, null, '+0', '0.0'];
$tests['\'+0\' <=> \'-0.0\''] = [0, null, '+0', '-0.0'];
$tests['\'+0\' <=> \'+0.0\''] = [0, null, '+0', '+0.0'];
$tests['\'+0\' <=> \'1.0\''] = [-1, null, '+0', '1.0'];
$tests['\'+0\' <=> \'-1.0\''] = [1, null, '+0', '-1.0'];
$tests['\'+0\' <=> \'+1.0\''] = [-1, null, '+0', '+1.0'];
$tests['\'+0\' <=> \'-1\''] = [1, null, '+0', '-1'];
$tests['\'+0\' <=> \'+1\''] = [-1, null, '+0', '+1'];
$tests['\'+0\' <=> \'1\''] = [-1, null, '+0', '1'];
$tests['\'+0\' <=> \' 0\''] = [0, null, '+0', ' 0'];
$tests['\'+0\' <=> \' -0\''] = [0, null, '+0', ' -0'];
$tests['\'+0\' <=> \' +0\''] = [0, null, '+0', ' +0'];
$tests['\'+0\' <=> \' 0\' '] = [0, null, '+0', ' 0 '];
$tests['\'+0\' <=> \' -0\''] = [0, null, '+0', ' -0 '];
$tests['\'+0\' <=> \' +0\''] = [0, null, '+0', ' +0 '];
$tests['\'+0\' <=> \'0\' '] = [0, null, '+0', '0 '];
$tests['\'+0\' <=> \'-0\''] = [0, null, '+0', '-0 '];
$tests['\'+0\' <=> \'+0\''] = [0, null, '+0', '+0 '];
$tests['\'+0\' <=> \' 0.0\''] = [0, null, '+0', ' 0.0'];
$tests['\'+0\' <=> \' -0.0\''] = [0, null, '+0', ' -0.0'];
$tests['\'+0\' <=> \' +0.0\''] = [0, null, '+0', ' +0.0'];
$tests['\'+0\' <=> \' 0.0\' '] = [0, null, '+0', ' 0.0 '];
$tests['\'+0\' <=> \' -0.0\''] = [0, null, '+0', ' -0.0 '];
$tests['\'+0\' <=> \' +0.0\''] = [0, null, '+0', ' +0.0 '];
$tests['\'+0\' <=> \'0.0\' '] = [0, null, '+0', '0.0 '];
$tests['\'+0\' <=> \'-0.0\''] = [0, null, '+0', '-0.0 '];
$tests['\'+0\' <=> \'+0.0\''] = [0, null, '+0', '+0.0 '];
$tests['\'+0\' <=> \'03\''] = [-1, null, '+0', '03'];
$tests['\'+0\' <=> \'2abc\''] = [-1, null, '+0', '2abc'];
$tests['\'+0\' <=> \'2.5abc\''] = [-1, null, '+0', '2.5abc'];
$tests['\'+0\' <=> \'abc2abc\''] = [-1, null, '+0', 'abc2abc'];
$tests['\'+0\' <=> \'abc2.5abc\''] = [-1, null, '+0', 'abc2.5abc'];
$tests['\'+0\' <=> \'\\0\''] = [1, null, '+0', hex2bin('00')];
$tests['\'+0\' <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [-1, null, '+0', hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['\'+0\' <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [1, null, '+0', hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['\'+0\' <=> 12.0000000000001'] = [-1, null, '+0', 12.0000000000001];
$tests['\'+0\' <=> 12.000000000000002'] = [-1, null, '+0', 12.000000000000002];
$tests['\'+0\' <=> pi'] = [-1, null, '+0', M_PI];
$tests['\'+0\' <=> int(max)'] = [-1, null, '+0', PHP_INT_MAX];
$tests['\'+0\' <=> int(min)'] = [1, null, '+0', PHP_INT_MIN];
$tests['\'+0\' <=> float(epsilon)'] = [-1, null, '+0', PHP_FLOAT_EPSILON];
$tests['\'+0\' <=> float(min)'] = [-1, null, '+0', PHP_FLOAT_MIN];
$tests['\'+0\' <=> float(max)'] = [-1, null, '+0', PHP_FLOAT_MAX];
$tests['\'+0\' <=> float(inf)'] = [-1, null, '+0', INF];
$tests['\'+0\' <=> float(-inf)'] = [1, null, '+0', -INF];
$tests['\'+0\' <=> float(nan)'] = [1, null, '+0', NAN];
$tests['\'+0\' <=> $closure1'] = [-1, null, '+0', $closure1];
$tests['\'+0\' <=> $closure2'] = [-1, null, '+0', $closure2];
$tests['\'+0\' <=> $fh1'] = [-1, null, '+0', $fh1];
$tests['\'+0\' <=> $fh2'] = [-1, null, '+0', $fh2];
$tests['\'+0\' <=> $proc'] = [-1, null, '+0', $proc];
$tests['\'+0\' <=> DateTime(2024-01-01T12:00:00Z)'] = [-1, null, '+0', unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'+0\' <=> DateTime(2024-01-01T12:00:01Z)'] = [-1, null, '+0', unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'+0\' <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [-1, null, '+0', unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'+0\' <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [-1, null, '+0', unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'+0\' <=> []'] = [-1, null, '+0', []];
$tests['\'+0\' <=> [[]]'] = [-1, null, '+0', [[]]];
$tests['\'+0\' <=> [1 => []]'] = [-1, null, '+0', [1 => []]];
$tests['\'+0\' <=> [1 => null]'] = [-1, null, '+0', [1 => null]];
$tests['\'+0\' <=> [0]'] = [-1, null, '+0', [0]];
$tests['\'+0\' <=> [0.0]'] = [-1, null, '+0', [0.0]];
$tests['\'+0\' <=> [null]'] = [-1, null, '+0', [null]];
$tests['\'+0\' <=> [false]'] = [-1, null, '+0', [false]];
$tests['\'+0\' <=> [true]'] = [-1, null, '+0', [true]];
$tests['\'+0\' <=> [\'\']'] = [-1, null, '+0', ['']];
$tests['\'+0\' <=> [a, b, c]'] = [-1, null, '+0', ['a','b','c']];
$tests['\'+0\' <=> [$fh1]'] = [-1, null, '+0', [$fh1]];
$tests['\'+0\' <=> [foo => bar]'] = [-1, null, '+0', ['foo' => 'bar']];
$tests['\'+0\' <=> object[]'] = [-1, null, '+0', (object) []];
$tests['\'+0\' <=> object[[]]'] = [-1, null, '+0', (object) [[]]];
$tests['\'+0\' <=> object[1 => []]'] = [-1, null, '+0', (object) [1 => []]];
$tests['\'+0\' <=> object[1 => null]'] = [-1, null, '+0', (object) [1 => null]];
$tests['\'+0\' <=> object[0]'] = [-1, null, '+0', (object) [0]];
$tests['\'+0\' <=> object[0.0]'] = [-1, null, '+0', (object) [0.0]];
$tests['\'+0\' <=> object[null]'] = [-1, null, '+0', (object) [null]];
$tests['\'+0\' <=> object[false]'] = [-1, null, '+0', (object) [false]];
$tests['\'+0\' <=> object[true]'] = [-1, null, '+0', (object) [true]];
$tests['\'+0\' <=> object[\'\']'] = [-1, null, '+0', (object) ['']];
$tests['\'+0\' <=> object[a, b, c]'] = [-1, null, '+0', (object) ['a','b','c']];
$tests['\'+0\' <=> object[$fh1]'] = [-1, null, '+0', (object) [$fh1]];
$tests['\'+0\' <=> object[foo => bar]'] = [-1, null, '+0', (object) ['foo' => 'bar']];
$tests['\'0.0\' <=> false'] = [1, null, '0.0', false];
$tests['\'0.0\' <=> true'] = [0, null, '0.0', true];
$tests['\'0.0\' <=> null'] = [1, null, '0.0', null];
$tests['\'0.0\' <=> 0'] = [0, null, '0.0', 0];
$tests['\'0.0\' <=> 1'] = [-1, null, '0.0', 1];
$tests['\'0.0\' <=> -1'] = [1, null, '0.0', -1];
$tests['\'0.0\' <=> 0.0'] = [0, null, '0.0', 0.0];
$tests['\'0.0\' <=> -1.0'] = [1, null, '0.0', -1.0];
$tests['\'0.0\' <=> 1.0'] = [-1, null, '0.0', 1.0];
$tests['\'0.0\' <=> \'\''] = [1, null, '0.0', ''];
$tests['\'0.0\' <=> \'0\''] = [0, null, '0.0', '0'];
$tests['\'0.0\' <=> \'-0\''] = [0, null, '0.0', '-0'];
$tests['\'0.0\' <=> \'+0\''] = [0, null, '0.0', '+0'];
$tests['\'0.0\' <=> \'0.0\''] = [0, null, '0.0', '0.0'];
$tests['\'0.0\' <=> \'-0.0\''] = [0, null, '0.0', '-0.0'];
$tests['\'0.0\' <=> \'+0.0\''] = [0, null, '0.0', '+0.0'];
$tests['\'0.0\' <=> \'1.0\''] = [-1, null, '0.0', '1.0'];
$tests['\'0.0\' <=> \'-1.0\''] = [1, null, '0.0', '-1.0'];
$tests['\'0.0\' <=> \'+1.0\''] = [-1, null, '0.0', '+1.0'];
$tests['\'0.0\' <=> \'-1\''] = [1, null, '0.0', '-1'];
$tests['\'0.0\' <=> \'+1\''] = [-1, null, '0.0', '+1'];
$tests['\'0.0\' <=> \'1\''] = [-1, null, '0.0', '1'];
$tests['\'0.0\' <=> \' 0\''] = [0, null, '0.0', ' 0'];
$tests['\'0.0\' <=> \' -0\''] = [0, null, '0.0', ' -0'];
$tests['\'0.0\' <=> \' +0\''] = [0, null, '0.0', ' +0'];
$tests['\'0.0\' <=> \' 0\' '] = [0, null, '0.0', ' 0 '];
$tests['\'0.0\' <=> \' -0\''] = [0, null, '0.0', ' -0 '];
$tests['\'0.0\' <=> \' +0\''] = [0, null, '0.0', ' +0 '];
$tests['\'0.0\' <=> \'0\' '] = [0, null, '0.0', '0 '];
$tests['\'0.0\' <=> \'-0\''] = [0, null, '0.0', '-0 '];
$tests['\'0.0\' <=> \'+0\''] = [0, null, '0.0', '+0 '];
$tests['\'0.0\' <=> \' 0.0\''] = [0, null, '0.0', ' 0.0'];
$tests['\'0.0\' <=> \' -0.0\''] = [0, null, '0.0', ' -0.0'];
$tests['\'0.0\' <=> \' +0.0\''] = [0, null, '0.0', ' +0.0'];
$tests['\'0.0\' <=> \' 0.0\' '] = [0, null, '0.0', ' 0.0 '];
$tests['\'0.0\' <=> \' -0.0\''] = [0, null, '0.0', ' -0.0 '];
$tests['\'0.0\' <=> \' +0.0\''] = [0, null, '0.0', ' +0.0 '];
$tests['\'0.0\' <=> \'0.0\' '] = [0, null, '0.0', '0.0 '];
$tests['\'0.0\' <=> \'-0.0\''] = [0, null, '0.0', '-0.0 '];
$tests['\'0.0\' <=> \'+0.0\''] = [0, null, '0.0', '+0.0 '];
$tests['\'0.0\' <=> \'03\''] = [-1, null, '0.0', '03'];
$tests['\'0.0\' <=> \'2abc\''] = [-1, null, '0.0', '2abc'];
$tests['\'0.0\' <=> \'2.5abc\''] = [-1, null, '0.0', '2.5abc'];
$tests['\'0.0\' <=> \'abc2abc\''] = [-1, null, '0.0', 'abc2abc'];
$tests['\'0.0\' <=> \'abc2.5abc\''] = [-1, null, '0.0', 'abc2.5abc'];
$tests['\'0.0\' <=> \'\\0\''] = [1, null, '0.0', hex2bin('00')];
$tests['\'0.0\' <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [-1, null, '0.0', hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['\'0.0\' <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [1, null, '0.0', hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['\'0.0\' <=> 12.0000000000001'] = [-1, null, '0.0', 12.0000000000001];
$tests['\'0.0\' <=> 12.000000000000002'] = [-1, null, '0.0', 12.000000000000002];
$tests['\'0.0\' <=> pi'] = [-1, null, '0.0', M_PI];
$tests['\'0.0\' <=> int(max)'] = [-1, null, '0.0', PHP_INT_MAX];
$tests['\'0.0\' <=> int(min)'] = [1, null, '0.0', PHP_INT_MIN];
$tests['\'0.0\' <=> float(epsilon)'] = [-1, null, '0.0', PHP_FLOAT_EPSILON];
$tests['\'0.0\' <=> float(min)'] = [-1, null, '0.0', PHP_FLOAT_MIN];
$tests['\'0.0\' <=> float(max)'] = [-1, null, '0.0', PHP_FLOAT_MAX];
$tests['\'0.0\' <=> float(inf)'] = [-1, null, '0.0', INF];
$tests['\'0.0\' <=> float(-inf)'] = [1, null, '0.0', -INF];
$tests['\'0.0\' <=> float(nan)'] = [1, null, '0.0', NAN];
$tests['\'0.0\' <=> $closure1'] = [-1, null, '0.0', $closure1];
$tests['\'0.0\' <=> $closure2'] = [-1, null, '0.0', $closure2];
$tests['\'0.0\' <=> $fh1'] = [-1, null, '0.0', $fh1];
$tests['\'0.0\' <=> $fh2'] = [-1, null, '0.0', $fh2];
$tests['\'0.0\' <=> $proc'] = [-1, null, '0.0', $proc];
$tests['\'0.0\' <=> DateTime(2024-01-01T12:00:00Z)'] = [-1, null, '0.0', unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'0.0\' <=> DateTime(2024-01-01T12:00:01Z)'] = [-1, null, '0.0', unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'0.0\' <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [-1, null, '0.0', unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'0.0\' <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [-1, null, '0.0', unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'0.0\' <=> []'] = [-1, null, '0.0', []];
$tests['\'0.0\' <=> [[]]'] = [-1, null, '0.0', [[]]];
$tests['\'0.0\' <=> [1 => []]'] = [-1, null, '0.0', [1 => []]];
$tests['\'0.0\' <=> [1 => null]'] = [-1, null, '0.0', [1 => null]];
$tests['\'0.0\' <=> [0]'] = [-1, null, '0.0', [0]];
$tests['\'0.0\' <=> [0.0]'] = [-1, null, '0.0', [0.0]];
$tests['\'0.0\' <=> [null]'] = [-1, null, '0.0', [null]];
$tests['\'0.0\' <=> [false]'] = [-1, null, '0.0', [false]];
$tests['\'0.0\' <=> [true]'] = [-1, null, '0.0', [true]];
$tests['\'0.0\' <=> [\'\']'] = [-1, null, '0.0', ['']];
$tests['\'0.0\' <=> [a, b, c]'] = [-1, null, '0.0', ['a','b','c']];
$tests['\'0.0\' <=> [$fh1]'] = [-1, null, '0.0', [$fh1]];
$tests['\'0.0\' <=> [foo => bar]'] = [-1, null, '0.0', ['foo' => 'bar']];
$tests['\'0.0\' <=> object[]'] = [-1, null, '0.0', (object) []];
$tests['\'0.0\' <=> object[[]]'] = [-1, null, '0.0', (object) [[]]];
$tests['\'0.0\' <=> object[1 => []]'] = [-1, null, '0.0', (object) [1 => []]];
$tests['\'0.0\' <=> object[1 => null]'] = [-1, null, '0.0', (object) [1 => null]];
$tests['\'0.0\' <=> object[0]'] = [-1, null, '0.0', (object) [0]];
$tests['\'0.0\' <=> object[0.0]'] = [-1, null, '0.0', (object) [0.0]];
$tests['\'0.0\' <=> object[null]'] = [-1, null, '0.0', (object) [null]];
$tests['\'0.0\' <=> object[false]'] = [-1, null, '0.0', (object) [false]];
$tests['\'0.0\' <=> object[true]'] = [-1, null, '0.0', (object) [true]];
$tests['\'0.0\' <=> object[\'\']'] = [-1, null, '0.0', (object) ['']];
$tests['\'0.0\' <=> object[a, b, c]'] = [-1, null, '0.0', (object) ['a','b','c']];
$tests['\'0.0\' <=> object[$fh1]'] = [-1, null, '0.0', (object) [$fh1]];
$tests['\'0.0\' <=> object[foo => bar]'] = [-1, null, '0.0', (object) ['foo' => 'bar']];
$tests['\'-0.0\' <=> false'] = [1, null, '-0.0', false];
$tests['\'-0.0\' <=> true'] = [0, null, '-0.0', true];
$tests['\'-0.0\' <=> null'] = [1, null, '-0.0', null];
$tests['\'-0.0\' <=> 0'] = [0, null, '-0.0', 0];
$tests['\'-0.0\' <=> 1'] = [-1, null, '-0.0', 1];
$tests['\'-0.0\' <=> -1'] = [1, null, '-0.0', -1];
$tests['\'-0.0\' <=> 0.0'] = [0, null, '-0.0', 0.0];
$tests['\'-0.0\' <=> -1.0'] = [1, null, '-0.0', -1.0];
$tests['\'-0.0\' <=> 1.0'] = [-1, null, '-0.0', 1.0];
$tests['\'-0.0\' <=> \'\''] = [1, null, '-0.0', ''];
$tests['\'-0.0\' <=> \'0\''] = [0, null, '-0.0', '0'];
$tests['\'-0.0\' <=> \'-0\''] = [0, null, '-0.0', '-0'];
$tests['\'-0.0\' <=> \'+0\''] = [0, null, '-0.0', '+0'];
$tests['\'-0.0\' <=> \'0.0\''] = [0, null, '-0.0', '0.0'];
$tests['\'-0.0\' <=> \'-0.0\''] = [0, null, '-0.0', '-0.0'];
$tests['\'-0.0\' <=> \'+0.0\''] = [0, null, '-0.0', '+0.0'];
$tests['\'-0.0\' <=> \'1.0\''] = [-1, null, '-0.0', '1.0'];
$tests['\'-0.0\' <=> \'-1.0\''] = [1, null, '-0.0', '-1.0'];
$tests['\'-0.0\' <=> \'+1.0\''] = [-1, null, '-0.0', '+1.0'];
$tests['\'-0.0\' <=> \'-1\''] = [1, null, '-0.0', '-1'];
$tests['\'-0.0\' <=> \'+1\''] = [-1, null, '-0.0', '+1'];
$tests['\'-0.0\' <=> \'1\''] = [-1, null, '-0.0', '1'];
$tests['\'-0.0\' <=> \' 0\''] = [0, null, '-0.0', ' 0'];
$tests['\'-0.0\' <=> \' -0\''] = [0, null, '-0.0', ' -0'];
$tests['\'-0.0\' <=> \' +0\''] = [0, null, '-0.0', ' +0'];
$tests['\'-0.0\' <=> \' 0\' '] = [0, null, '-0.0', ' 0 '];
$tests['\'-0.0\' <=> \' -0\''] = [0, null, '-0.0', ' -0 '];
$tests['\'-0.0\' <=> \' +0\''] = [0, null, '-0.0', ' +0 '];
$tests['\'-0.0\' <=> \'0\' '] = [0, null, '-0.0', '0 '];
$tests['\'-0.0\' <=> \'-0\''] = [0, null, '-0.0', '-0 '];
$tests['\'-0.0\' <=> \'+0\''] = [0, null, '-0.0', '+0 '];
$tests['\'-0.0\' <=> \' 0.0\''] = [0, null, '-0.0', ' 0.0'];
$tests['\'-0.0\' <=> \' -0.0\''] = [0, null, '-0.0', ' -0.0'];
$tests['\'-0.0\' <=> \' +0.0\''] = [0, null, '-0.0', ' +0.0'];
$tests['\'-0.0\' <=> \' 0.0\' '] = [0, null, '-0.0', ' 0.0 '];
$tests['\'-0.0\' <=> \' -0.0\''] = [0, null, '-0.0', ' -0.0 '];
$tests['\'-0.0\' <=> \' +0.0\''] = [0, null, '-0.0', ' +0.0 '];
$tests['\'-0.0\' <=> \'0.0\' '] = [0, null, '-0.0', '0.0 '];
$tests['\'-0.0\' <=> \'-0.0\''] = [0, null, '-0.0', '-0.0 '];
$tests['\'-0.0\' <=> \'+0.0\''] = [0, null, '-0.0', '+0.0 '];
$tests['\'-0.0\' <=> \'03\''] = [-1, null, '-0.0', '03'];
$tests['\'-0.0\' <=> \'2abc\''] = [-1, null, '-0.0', '2abc'];
$tests['\'-0.0\' <=> \'2.5abc\''] = [-1, null, '-0.0', '2.5abc'];
$tests['\'-0.0\' <=> \'abc2abc\''] = [-1, null, '-0.0', 'abc2abc'];
$tests['\'-0.0\' <=> \'abc2.5abc\''] = [-1, null, '-0.0', 'abc2.5abc'];
$tests['\'-0.0\' <=> \'\\0\''] = [1, null, '-0.0', hex2bin('00')];
$tests['\'-0.0\' <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [-1, null, '-0.0', hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['\'-0.0\' <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [1, null, '-0.0', hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['\'-0.0\' <=> 12.0000000000001'] = [-1, null, '-0.0', 12.0000000000001];
$tests['\'-0.0\' <=> 12.000000000000002'] = [-1, null, '-0.0', 12.000000000000002];
$tests['\'-0.0\' <=> pi'] = [-1, null, '-0.0', M_PI];
$tests['\'-0.0\' <=> int(max)'] = [-1, null, '-0.0', PHP_INT_MAX];
$tests['\'-0.0\' <=> int(min)'] = [1, null, '-0.0', PHP_INT_MIN];
$tests['\'-0.0\' <=> float(epsilon)'] = [-1, null, '-0.0', PHP_FLOAT_EPSILON];
$tests['\'-0.0\' <=> float(min)'] = [-1, null, '-0.0', PHP_FLOAT_MIN];
$tests['\'-0.0\' <=> float(max)'] = [-1, null, '-0.0', PHP_FLOAT_MAX];
$tests['\'-0.0\' <=> float(inf)'] = [-1, null, '-0.0', INF];
$tests['\'-0.0\' <=> float(-inf)'] = [1, null, '-0.0', -INF];
$tests['\'-0.0\' <=> float(nan)'] = [1, null, '-0.0', NAN];
$tests['\'-0.0\' <=> $closure1'] = [-1, null, '-0.0', $closure1];
$tests['\'-0.0\' <=> $closure2'] = [-1, null, '-0.0', $closure2];
$tests['\'-0.0\' <=> $fh1'] = [-1, null, '-0.0', $fh1];
$tests['\'-0.0\' <=> $fh2'] = [-1, null, '-0.0', $fh2];
$tests['\'-0.0\' <=> $proc'] = [-1, null, '-0.0', $proc];
$tests['\'-0.0\' <=> DateTime(2024-01-01T12:00:00Z)'] = [-1, null, '-0.0', unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'-0.0\' <=> DateTime(2024-01-01T12:00:01Z)'] = [-1, null, '-0.0', unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'-0.0\' <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [-1, null, '-0.0', unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'-0.0\' <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [-1, null, '-0.0', unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'-0.0\' <=> []'] = [-1, null, '-0.0', []];
$tests['\'-0.0\' <=> [[]]'] = [-1, null, '-0.0', [[]]];
$tests['\'-0.0\' <=> [1 => []]'] = [-1, null, '-0.0', [1 => []]];
$tests['\'-0.0\' <=> [1 => null]'] = [-1, null, '-0.0', [1 => null]];
$tests['\'-0.0\' <=> [0]'] = [-1, null, '-0.0', [0]];
$tests['\'-0.0\' <=> [0.0]'] = [-1, null, '-0.0', [0.0]];
$tests['\'-0.0\' <=> [null]'] = [-1, null, '-0.0', [null]];
$tests['\'-0.0\' <=> [false]'] = [-1, null, '-0.0', [false]];
$tests['\'-0.0\' <=> [true]'] = [-1, null, '-0.0', [true]];
$tests['\'-0.0\' <=> [\'\']'] = [-1, null, '-0.0', ['']];
$tests['\'-0.0\' <=> [a, b, c]'] = [-1, null, '-0.0', ['a','b','c']];
$tests['\'-0.0\' <=> [$fh1]'] = [-1, null, '-0.0', [$fh1]];
$tests['\'-0.0\' <=> [foo => bar]'] = [-1, null, '-0.0', ['foo' => 'bar']];
$tests['\'-0.0\' <=> object[]'] = [-1, null, '-0.0', (object) []];
$tests['\'-0.0\' <=> object[[]]'] = [-1, null, '-0.0', (object) [[]]];
$tests['\'-0.0\' <=> object[1 => []]'] = [-1, null, '-0.0', (object) [1 => []]];
$tests['\'-0.0\' <=> object[1 => null]'] = [-1, null, '-0.0', (object) [1 => null]];
$tests['\'-0.0\' <=> object[0]'] = [-1, null, '-0.0', (object) [0]];
$tests['\'-0.0\' <=> object[0.0]'] = [-1, null, '-0.0', (object) [0.0]];
$tests['\'-0.0\' <=> object[null]'] = [-1, null, '-0.0', (object) [null]];
$tests['\'-0.0\' <=> object[false]'] = [-1, null, '-0.0', (object) [false]];
$tests['\'-0.0\' <=> object[true]'] = [-1, null, '-0.0', (object) [true]];
$tests['\'-0.0\' <=> object[\'\']'] = [-1, null, '-0.0', (object) ['']];
$tests['\'-0.0\' <=> object[a, b, c]'] = [-1, null, '-0.0', (object) ['a','b','c']];
$tests['\'-0.0\' <=> object[$fh1]'] = [-1, null, '-0.0', (object) [$fh1]];
$tests['\'-0.0\' <=> object[foo => bar]'] = [-1, null, '-0.0', (object) ['foo' => 'bar']];
$tests['\'+0.0\' <=> false'] = [1, null, '+0.0', false];
$tests['\'+0.0\' <=> true'] = [0, null, '+0.0', true];
$tests['\'+0.0\' <=> null'] = [1, null, '+0.0', null];
$tests['\'+0.0\' <=> 0'] = [0, null, '+0.0', 0];
$tests['\'+0.0\' <=> 1'] = [-1, null, '+0.0', 1];
$tests['\'+0.0\' <=> -1'] = [1, null, '+0.0', -1];
$tests['\'+0.0\' <=> 0.0'] = [0, null, '+0.0', 0.0];
$tests['\'+0.0\' <=> -1.0'] = [1, null, '+0.0', -1.0];
$tests['\'+0.0\' <=> 1.0'] = [-1, null, '+0.0', 1.0];
$tests['\'+0.0\' <=> \'\''] = [1, null, '+0.0', ''];
$tests['\'+0.0\' <=> \'0\''] = [0, null, '+0.0', '0'];
$tests['\'+0.0\' <=> \'-0\''] = [0, null, '+0.0', '-0'];
$tests['\'+0.0\' <=> \'+0\''] = [0, null, '+0.0', '+0'];
$tests['\'+0.0\' <=> \'0.0\''] = [0, null, '+0.0', '0.0'];
$tests['\'+0.0\' <=> \'-0.0\''] = [0, null, '+0.0', '-0.0'];
$tests['\'+0.0\' <=> \'+0.0\''] = [0, null, '+0.0', '+0.0'];
$tests['\'+0.0\' <=> \'1.0\''] = [-1, null, '+0.0', '1.0'];
$tests['\'+0.0\' <=> \'-1.0\''] = [1, null, '+0.0', '-1.0'];
$tests['\'+0.0\' <=> \'+1.0\''] = [-1, null, '+0.0', '+1.0'];
$tests['\'+0.0\' <=> \'-1\''] = [1, null, '+0.0', '-1'];
$tests['\'+0.0\' <=> \'+1\''] = [-1, null, '+0.0', '+1'];
$tests['\'+0.0\' <=> \'1\''] = [-1, null, '+0.0', '1'];
$tests['\'+0.0\' <=> \' 0\''] = [0, null, '+0.0', ' 0'];
$tests['\'+0.0\' <=> \' -0\''] = [0, null, '+0.0', ' -0'];
$tests['\'+0.0\' <=> \' +0\''] = [0, null, '+0.0', ' +0'];
$tests['\'+0.0\' <=> \' 0\' '] = [0, null, '+0.0', ' 0 '];
$tests['\'+0.0\' <=> \' -0\''] = [0, null, '+0.0', ' -0 '];
$tests['\'+0.0\' <=> \' +0\''] = [0, null, '+0.0', ' +0 '];
$tests['\'+0.0\' <=> \'0\' '] = [0, null, '+0.0', '0 '];
$tests['\'+0.0\' <=> \'-0\''] = [0, null, '+0.0', '-0 '];
$tests['\'+0.0\' <=> \'+0\''] = [0, null, '+0.0', '+0 '];
$tests['\'+0.0\' <=> \' 0.0\''] = [0, null, '+0.0', ' 0.0'];
$tests['\'+0.0\' <=> \' -0.0\''] = [0, null, '+0.0', ' -0.0'];
$tests['\'+0.0\' <=> \' +0.0\''] = [0, null, '+0.0', ' +0.0'];
$tests['\'+0.0\' <=> \' 0.0\' '] = [0, null, '+0.0', ' 0.0 '];
$tests['\'+0.0\' <=> \' -0.0\''] = [0, null, '+0.0', ' -0.0 '];
$tests['\'+0.0\' <=> \' +0.0\''] = [0, null, '+0.0', ' +0.0 '];
$tests['\'+0.0\' <=> \'0.0\' '] = [0, null, '+0.0', '0.0 '];
$tests['\'+0.0\' <=> \'-0.0\''] = [0, null, '+0.0', '-0.0 '];
$tests['\'+0.0\' <=> \'+0.0\''] = [0, null, '+0.0', '+0.0 '];
$tests['\'+0.0\' <=> \'03\''] = [-1, null, '+0.0', '03'];
$tests['\'+0.0\' <=> \'2abc\''] = [-1, null, '+0.0', '2abc'];
$tests['\'+0.0\' <=> \'2.5abc\''] = [-1, null, '+0.0', '2.5abc'];
$tests['\'+0.0\' <=> \'abc2abc\''] = [-1, null, '+0.0', 'abc2abc'];
$tests['\'+0.0\' <=> \'abc2.5abc\''] = [-1, null, '+0.0', 'abc2.5abc'];
$tests['\'+0.0\' <=> \'\\0\''] = [1, null, '+0.0', hex2bin('00')];
$tests['\'+0.0\' <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [-1, null, '+0.0', hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['\'+0.0\' <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [1, null, '+0.0', hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['\'+0.0\' <=> 12.0000000000001'] = [-1, null, '+0.0', 12.0000000000001];
$tests['\'+0.0\' <=> 12.000000000000002'] = [-1, null, '+0.0', 12.000000000000002];
$tests['\'+0.0\' <=> pi'] = [-1, null, '+0.0', M_PI];
$tests['\'+0.0\' <=> int(max)'] = [-1, null, '+0.0', PHP_INT_MAX];
$tests['\'+0.0\' <=> int(min)'] = [1, null, '+0.0', PHP_INT_MIN];
$tests['\'+0.0\' <=> float(epsilon)'] = [-1, null, '+0.0', PHP_FLOAT_EPSILON];
$tests['\'+0.0\' <=> float(min)'] = [-1, null, '+0.0', PHP_FLOAT_MIN];
$tests['\'+0.0\' <=> float(max)'] = [-1, null, '+0.0', PHP_FLOAT_MAX];
$tests['\'+0.0\' <=> float(inf)'] = [-1, null, '+0.0', INF];
$tests['\'+0.0\' <=> float(-inf)'] = [1, null, '+0.0', -INF];
$tests['\'+0.0\' <=> float(nan)'] = [1, null, '+0.0', NAN];
$tests['\'+0.0\' <=> $closure1'] = [-1, null, '+0.0', $closure1];
$tests['\'+0.0\' <=> $closure2'] = [-1, null, '+0.0', $closure2];
$tests['\'+0.0\' <=> $fh1'] = [-1, null, '+0.0', $fh1];
$tests['\'+0.0\' <=> $fh2'] = [-1, null, '+0.0', $fh2];
$tests['\'+0.0\' <=> $proc'] = [-1, null, '+0.0', $proc];
$tests['\'+0.0\' <=> DateTime(2024-01-01T12:00:00Z)'] = [-1, null, '+0.0', unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'+0.0\' <=> DateTime(2024-01-01T12:00:01Z)'] = [-1, null, '+0.0', unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'+0.0\' <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [-1, null, '+0.0', unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'+0.0\' <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [-1, null, '+0.0', unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'+0.0\' <=> []'] = [-1, null, '+0.0', []];
$tests['\'+0.0\' <=> [[]]'] = [-1, null, '+0.0', [[]]];
$tests['\'+0.0\' <=> [1 => []]'] = [-1, null, '+0.0', [1 => []]];
$tests['\'+0.0\' <=> [1 => null]'] = [-1, null, '+0.0', [1 => null]];
$tests['\'+0.0\' <=> [0]'] = [-1, null, '+0.0', [0]];
$tests['\'+0.0\' <=> [0.0]'] = [-1, null, '+0.0', [0.0]];
$tests['\'+0.0\' <=> [null]'] = [-1, null, '+0.0', [null]];
$tests['\'+0.0\' <=> [false]'] = [-1, null, '+0.0', [false]];
$tests['\'+0.0\' <=> [true]'] = [-1, null, '+0.0', [true]];
$tests['\'+0.0\' <=> [\'\']'] = [-1, null, '+0.0', ['']];
$tests['\'+0.0\' <=> [a, b, c]'] = [-1, null, '+0.0', ['a','b','c']];
$tests['\'+0.0\' <=> [$fh1]'] = [-1, null, '+0.0', [$fh1]];
$tests['\'+0.0\' <=> [foo => bar]'] = [-1, null, '+0.0', ['foo' => 'bar']];
$tests['\'+0.0\' <=> object[]'] = [-1, null, '+0.0', (object) []];
$tests['\'+0.0\' <=> object[[]]'] = [-1, null, '+0.0', (object) [[]]];
$tests['\'+0.0\' <=> object[1 => []]'] = [-1, null, '+0.0', (object) [1 => []]];
$tests['\'+0.0\' <=> object[1 => null]'] = [-1, null, '+0.0', (object) [1 => null]];
$tests['\'+0.0\' <=> object[0]'] = [-1, null, '+0.0', (object) [0]];
$tests['\'+0.0\' <=> object[0.0]'] = [-1, null, '+0.0', (object) [0.0]];
$tests['\'+0.0\' <=> object[null]'] = [-1, null, '+0.0', (object) [null]];
$tests['\'+0.0\' <=> object[false]'] = [-1, null, '+0.0', (object) [false]];
$tests['\'+0.0\' <=> object[true]'] = [-1, null, '+0.0', (object) [true]];
$tests['\'+0.0\' <=> object[\'\']'] = [-1, null, '+0.0', (object) ['']];
$tests['\'+0.0\' <=> object[a, b, c]'] = [-1, null, '+0.0', (object) ['a','b','c']];
$tests['\'+0.0\' <=> object[$fh1]'] = [-1, null, '+0.0', (object) [$fh1]];
$tests['\'+0.0\' <=> object[foo => bar]'] = [-1, null, '+0.0', (object) ['foo' => 'bar']];
$tests['\'1.0\' <=> false'] = [1, null, '1.0', false];
$tests['\'1.0\' <=> true'] = [0, null, '1.0', true];
$tests['\'1.0\' <=> null'] = [1, null, '1.0', null];
$tests['\'1.0\' <=> 0'] = [1, null, '1.0', 0];
$tests['\'1.0\' <=> 1'] = [0, null, '1.0', 1];
$tests['\'1.0\' <=> -1'] = [1, null, '1.0', -1];
$tests['\'1.0\' <=> 0.0'] = [1, null, '1.0', 0.0];
$tests['\'1.0\' <=> -1.0'] = [1, null, '1.0', -1.0];
$tests['\'1.0\' <=> 1.0'] = [0, null, '1.0', 1.0];
$tests['\'1.0\' <=> \'\''] = [1, null, '1.0', ''];
$tests['\'1.0\' <=> \'0\''] = [1, null, '1.0', '0'];
$tests['\'1.0\' <=> \'-0\''] = [1, null, '1.0', '-0'];
$tests['\'1.0\' <=> \'+0\''] = [1, null, '1.0', '+0'];
$tests['\'1.0\' <=> \'0.0\''] = [1, null, '1.0', '0.0'];
$tests['\'1.0\' <=> \'-0.0\''] = [1, null, '1.0', '-0.0'];
$tests['\'1.0\' <=> \'+0.0\''] = [1, null, '1.0', '+0.0'];
$tests['\'1.0\' <=> \'1.0\''] = [0, null, '1.0', '1.0'];
$tests['\'1.0\' <=> \'-1.0\''] = [1, null, '1.0', '-1.0'];
$tests['\'1.0\' <=> \'+1.0\''] = [0, null, '1.0', '+1.0'];
$tests['\'1.0\' <=> \'-1\''] = [1, null, '1.0', '-1'];
$tests['\'1.0\' <=> \'+1\''] = [0, null, '1.0', '+1'];
$tests['\'1.0\' <=> \'1\''] = [0, null, '1.0', '1'];
$tests['\'1.0\' <=> \' 0\''] = [1, null, '1.0', ' 0'];
$tests['\'1.0\' <=> \' -0\''] = [1, null, '1.0', ' -0'];
$tests['\'1.0\' <=> \' +0\''] = [1, null, '1.0', ' +0'];
$tests['\'1.0\' <=> \' 0\' '] = [1, null, '1.0', ' 0 '];
$tests['\'1.0\' <=> \' -0\''] = [1, null, '1.0', ' -0 '];
$tests['\'1.0\' <=> \' +0\''] = [1, null, '1.0', ' +0 '];
$tests['\'1.0\' <=> \'0\' '] = [1, null, '1.0', '0 '];
$tests['\'1.0\' <=> \'-0\''] = [1, null, '1.0', '-0 '];
$tests['\'1.0\' <=> \'+0\''] = [1, null, '1.0', '+0 '];
$tests['\'1.0\' <=> \' 0.0\''] = [1, null, '1.0', ' 0.0'];
$tests['\'1.0\' <=> \' -0.0\''] = [1, null, '1.0', ' -0.0'];
$tests['\'1.0\' <=> \' +0.0\''] = [1, null, '1.0', ' +0.0'];
$tests['\'1.0\' <=> \' 0.0\' '] = [1, null, '1.0', ' 0.0 '];
$tests['\'1.0\' <=> \' -0.0\''] = [1, null, '1.0', ' -0.0 '];
$tests['\'1.0\' <=> \' +0.0\''] = [1, null, '1.0', ' +0.0 '];
$tests['\'1.0\' <=> \'0.0\' '] = [1, null, '1.0', '0.0 '];
$tests['\'1.0\' <=> \'-0.0\''] = [1, null, '1.0', '-0.0 '];
$tests['\'1.0\' <=> \'+0.0\''] = [1, null, '1.0', '+0.0 '];
$tests['\'1.0\' <=> \'03\''] = [-1, null, '1.0', '03'];
$tests['\'1.0\' <=> \'2abc\''] = [-1, null, '1.0', '2abc'];
$tests['\'1.0\' <=> \'2.5abc\''] = [-1, null, '1.0', '2.5abc'];
$tests['\'1.0\' <=> \'abc2abc\''] = [-1, null, '1.0', 'abc2abc'];
$tests['\'1.0\' <=> \'abc2.5abc\''] = [-1, null, '1.0', 'abc2.5abc'];
$tests['\'1.0\' <=> \'\\0\''] = [1, null, '1.0', hex2bin('00')];
$tests['\'1.0\' <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [-1, null, '1.0', hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['\'1.0\' <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [1, null, '1.0', hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['\'1.0\' <=> 12.0000000000001'] = [-1, null, '1.0', 12.0000000000001];
$tests['\'1.0\' <=> 12.000000000000002'] = [-1, null, '1.0', 12.000000000000002];
$tests['\'1.0\' <=> pi'] = [-1, null, '1.0', M_PI];
$tests['\'1.0\' <=> int(max)'] = [-1, null, '1.0', PHP_INT_MAX];
$tests['\'1.0\' <=> int(min)'] = [1, null, '1.0', PHP_INT_MIN];
$tests['\'1.0\' <=> float(epsilon)'] = [1, null, '1.0', PHP_FLOAT_EPSILON];
$tests['\'1.0\' <=> float(min)'] = [1, null, '1.0', PHP_FLOAT_MIN];
$tests['\'1.0\' <=> float(max)'] = [-1, null, '1.0', PHP_FLOAT_MAX];
$tests['\'1.0\' <=> float(inf)'] = [-1, null, '1.0', INF];
$tests['\'1.0\' <=> float(-inf)'] = [1, null, '1.0', -INF];
$tests['\'1.0\' <=> float(nan)'] = [1, null, '1.0', NAN];
$tests['\'1.0\' <=> $closure1'] = [-1, null, '1.0', $closure1];
$tests['\'1.0\' <=> $closure2'] = [-1, null, '1.0', $closure2];
$tests['\'1.0\' <=> $fh1'] = [-1, null, '1.0', $fh1];
$tests['\'1.0\' <=> $fh2'] = [-1, null, '1.0', $fh2];
$tests['\'1.0\' <=> $proc'] = [-1, null, '1.0', $proc];
$tests['\'1.0\' <=> DateTime(2024-01-01T12:00:00Z)'] = [-1, null, '1.0', unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'1.0\' <=> DateTime(2024-01-01T12:00:01Z)'] = [-1, null, '1.0', unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'1.0\' <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [-1, null, '1.0', unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'1.0\' <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [-1, null, '1.0', unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'1.0\' <=> []'] = [-1, null, '1.0', []];
$tests['\'1.0\' <=> [[]]'] = [-1, null, '1.0', [[]]];
$tests['\'1.0\' <=> [1 => []]'] = [-1, null, '1.0', [1 => []]];
$tests['\'1.0\' <=> [1 => null]'] = [-1, null, '1.0', [1 => null]];
$tests['\'1.0\' <=> [0]'] = [-1, null, '1.0', [0]];
$tests['\'1.0\' <=> [0.0]'] = [-1, null, '1.0', [0.0]];
$tests['\'1.0\' <=> [null]'] = [-1, null, '1.0', [null]];
$tests['\'1.0\' <=> [false]'] = [-1, null, '1.0', [false]];
$tests['\'1.0\' <=> [true]'] = [-1, null, '1.0', [true]];
$tests['\'1.0\' <=> [\'\']'] = [-1, null, '1.0', ['']];
$tests['\'1.0\' <=> [a, b, c]'] = [-1, null, '1.0', ['a','b','c']];
$tests['\'1.0\' <=> [$fh1]'] = [-1, null, '1.0', [$fh1]];
$tests['\'1.0\' <=> [foo => bar]'] = [-1, null, '1.0', ['foo' => 'bar']];
$tests['\'1.0\' <=> object[]'] = [-1, null, '1.0', (object) []];
$tests['\'1.0\' <=> object[[]]'] = [-1, null, '1.0', (object) [[]]];
$tests['\'1.0\' <=> object[1 => []]'] = [-1, null, '1.0', (object) [1 => []]];
$tests['\'1.0\' <=> object[1 => null]'] = [-1, null, '1.0', (object) [1 => null]];
$tests['\'1.0\' <=> object[0]'] = [-1, null, '1.0', (object) [0]];
$tests['\'1.0\' <=> object[0.0]'] = [-1, null, '1.0', (object) [0.0]];
$tests['\'1.0\' <=> object[null]'] = [-1, null, '1.0', (object) [null]];
$tests['\'1.0\' <=> object[false]'] = [-1, null, '1.0', (object) [false]];
$tests['\'1.0\' <=> object[true]'] = [-1, null, '1.0', (object) [true]];
$tests['\'1.0\' <=> object[\'\']'] = [-1, null, '1.0', (object) ['']];
$tests['\'1.0\' <=> object[a, b, c]'] = [-1, null, '1.0', (object) ['a','b','c']];
$tests['\'1.0\' <=> object[$fh1]'] = [-1, null, '1.0', (object) [$fh1]];
$tests['\'1.0\' <=> object[foo => bar]'] = [-1, null, '1.0', (object) ['foo' => 'bar']];
$tests['\'-1.0\' <=> false'] = [1, null, '-1.0', false];
$tests['\'-1.0\' <=> true'] = [0, null, '-1.0', true];
$tests['\'-1.0\' <=> null'] = [1, null, '-1.0', null];
$tests['\'-1.0\' <=> 0'] = [-1, null, '-1.0', 0];
$tests['\'-1.0\' <=> 1'] = [-1, null, '-1.0', 1];
$tests['\'-1.0\' <=> -1'] = [0, null, '-1.0', -1];
$tests['\'-1.0\' <=> 0.0'] = [-1, null, '-1.0', 0.0];
$tests['\'-1.0\' <=> -1.0'] = [0, null, '-1.0', -1.0];
$tests['\'-1.0\' <=> 1.0'] = [-1, null, '-1.0', 1.0];
$tests['\'-1.0\' <=> \'\''] = [1, null, '-1.0', ''];
$tests['\'-1.0\' <=> \'0\''] = [-1, null, '-1.0', '0'];
$tests['\'-1.0\' <=> \'-0\''] = [-1, null, '-1.0', '-0'];
$tests['\'-1.0\' <=> \'+0\''] = [-1, null, '-1.0', '+0'];
$tests['\'-1.0\' <=> \'0.0\''] = [-1, null, '-1.0', '0.0'];
$tests['\'-1.0\' <=> \'-0.0\''] = [-1, null, '-1.0', '-0.0'];
$tests['\'-1.0\' <=> \'+0.0\''] = [-1, null, '-1.0', '+0.0'];
$tests['\'-1.0\' <=> \'1.0\''] = [-1, null, '-1.0', '1.0'];
$tests['\'-1.0\' <=> \'-1.0\''] = [0, null, '-1.0', '-1.0'];
$tests['\'-1.0\' <=> \'+1.0\''] = [-1, null, '-1.0', '+1.0'];
$tests['\'-1.0\' <=> \'-1\''] = [0, null, '-1.0', '-1'];
$tests['\'-1.0\' <=> \'+1\''] = [-1, null, '-1.0', '+1'];
$tests['\'-1.0\' <=> \'1\''] = [-1, null, '-1.0', '1'];
$tests['\'-1.0\' <=> \' 0\''] = [-1, null, '-1.0', ' 0'];
$tests['\'-1.0\' <=> \' -0\''] = [-1, null, '-1.0', ' -0'];
$tests['\'-1.0\' <=> \' +0\''] = [-1, null, '-1.0', ' +0'];
$tests['\'-1.0\' <=> \' 0\' '] = [-1, null, '-1.0', ' 0 '];
$tests['\'-1.0\' <=> \' -0\''] = [-1, null, '-1.0', ' -0 '];
$tests['\'-1.0\' <=> \' +0\''] = [-1, null, '-1.0', ' +0 '];
$tests['\'-1.0\' <=> \'0\' '] = [-1, null, '-1.0', '0 '];
$tests['\'-1.0\' <=> \'-0\''] = [-1, null, '-1.0', '-0 '];
$tests['\'-1.0\' <=> \'+0\''] = [-1, null, '-1.0', '+0 '];
$tests['\'-1.0\' <=> \' 0.0\''] = [-1, null, '-1.0', ' 0.0'];
$tests['\'-1.0\' <=> \' -0.0\''] = [-1, null, '-1.0', ' -0.0'];
$tests['\'-1.0\' <=> \' +0.0\''] = [-1, null, '-1.0', ' +0.0'];
$tests['\'-1.0\' <=> \' 0.0\' '] = [-1, null, '-1.0', ' 0.0 '];
$tests['\'-1.0\' <=> \' -0.0\''] = [-1, null, '-1.0', ' -0.0 '];
$tests['\'-1.0\' <=> \' +0.0\''] = [-1, null, '-1.0', ' +0.0 '];
$tests['\'-1.0\' <=> \'0.0\' '] = [-1, null, '-1.0', '0.0 '];
$tests['\'-1.0\' <=> \'-0.0\''] = [-1, null, '-1.0', '-0.0 '];
$tests['\'-1.0\' <=> \'+0.0\''] = [-1, null, '-1.0', '+0.0 '];
$tests['\'-1.0\' <=> \'03\''] = [-1, null, '-1.0', '03'];
$tests['\'-1.0\' <=> \'2abc\''] = [-1, null, '-1.0', '2abc'];
$tests['\'-1.0\' <=> \'2.5abc\''] = [-1, null, '-1.0', '2.5abc'];
$tests['\'-1.0\' <=> \'abc2abc\''] = [-1, null, '-1.0', 'abc2abc'];
$tests['\'-1.0\' <=> \'abc2.5abc\''] = [-1, null, '-1.0', 'abc2.5abc'];
$tests['\'-1.0\' <=> \'\\0\''] = [1, null, '-1.0', hex2bin('00')];
$tests['\'-1.0\' <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [-1, null, '-1.0', hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['\'-1.0\' <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [1, null, '-1.0', hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['\'-1.0\' <=> 12.0000000000001'] = [-1, null, '-1.0', 12.0000000000001];
$tests['\'-1.0\' <=> 12.000000000000002'] = [-1, null, '-1.0', 12.000000000000002];
$tests['\'-1.0\' <=> pi'] = [-1, null, '-1.0', M_PI];
$tests['\'-1.0\' <=> int(max)'] = [-1, null, '-1.0', PHP_INT_MAX];
$tests['\'-1.0\' <=> int(min)'] = [1, null, '-1.0', PHP_INT_MIN];
$tests['\'-1.0\' <=> float(epsilon)'] = [-1, null, '-1.0', PHP_FLOAT_EPSILON];
$tests['\'-1.0\' <=> float(min)'] = [-1, null, '-1.0', PHP_FLOAT_MIN];
$tests['\'-1.0\' <=> float(max)'] = [-1, null, '-1.0', PHP_FLOAT_MAX];
$tests['\'-1.0\' <=> float(inf)'] = [-1, null, '-1.0', INF];
$tests['\'-1.0\' <=> float(-inf)'] = [1, null, '-1.0', -INF];
$tests['\'-1.0\' <=> float(nan)'] = [1, null, '-1.0', NAN];
$tests['\'-1.0\' <=> $closure1'] = [-1, null, '-1.0', $closure1];
$tests['\'-1.0\' <=> $closure2'] = [-1, null, '-1.0', $closure2];
$tests['\'-1.0\' <=> $fh1'] = [-1, null, '-1.0', $fh1];
$tests['\'-1.0\' <=> $fh2'] = [-1, null, '-1.0', $fh2];
$tests['\'-1.0\' <=> $proc'] = [-1, null, '-1.0', $proc];
$tests['\'-1.0\' <=> DateTime(2024-01-01T12:00:00Z)'] = [-1, null, '-1.0', unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'-1.0\' <=> DateTime(2024-01-01T12:00:01Z)'] = [-1, null, '-1.0', unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'-1.0\' <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [-1, null, '-1.0', unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'-1.0\' <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [-1, null, '-1.0', unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'-1.0\' <=> []'] = [-1, null, '-1.0', []];
$tests['\'-1.0\' <=> [[]]'] = [-1, null, '-1.0', [[]]];
$tests['\'-1.0\' <=> [1 => []]'] = [-1, null, '-1.0', [1 => []]];
$tests['\'-1.0\' <=> [1 => null]'] = [-1, null, '-1.0', [1 => null]];
$tests['\'-1.0\' <=> [0]'] = [-1, null, '-1.0', [0]];
$tests['\'-1.0\' <=> [0.0]'] = [-1, null, '-1.0', [0.0]];
$tests['\'-1.0\' <=> [null]'] = [-1, null, '-1.0', [null]];
$tests['\'-1.0\' <=> [false]'] = [-1, null, '-1.0', [false]];
$tests['\'-1.0\' <=> [true]'] = [-1, null, '-1.0', [true]];
$tests['\'-1.0\' <=> [\'\']'] = [-1, null, '-1.0', ['']];
$tests['\'-1.0\' <=> [a, b, c]'] = [-1, null, '-1.0', ['a','b','c']];
$tests['\'-1.0\' <=> [$fh1]'] = [-1, null, '-1.0', [$fh1]];
$tests['\'-1.0\' <=> [foo => bar]'] = [-1, null, '-1.0', ['foo' => 'bar']];
$tests['\'-1.0\' <=> object[]'] = [-1, null, '-1.0', (object) []];
$tests['\'-1.0\' <=> object[[]]'] = [-1, null, '-1.0', (object) [[]]];
$tests['\'-1.0\' <=> object[1 => []]'] = [-1, null, '-1.0', (object) [1 => []]];
$tests['\'-1.0\' <=> object[1 => null]'] = [-1, null, '-1.0', (object) [1 => null]];
$tests['\'-1.0\' <=> object[0]'] = [-1, null, '-1.0', (object) [0]];
$tests['\'-1.0\' <=> object[0.0]'] = [-1, null, '-1.0', (object) [0.0]];
$tests['\'-1.0\' <=> object[null]'] = [-1, null, '-1.0', (object) [null]];
$tests['\'-1.0\' <=> object[false]'] = [-1, null, '-1.0', (object) [false]];
$tests['\'-1.0\' <=> object[true]'] = [-1, null, '-1.0', (object) [true]];
$tests['\'-1.0\' <=> object[\'\']'] = [-1, null, '-1.0', (object) ['']];
$tests['\'-1.0\' <=> object[a, b, c]'] = [-1, null, '-1.0', (object) ['a','b','c']];
$tests['\'-1.0\' <=> object[$fh1]'] = [-1, null, '-1.0', (object) [$fh1]];
$tests['\'-1.0\' <=> object[foo => bar]'] = [-1, null, '-1.0', (object) ['foo' => 'bar']];
$tests['\'+1.0\' <=> false'] = [1, null, '+1.0', false];
$tests['\'+1.0\' <=> true'] = [0, null, '+1.0', true];
$tests['\'+1.0\' <=> null'] = [1, null, '+1.0', null];
$tests['\'+1.0\' <=> 0'] = [1, null, '+1.0', 0];
$tests['\'+1.0\' <=> 1'] = [0, null, '+1.0', 1];
$tests['\'+1.0\' <=> -1'] = [1, null, '+1.0', -1];
$tests['\'+1.0\' <=> 0.0'] = [1, null, '+1.0', 0.0];
$tests['\'+1.0\' <=> -1.0'] = [1, null, '+1.0', -1.0];
$tests['\'+1.0\' <=> 1.0'] = [0, null, '+1.0', 1.0];
$tests['\'+1.0\' <=> \'\''] = [1, null, '+1.0', ''];
$tests['\'+1.0\' <=> \'0\''] = [1, null, '+1.0', '0'];
$tests['\'+1.0\' <=> \'-0\''] = [1, null, '+1.0', '-0'];
$tests['\'+1.0\' <=> \'+0\''] = [1, null, '+1.0', '+0'];
$tests['\'+1.0\' <=> \'0.0\''] = [1, null, '+1.0', '0.0'];
$tests['\'+1.0\' <=> \'-0.0\''] = [1, null, '+1.0', '-0.0'];
$tests['\'+1.0\' <=> \'+0.0\''] = [1, null, '+1.0', '+0.0'];
$tests['\'+1.0\' <=> \'1.0\''] = [0, null, '+1.0', '1.0'];
$tests['\'+1.0\' <=> \'-1.0\''] = [1, null, '+1.0', '-1.0'];
$tests['\'+1.0\' <=> \'+1.0\''] = [0, null, '+1.0', '+1.0'];
$tests['\'+1.0\' <=> \'-1\''] = [1, null, '+1.0', '-1'];
$tests['\'+1.0\' <=> \'+1\''] = [0, null, '+1.0', '+1'];
$tests['\'+1.0\' <=> \'1\''] = [0, null, '+1.0', '1'];
$tests['\'+1.0\' <=> \' 0\''] = [1, null, '+1.0', ' 0'];
$tests['\'+1.0\' <=> \' -0\''] = [1, null, '+1.0', ' -0'];
$tests['\'+1.0\' <=> \' +0\''] = [1, null, '+1.0', ' +0'];
$tests['\'+1.0\' <=> \' 0\' '] = [1, null, '+1.0', ' 0 '];
$tests['\'+1.0\' <=> \' -0\''] = [1, null, '+1.0', ' -0 '];
$tests['\'+1.0\' <=> \' +0\''] = [1, null, '+1.0', ' +0 '];
$tests['\'+1.0\' <=> \'0\' '] = [1, null, '+1.0', '0 '];
$tests['\'+1.0\' <=> \'-0\''] = [1, null, '+1.0', '-0 '];
$tests['\'+1.0\' <=> \'+0\''] = [1, null, '+1.0', '+0 '];
$tests['\'+1.0\' <=> \' 0.0\''] = [1, null, '+1.0', ' 0.0'];
$tests['\'+1.0\' <=> \' -0.0\''] = [1, null, '+1.0', ' -0.0'];
$tests['\'+1.0\' <=> \' +0.0\''] = [1, null, '+1.0', ' +0.0'];
$tests['\'+1.0\' <=> \' 0.0\' '] = [1, null, '+1.0', ' 0.0 '];
$tests['\'+1.0\' <=> \' -0.0\''] = [1, null, '+1.0', ' -0.0 '];
$tests['\'+1.0\' <=> \' +0.0\''] = [1, null, '+1.0', ' +0.0 '];
$tests['\'+1.0\' <=> \'0.0\' '] = [1, null, '+1.0', '0.0 '];
$tests['\'+1.0\' <=> \'-0.0\''] = [1, null, '+1.0', '-0.0 '];
$tests['\'+1.0\' <=> \'+0.0\''] = [1, null, '+1.0', '+0.0 '];
$tests['\'+1.0\' <=> \'03\''] = [-1, null, '+1.0', '03'];
$tests['\'+1.0\' <=> \'2abc\''] = [-1, null, '+1.0', '2abc'];
$tests['\'+1.0\' <=> \'2.5abc\''] = [-1, null, '+1.0', '2.5abc'];
$tests['\'+1.0\' <=> \'abc2abc\''] = [-1, null, '+1.0', 'abc2abc'];
$tests['\'+1.0\' <=> \'abc2.5abc\''] = [-1, null, '+1.0', 'abc2.5abc'];
$tests['\'+1.0\' <=> \'\\0\''] = [1, null, '+1.0', hex2bin('00')];
$tests['\'+1.0\' <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [-1, null, '+1.0', hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['\'+1.0\' <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [1, null, '+1.0', hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['\'+1.0\' <=> 12.0000000000001'] = [-1, null, '+1.0', 12.0000000000001];
$tests['\'+1.0\' <=> 12.000000000000002'] = [-1, null, '+1.0', 12.000000000000002];
$tests['\'+1.0\' <=> pi'] = [-1, null, '+1.0', M_PI];
$tests['\'+1.0\' <=> int(max)'] = [-1, null, '+1.0', PHP_INT_MAX];
$tests['\'+1.0\' <=> int(min)'] = [1, null, '+1.0', PHP_INT_MIN];
$tests['\'+1.0\' <=> float(epsilon)'] = [1, null, '+1.0', PHP_FLOAT_EPSILON];
$tests['\'+1.0\' <=> float(min)'] = [1, null, '+1.0', PHP_FLOAT_MIN];
$tests['\'+1.0\' <=> float(max)'] = [-1, null, '+1.0', PHP_FLOAT_MAX];
$tests['\'+1.0\' <=> float(inf)'] = [-1, null, '+1.0', INF];
$tests['\'+1.0\' <=> float(-inf)'] = [1, null, '+1.0', -INF];
$tests['\'+1.0\' <=> float(nan)'] = [1, null, '+1.0', NAN];
$tests['\'+1.0\' <=> $closure1'] = [-1, null, '+1.0', $closure1];
$tests['\'+1.0\' <=> $closure2'] = [-1, null, '+1.0', $closure2];
$tests['\'+1.0\' <=> $fh1'] = [-1, null, '+1.0', $fh1];
$tests['\'+1.0\' <=> $fh2'] = [-1, null, '+1.0', $fh2];
$tests['\'+1.0\' <=> $proc'] = [-1, null, '+1.0', $proc];
$tests['\'+1.0\' <=> DateTime(2024-01-01T12:00:00Z)'] = [-1, null, '+1.0', unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'+1.0\' <=> DateTime(2024-01-01T12:00:01Z)'] = [-1, null, '+1.0', unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'+1.0\' <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [-1, null, '+1.0', unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'+1.0\' <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [-1, null, '+1.0', unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'+1.0\' <=> []'] = [-1, null, '+1.0', []];
$tests['\'+1.0\' <=> [[]]'] = [-1, null, '+1.0', [[]]];
$tests['\'+1.0\' <=> [1 => []]'] = [-1, null, '+1.0', [1 => []]];
$tests['\'+1.0\' <=> [1 => null]'] = [-1, null, '+1.0', [1 => null]];
$tests['\'+1.0\' <=> [0]'] = [-1, null, '+1.0', [0]];
$tests['\'+1.0\' <=> [0.0]'] = [-1, null, '+1.0', [0.0]];
$tests['\'+1.0\' <=> [null]'] = [-1, null, '+1.0', [null]];
$tests['\'+1.0\' <=> [false]'] = [-1, null, '+1.0', [false]];
$tests['\'+1.0\' <=> [true]'] = [-1, null, '+1.0', [true]];
$tests['\'+1.0\' <=> [\'\']'] = [-1, null, '+1.0', ['']];
$tests['\'+1.0\' <=> [a, b, c]'] = [-1, null, '+1.0', ['a','b','c']];
$tests['\'+1.0\' <=> [$fh1]'] = [-1, null, '+1.0', [$fh1]];
$tests['\'+1.0\' <=> [foo => bar]'] = [-1, null, '+1.0', ['foo' => 'bar']];
$tests['\'+1.0\' <=> object[]'] = [-1, null, '+1.0', (object) []];
$tests['\'+1.0\' <=> object[[]]'] = [-1, null, '+1.0', (object) [[]]];
$tests['\'+1.0\' <=> object[1 => []]'] = [-1, null, '+1.0', (object) [1 => []]];
$tests['\'+1.0\' <=> object[1 => null]'] = [-1, null, '+1.0', (object) [1 => null]];
$tests['\'+1.0\' <=> object[0]'] = [-1, null, '+1.0', (object) [0]];
$tests['\'+1.0\' <=> object[0.0]'] = [-1, null, '+1.0', (object) [0.0]];
$tests['\'+1.0\' <=> object[null]'] = [-1, null, '+1.0', (object) [null]];
$tests['\'+1.0\' <=> object[false]'] = [-1, null, '+1.0', (object) [false]];
$tests['\'+1.0\' <=> object[true]'] = [-1, null, '+1.0', (object) [true]];
$tests['\'+1.0\' <=> object[\'\']'] = [-1, null, '+1.0', (object) ['']];
$tests['\'+1.0\' <=> object[a, b, c]'] = [-1, null, '+1.0', (object) ['a','b','c']];
$tests['\'+1.0\' <=> object[$fh1]'] = [-1, null, '+1.0', (object) [$fh1]];
$tests['\'+1.0\' <=> object[foo => bar]'] = [-1, null, '+1.0', (object) ['foo' => 'bar']];
$tests['\'-1\' <=> false'] = [1, null, '-1', false];
$tests['\'-1\' <=> true'] = [0, null, '-1', true];
$tests['\'-1\' <=> null'] = [1, null, '-1', null];
$tests['\'-1\' <=> 0'] = [-1, null, '-1', 0];
$tests['\'-1\' <=> 1'] = [-1, null, '-1', 1];
$tests['\'-1\' <=> -1'] = [0, null, '-1', -1];
$tests['\'-1\' <=> 0.0'] = [-1, null, '-1', 0.0];
$tests['\'-1\' <=> -1.0'] = [0, null, '-1', -1.0];
$tests['\'-1\' <=> 1.0'] = [-1, null, '-1', 1.0];
$tests['\'-1\' <=> \'\''] = [1, null, '-1', ''];
$tests['\'-1\' <=> \'0\''] = [-1, null, '-1', '0'];
$tests['\'-1\' <=> \'-0\''] = [-1, null, '-1', '-0'];
$tests['\'-1\' <=> \'+0\''] = [-1, null, '-1', '+0'];
$tests['\'-1\' <=> \'0.0\''] = [-1, null, '-1', '0.0'];
$tests['\'-1\' <=> \'-0.0\''] = [-1, null, '-1', '-0.0'];
$tests['\'-1\' <=> \'+0.0\''] = [-1, null, '-1', '+0.0'];
$tests['\'-1\' <=> \'1.0\''] = [-1, null, '-1', '1.0'];
$tests['\'-1\' <=> \'-1.0\''] = [0, null, '-1', '-1.0'];
$tests['\'-1\' <=> \'+1.0\''] = [-1, null, '-1', '+1.0'];
$tests['\'-1\' <=> \'-1\''] = [0, null, '-1', '-1'];
$tests['\'-1\' <=> \'+1\''] = [-1, null, '-1', '+1'];
$tests['\'-1\' <=> \'1\''] = [-1, null, '-1', '1'];
$tests['\'-1\' <=> \' 0\''] = [-1, null, '-1', ' 0'];
$tests['\'-1\' <=> \' -0\''] = [-1, null, '-1', ' -0'];
$tests['\'-1\' <=> \' +0\''] = [-1, null, '-1', ' +0'];
$tests['\'-1\' <=> \' 0\' '] = [-1, null, '-1', ' 0 '];
$tests['\'-1\' <=> \' -0\''] = [-1, null, '-1', ' -0 '];
$tests['\'-1\' <=> \' +0\''] = [-1, null, '-1', ' +0 '];
$tests['\'-1\' <=> \'0\' '] = [-1, null, '-1', '0 '];
$tests['\'-1\' <=> \'-0\''] = [-1, null, '-1', '-0 '];
$tests['\'-1\' <=> \'+0\''] = [-1, null, '-1', '+0 '];
$tests['\'-1\' <=> \' 0.0\''] = [-1, null, '-1', ' 0.0'];
$tests['\'-1\' <=> \' -0.0\''] = [-1, null, '-1', ' -0.0'];
$tests['\'-1\' <=> \' +0.0\''] = [-1, null, '-1', ' +0.0'];
$tests['\'-1\' <=> \' 0.0\' '] = [-1, null, '-1', ' 0.0 '];
$tests['\'-1\' <=> \' -0.0\''] = [-1, null, '-1', ' -0.0 '];
$tests['\'-1\' <=> \' +0.0\''] = [-1, null, '-1', ' +0.0 '];
$tests['\'-1\' <=> \'0.0\' '] = [-1, null, '-1', '0.0 '];
$tests['\'-1\' <=> \'-0.0\''] = [-1, null, '-1', '-0.0 '];
$tests['\'-1\' <=> \'+0.0\''] = [-1, null, '-1', '+0.0 '];
$tests['\'-1\' <=> \'03\''] = [-1, null, '-1', '03'];
$tests['\'-1\' <=> \'2abc\''] = [-1, null, '-1', '2abc'];
$tests['\'-1\' <=> \'2.5abc\''] = [-1, null, '-1', '2.5abc'];
$tests['\'-1\' <=> \'abc2abc\''] = [-1, null, '-1', 'abc2abc'];
$tests['\'-1\' <=> \'abc2.5abc\''] = [-1, null, '-1', 'abc2.5abc'];
$tests['\'-1\' <=> \'\\0\''] = [1, null, '-1', hex2bin('00')];
$tests['\'-1\' <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [-1, null, '-1', hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['\'-1\' <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [1, null, '-1', hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['\'-1\' <=> 12.0000000000001'] = [-1, null, '-1', 12.0000000000001];
$tests['\'-1\' <=> 12.000000000000002'] = [-1, null, '-1', 12.000000000000002];
$tests['\'-1\' <=> pi'] = [-1, null, '-1', M_PI];
$tests['\'-1\' <=> int(max)'] = [-1, null, '-1', PHP_INT_MAX];
$tests['\'-1\' <=> int(min)'] = [1, null, '-1', PHP_INT_MIN];
$tests['\'-1\' <=> float(epsilon)'] = [-1, null, '-1', PHP_FLOAT_EPSILON];
$tests['\'-1\' <=> float(min)'] = [-1, null, '-1', PHP_FLOAT_MIN];
$tests['\'-1\' <=> float(max)'] = [-1, null, '-1', PHP_FLOAT_MAX];
$tests['\'-1\' <=> float(inf)'] = [-1, null, '-1', INF];
$tests['\'-1\' <=> float(-inf)'] = [1, null, '-1', -INF];
$tests['\'-1\' <=> float(nan)'] = [1, null, '-1', NAN];
$tests['\'-1\' <=> $closure1'] = [-1, null, '-1', $closure1];
$tests['\'-1\' <=> $closure2'] = [-1, null, '-1', $closure2];
$tests['\'-1\' <=> $fh1'] = [-1, null, '-1', $fh1];
$tests['\'-1\' <=> $fh2'] = [-1, null, '-1', $fh2];
$tests['\'-1\' <=> $proc'] = [-1, null, '-1', $proc];
$tests['\'-1\' <=> DateTime(2024-01-01T12:00:00Z)'] = [-1, null, '-1', unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'-1\' <=> DateTime(2024-01-01T12:00:01Z)'] = [-1, null, '-1', unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'-1\' <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [-1, null, '-1', unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'-1\' <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [-1, null, '-1', unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'-1\' <=> []'] = [-1, null, '-1', []];
$tests['\'-1\' <=> [[]]'] = [-1, null, '-1', [[]]];
$tests['\'-1\' <=> [1 => []]'] = [-1, null, '-1', [1 => []]];
$tests['\'-1\' <=> [1 => null]'] = [-1, null, '-1', [1 => null]];
$tests['\'-1\' <=> [0]'] = [-1, null, '-1', [0]];
$tests['\'-1\' <=> [0.0]'] = [-1, null, '-1', [0.0]];
$tests['\'-1\' <=> [null]'] = [-1, null, '-1', [null]];
$tests['\'-1\' <=> [false]'] = [-1, null, '-1', [false]];
$tests['\'-1\' <=> [true]'] = [-1, null, '-1', [true]];
$tests['\'-1\' <=> [\'\']'] = [-1, null, '-1', ['']];
$tests['\'-1\' <=> [a, b, c]'] = [-1, null, '-1', ['a','b','c']];
$tests['\'-1\' <=> [$fh1]'] = [-1, null, '-1', [$fh1]];
$tests['\'-1\' <=> [foo => bar]'] = [-1, null, '-1', ['foo' => 'bar']];
$tests['\'-1\' <=> object[]'] = [-1, null, '-1', (object) []];
$tests['\'-1\' <=> object[[]]'] = [-1, null, '-1', (object) [[]]];
$tests['\'-1\' <=> object[1 => []]'] = [-1, null, '-1', (object) [1 => []]];
$tests['\'-1\' <=> object[1 => null]'] = [-1, null, '-1', (object) [1 => null]];
$tests['\'-1\' <=> object[0]'] = [-1, null, '-1', (object) [0]];
$tests['\'-1\' <=> object[0.0]'] = [-1, null, '-1', (object) [0.0]];
$tests['\'-1\' <=> object[null]'] = [-1, null, '-1', (object) [null]];
$tests['\'-1\' <=> object[false]'] = [-1, null, '-1', (object) [false]];
$tests['\'-1\' <=> object[true]'] = [-1, null, '-1', (object) [true]];
$tests['\'-1\' <=> object[\'\']'] = [-1, null, '-1', (object) ['']];
$tests['\'-1\' <=> object[a, b, c]'] = [-1, null, '-1', (object) ['a','b','c']];
$tests['\'-1\' <=> object[$fh1]'] = [-1, null, '-1', (object) [$fh1]];
$tests['\'-1\' <=> object[foo => bar]'] = [-1, null, '-1', (object) ['foo' => 'bar']];
$tests['\'+1\' <=> false'] = [1, null, '+1', false];
$tests['\'+1\' <=> true'] = [0, null, '+1', true];
$tests['\'+1\' <=> null'] = [1, null, '+1', null];
$tests['\'+1\' <=> 0'] = [1, null, '+1', 0];
$tests['\'+1\' <=> 1'] = [0, null, '+1', 1];
$tests['\'+1\' <=> -1'] = [1, null, '+1', -1];
$tests['\'+1\' <=> 0.0'] = [1, null, '+1', 0.0];
$tests['\'+1\' <=> -1.0'] = [1, null, '+1', -1.0];
$tests['\'+1\' <=> 1.0'] = [0, null, '+1', 1.0];
$tests['\'+1\' <=> \'\''] = [1, null, '+1', ''];
$tests['\'+1\' <=> \'0\''] = [1, null, '+1', '0'];
$tests['\'+1\' <=> \'-0\''] = [1, null, '+1', '-0'];
$tests['\'+1\' <=> \'+0\''] = [1, null, '+1', '+0'];
$tests['\'+1\' <=> \'0.0\''] = [1, null, '+1', '0.0'];
$tests['\'+1\' <=> \'-0.0\''] = [1, null, '+1', '-0.0'];
$tests['\'+1\' <=> \'+0.0\''] = [1, null, '+1', '+0.0'];
$tests['\'+1\' <=> \'1.0\''] = [0, null, '+1', '1.0'];
$tests['\'+1\' <=> \'-1.0\''] = [1, null, '+1', '-1.0'];
$tests['\'+1\' <=> \'+1.0\''] = [0, null, '+1', '+1.0'];
$tests['\'+1\' <=> \'-1\''] = [1, null, '+1', '-1'];
$tests['\'+1\' <=> \'+1\''] = [0, null, '+1', '+1'];
$tests['\'+1\' <=> \'1\''] = [0, null, '+1', '1'];
$tests['\'+1\' <=> \' 0\''] = [1, null, '+1', ' 0'];
$tests['\'+1\' <=> \' -0\''] = [1, null, '+1', ' -0'];
$tests['\'+1\' <=> \' +0\''] = [1, null, '+1', ' +0'];
$tests['\'+1\' <=> \' 0\' '] = [1, null, '+1', ' 0 '];
$tests['\'+1\' <=> \' -0\''] = [1, null, '+1', ' -0 '];
$tests['\'+1\' <=> \' +0\''] = [1, null, '+1', ' +0 '];
$tests['\'+1\' <=> \'0\' '] = [1, null, '+1', '0 '];
$tests['\'+1\' <=> \'-0\''] = [1, null, '+1', '-0 '];
$tests['\'+1\' <=> \'+0\''] = [1, null, '+1', '+0 '];
$tests['\'+1\' <=> \' 0.0\''] = [1, null, '+1', ' 0.0'];
$tests['\'+1\' <=> \' -0.0\''] = [1, null, '+1', ' -0.0'];
$tests['\'+1\' <=> \' +0.0\''] = [1, null, '+1', ' +0.0'];
$tests['\'+1\' <=> \' 0.0\' '] = [1, null, '+1', ' 0.0 '];
$tests['\'+1\' <=> \' -0.0\''] = [1, null, '+1', ' -0.0 '];
$tests['\'+1\' <=> \' +0.0\''] = [1, null, '+1', ' +0.0 '];
$tests['\'+1\' <=> \'0.0\' '] = [1, null, '+1', '0.0 '];
$tests['\'+1\' <=> \'-0.0\''] = [1, null, '+1', '-0.0 '];
$tests['\'+1\' <=> \'+0.0\''] = [1, null, '+1', '+0.0 '];
$tests['\'+1\' <=> \'03\''] = [-1, null, '+1', '03'];
$tests['\'+1\' <=> \'2abc\''] = [-1, null, '+1', '2abc'];
$tests['\'+1\' <=> \'2.5abc\''] = [-1, null, '+1', '2.5abc'];
$tests['\'+1\' <=> \'abc2abc\''] = [-1, null, '+1', 'abc2abc'];
$tests['\'+1\' <=> \'abc2.5abc\''] = [-1, null, '+1', 'abc2.5abc'];
$tests['\'+1\' <=> \'\\0\''] = [1, null, '+1', hex2bin('00')];
$tests['\'+1\' <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [-1, null, '+1', hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['\'+1\' <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [1, null, '+1', hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['\'+1\' <=> 12.0000000000001'] = [-1, null, '+1', 12.0000000000001];
$tests['\'+1\' <=> 12.000000000000002'] = [-1, null, '+1', 12.000000000000002];
$tests['\'+1\' <=> pi'] = [-1, null, '+1', M_PI];
$tests['\'+1\' <=> int(max)'] = [-1, null, '+1', PHP_INT_MAX];
$tests['\'+1\' <=> int(min)'] = [1, null, '+1', PHP_INT_MIN];
$tests['\'+1\' <=> float(epsilon)'] = [1, null, '+1', PHP_FLOAT_EPSILON];
$tests['\'+1\' <=> float(min)'] = [1, null, '+1', PHP_FLOAT_MIN];
$tests['\'+1\' <=> float(max)'] = [-1, null, '+1', PHP_FLOAT_MAX];
$tests['\'+1\' <=> float(inf)'] = [-1, null, '+1', INF];
$tests['\'+1\' <=> float(-inf)'] = [1, null, '+1', -INF];
$tests['\'+1\' <=> float(nan)'] = [1, null, '+1', NAN];
$tests['\'+1\' <=> $closure1'] = [-1, null, '+1', $closure1];
$tests['\'+1\' <=> $closure2'] = [-1, null, '+1', $closure2];
$tests['\'+1\' <=> $fh1'] = [-1, null, '+1', $fh1];
$tests['\'+1\' <=> $fh2'] = [-1, null, '+1', $fh2];
$tests['\'+1\' <=> $proc'] = [-1, null, '+1', $proc];
$tests['\'+1\' <=> DateTime(2024-01-01T12:00:00Z)'] = [-1, null, '+1', unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'+1\' <=> DateTime(2024-01-01T12:00:01Z)'] = [-1, null, '+1', unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'+1\' <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [-1, null, '+1', unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'+1\' <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [-1, null, '+1', unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'+1\' <=> []'] = [-1, null, '+1', []];
$tests['\'+1\' <=> [[]]'] = [-1, null, '+1', [[]]];
$tests['\'+1\' <=> [1 => []]'] = [-1, null, '+1', [1 => []]];
$tests['\'+1\' <=> [1 => null]'] = [-1, null, '+1', [1 => null]];
$tests['\'+1\' <=> [0]'] = [-1, null, '+1', [0]];
$tests['\'+1\' <=> [0.0]'] = [-1, null, '+1', [0.0]];
$tests['\'+1\' <=> [null]'] = [-1, null, '+1', [null]];
$tests['\'+1\' <=> [false]'] = [-1, null, '+1', [false]];
$tests['\'+1\' <=> [true]'] = [-1, null, '+1', [true]];
$tests['\'+1\' <=> [\'\']'] = [-1, null, '+1', ['']];
$tests['\'+1\' <=> [a, b, c]'] = [-1, null, '+1', ['a','b','c']];
$tests['\'+1\' <=> [$fh1]'] = [-1, null, '+1', [$fh1]];
$tests['\'+1\' <=> [foo => bar]'] = [-1, null, '+1', ['foo' => 'bar']];
$tests['\'+1\' <=> object[]'] = [-1, null, '+1', (object) []];
$tests['\'+1\' <=> object[[]]'] = [-1, null, '+1', (object) [[]]];
$tests['\'+1\' <=> object[1 => []]'] = [-1, null, '+1', (object) [1 => []]];
$tests['\'+1\' <=> object[1 => null]'] = [-1, null, '+1', (object) [1 => null]];
$tests['\'+1\' <=> object[0]'] = [-1, null, '+1', (object) [0]];
$tests['\'+1\' <=> object[0.0]'] = [-1, null, '+1', (object) [0.0]];
$tests['\'+1\' <=> object[null]'] = [-1, null, '+1', (object) [null]];
$tests['\'+1\' <=> object[false]'] = [-1, null, '+1', (object) [false]];
$tests['\'+1\' <=> object[true]'] = [-1, null, '+1', (object) [true]];
$tests['\'+1\' <=> object[\'\']'] = [-1, null, '+1', (object) ['']];
$tests['\'+1\' <=> object[a, b, c]'] = [-1, null, '+1', (object) ['a','b','c']];
$tests['\'+1\' <=> object[$fh1]'] = [-1, null, '+1', (object) [$fh1]];
$tests['\'+1\' <=> object[foo => bar]'] = [-1, null, '+1', (object) ['foo' => 'bar']];
$tests['\'1\' <=> false'] = [1, null, '1', false];
$tests['\'1\' <=> true'] = [0, null, '1', true];
$tests['\'1\' <=> null'] = [1, null, '1', null];
$tests['\'1\' <=> 0'] = [1, null, '1', 0];
$tests['\'1\' <=> 1'] = [0, null, '1', 1];
$tests['\'1\' <=> -1'] = [1, null, '1', -1];
$tests['\'1\' <=> 0.0'] = [1, null, '1', 0.0];
$tests['\'1\' <=> -1.0'] = [1, null, '1', -1.0];
$tests['\'1\' <=> 1.0'] = [0, null, '1', 1.0];
$tests['\'1\' <=> \'\''] = [1, null, '1', ''];
$tests['\'1\' <=> \'0\''] = [1, null, '1', '0'];
$tests['\'1\' <=> \'-0\''] = [1, null, '1', '-0'];
$tests['\'1\' <=> \'+0\''] = [1, null, '1', '+0'];
$tests['\'1\' <=> \'0.0\''] = [1, null, '1', '0.0'];
$tests['\'1\' <=> \'-0.0\''] = [1, null, '1', '-0.0'];
$tests['\'1\' <=> \'+0.0\''] = [1, null, '1', '+0.0'];
$tests['\'1\' <=> \'1.0\''] = [0, null, '1', '1.0'];
$tests['\'1\' <=> \'-1.0\''] = [1, null, '1', '-1.0'];
$tests['\'1\' <=> \'+1.0\''] = [0, null, '1', '+1.0'];
$tests['\'1\' <=> \'-1\''] = [1, null, '1', '-1'];
$tests['\'1\' <=> \'+1\''] = [0, null, '1', '+1'];
$tests['\'1\' <=> \'1\''] = [0, null, '1', '1'];
$tests['\'1\' <=> \' 0\''] = [1, null, '1', ' 0'];
$tests['\'1\' <=> \' -0\''] = [1, null, '1', ' -0'];
$tests['\'1\' <=> \' +0\''] = [1, null, '1', ' +0'];
$tests['\'1\' <=> \' 0\' '] = [1, null, '1', ' 0 '];
$tests['\'1\' <=> \' -0\''] = [1, null, '1', ' -0 '];
$tests['\'1\' <=> \' +0\''] = [1, null, '1', ' +0 '];
$tests['\'1\' <=> \'0\' '] = [1, null, '1', '0 '];
$tests['\'1\' <=> \'-0\''] = [1, null, '1', '-0 '];
$tests['\'1\' <=> \'+0\''] = [1, null, '1', '+0 '];
$tests['\'1\' <=> \' 0.0\''] = [1, null, '1', ' 0.0'];
$tests['\'1\' <=> \' -0.0\''] = [1, null, '1', ' -0.0'];
$tests['\'1\' <=> \' +0.0\''] = [1, null, '1', ' +0.0'];
$tests['\'1\' <=> \' 0.0\' '] = [1, null, '1', ' 0.0 '];
$tests['\'1\' <=> \' -0.0\''] = [1, null, '1', ' -0.0 '];
$tests['\'1\' <=> \' +0.0\''] = [1, null, '1', ' +0.0 '];
$tests['\'1\' <=> \'0.0\' '] = [1, null, '1', '0.0 '];
$tests['\'1\' <=> \'-0.0\''] = [1, null, '1', '-0.0 '];
$tests['\'1\' <=> \'+0.0\''] = [1, null, '1', '+0.0 '];
$tests['\'1\' <=> \'03\''] = [-1, null, '1', '03'];
$tests['\'1\' <=> \'2abc\''] = [-1, null, '1', '2abc'];
$tests['\'1\' <=> \'2.5abc\''] = [-1, null, '1', '2.5abc'];
$tests['\'1\' <=> \'abc2abc\''] = [-1, null, '1', 'abc2abc'];
$tests['\'1\' <=> \'abc2.5abc\''] = [-1, null, '1', 'abc2.5abc'];
$tests['\'1\' <=> \'\\0\''] = [1, null, '1', hex2bin('00')];
$tests['\'1\' <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [-1, null, '1', hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['\'1\' <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [1, null, '1', hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['\'1\' <=> 12.0000000000001'] = [-1, null, '1', 12.0000000000001];
$tests['\'1\' <=> 12.000000000000002'] = [-1, null, '1', 12.000000000000002];
$tests['\'1\' <=> pi'] = [-1, null, '1', M_PI];
$tests['\'1\' <=> int(max)'] = [-1, null, '1', PHP_INT_MAX];
$tests['\'1\' <=> int(min)'] = [1, null, '1', PHP_INT_MIN];
$tests['\'1\' <=> float(epsilon)'] = [1, null, '1', PHP_FLOAT_EPSILON];
$tests['\'1\' <=> float(min)'] = [1, null, '1', PHP_FLOAT_MIN];
$tests['\'1\' <=> float(max)'] = [-1, null, '1', PHP_FLOAT_MAX];
$tests['\'1\' <=> float(inf)'] = [-1, null, '1', INF];
$tests['\'1\' <=> float(-inf)'] = [1, null, '1', -INF];
$tests['\'1\' <=> float(nan)'] = [1, null, '1', NAN];
$tests['\'1\' <=> $closure1'] = [-1, null, '1', $closure1];
$tests['\'1\' <=> $closure2'] = [-1, null, '1', $closure2];
$tests['\'1\' <=> $fh1'] = [-1, null, '1', $fh1];
$tests['\'1\' <=> $fh2'] = [-1, null, '1', $fh2];
$tests['\'1\' <=> $proc'] = [-1, null, '1', $proc];
$tests['\'1\' <=> DateTime(2024-01-01T12:00:00Z)'] = [-1, null, '1', unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'1\' <=> DateTime(2024-01-01T12:00:01Z)'] = [-1, null, '1', unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'1\' <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [-1, null, '1', unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'1\' <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [-1, null, '1', unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'1\' <=> []'] = [-1, null, '1', []];
$tests['\'1\' <=> [[]]'] = [-1, null, '1', [[]]];
$tests['\'1\' <=> [1 => []]'] = [-1, null, '1', [1 => []]];
$tests['\'1\' <=> [1 => null]'] = [-1, null, '1', [1 => null]];
$tests['\'1\' <=> [0]'] = [-1, null, '1', [0]];
$tests['\'1\' <=> [0.0]'] = [-1, null, '1', [0.0]];
$tests['\'1\' <=> [null]'] = [-1, null, '1', [null]];
$tests['\'1\' <=> [false]'] = [-1, null, '1', [false]];
$tests['\'1\' <=> [true]'] = [-1, null, '1', [true]];
$tests['\'1\' <=> [\'\']'] = [-1, null, '1', ['']];
$tests['\'1\' <=> [a, b, c]'] = [-1, null, '1', ['a','b','c']];
$tests['\'1\' <=> [$fh1]'] = [-1, null, '1', [$fh1]];
$tests['\'1\' <=> [foo => bar]'] = [-1, null, '1', ['foo' => 'bar']];
$tests['\'1\' <=> object[]'] = [-1, null, '1', (object) []];
$tests['\'1\' <=> object[[]]'] = [-1, null, '1', (object) [[]]];
$tests['\'1\' <=> object[1 => []]'] = [-1, null, '1', (object) [1 => []]];
$tests['\'1\' <=> object[1 => null]'] = [-1, null, '1', (object) [1 => null]];
$tests['\'1\' <=> object[0]'] = [-1, null, '1', (object) [0]];
$tests['\'1\' <=> object[0.0]'] = [-1, null, '1', (object) [0.0]];
$tests['\'1\' <=> object[null]'] = [-1, null, '1', (object) [null]];
$tests['\'1\' <=> object[false]'] = [-1, null, '1', (object) [false]];
$tests['\'1\' <=> object[true]'] = [-1, null, '1', (object) [true]];
$tests['\'1\' <=> object[\'\']'] = [-1, null, '1', (object) ['']];
$tests['\'1\' <=> object[a, b, c]'] = [-1, null, '1', (object) ['a','b','c']];
$tests['\'1\' <=> object[$fh1]'] = [-1, null, '1', (object) [$fh1]];
$tests['\'1\' <=> object[foo => bar]'] = [-1, null, '1', (object) ['foo' => 'bar']];
$tests['\' 0\' <=> false'] = [1, null, ' 0', false];
$tests['\' 0\' <=> true'] = [0, null, ' 0', true];
$tests['\' 0\' <=> null'] = [1, null, ' 0', null];
$tests['\' 0\' <=> 0'] = [0, null, ' 0', 0];
$tests['\' 0\' <=> 1'] = [-1, null, ' 0', 1];
$tests['\' 0\' <=> -1'] = [1, null, ' 0', -1];
$tests['\' 0\' <=> 0.0'] = [0, null, ' 0', 0.0];
$tests['\' 0\' <=> -1.0'] = [1, null, ' 0', -1.0];
$tests['\' 0\' <=> 1.0'] = [-1, null, ' 0', 1.0];
$tests['\' 0\' <=> \'\''] = [1, null, ' 0', ''];
$tests['\' 0\' <=> \'0\''] = [0, null, ' 0', '0'];
$tests['\' 0\' <=> \'-0\''] = [0, null, ' 0', '-0'];
$tests['\' 0\' <=> \'+0\''] = [0, null, ' 0', '+0'];
$tests['\' 0\' <=> \'0.0\''] = [0, null, ' 0', '0.0'];
$tests['\' 0\' <=> \'-0.0\''] = [0, null, ' 0', '-0.0'];
$tests['\' 0\' <=> \'+0.0\''] = [0, null, ' 0', '+0.0'];
$tests['\' 0\' <=> \'1.0\''] = [-1, null, ' 0', '1.0'];
$tests['\' 0\' <=> \'-1.0\''] = [1, null, ' 0', '-1.0'];
$tests['\' 0\' <=> \'+1.0\''] = [-1, null, ' 0', '+1.0'];
$tests['\' 0\' <=> \'-1\''] = [1, null, ' 0', '-1'];
$tests['\' 0\' <=> \'+1\''] = [-1, null, ' 0', '+1'];
$tests['\' 0\' <=> \'1\''] = [-1, null, ' 0', '1'];
$tests['\' 0\' <=> \' 0\''] = [0, null, ' 0', ' 0'];
$tests['\' 0\' <=> \' -0\''] = [0, null, ' 0', ' -0'];
$tests['\' 0\' <=> \' +0\''] = [0, null, ' 0', ' +0'];
$tests['\' 0\' <=> \' 0\' '] = [0, null, ' 0', ' 0 '];
$tests['\' 0\' <=> \' -0\''] = [0, null, ' 0', ' -0 '];
$tests['\' 0\' <=> \' +0\''] = [0, null, ' 0', ' +0 '];
$tests['\' 0\' <=> \'0\' '] = [0, null, ' 0', '0 '];
$tests['\' 0\' <=> \'-0\''] = [0, null, ' 0', '-0 '];
$tests['\' 0\' <=> \'+0\''] = [0, null, ' 0', '+0 '];
$tests['\' 0\' <=> \' 0.0\''] = [0, null, ' 0', ' 0.0'];
$tests['\' 0\' <=> \' -0.0\''] = [0, null, ' 0', ' -0.0'];
$tests['\' 0\' <=> \' +0.0\''] = [0, null, ' 0', ' +0.0'];
$tests['\' 0\' <=> \' 0.0\' '] = [0, null, ' 0', ' 0.0 '];
$tests['\' 0\' <=> \' -0.0\''] = [0, null, ' 0', ' -0.0 '];
$tests['\' 0\' <=> \' +0.0\''] = [0, null, ' 0', ' +0.0 '];
$tests['\' 0\' <=> \'0.0\' '] = [0, null, ' 0', '0.0 '];
$tests['\' 0\' <=> \'-0.0\''] = [0, null, ' 0', '-0.0 '];
$tests['\' 0\' <=> \'+0.0\''] = [0, null, ' 0', '+0.0 '];
$tests['\' 0\' <=> \'03\''] = [-1, null, ' 0', '03'];
$tests['\' 0\' <=> \'2abc\''] = [-1, null, ' 0', '2abc'];
$tests['\' 0\' <=> \'2.5abc\''] = [-1, null, ' 0', '2.5abc'];
$tests['\' 0\' <=> \'abc2abc\''] = [-1, null, ' 0', 'abc2abc'];
$tests['\' 0\' <=> \'abc2.5abc\''] = [-1, null, ' 0', 'abc2.5abc'];
$tests['\' 0\' <=> \'\\0\''] = [1, null, ' 0', hex2bin('00')];
$tests['\' 0\' <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [-1, null, ' 0', hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['\' 0\' <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [1, null, ' 0', hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['\' 0\' <=> 12.0000000000001'] = [-1, null, ' 0', 12.0000000000001];
$tests['\' 0\' <=> 12.000000000000002'] = [-1, null, ' 0', 12.000000000000002];
$tests['\' 0\' <=> pi'] = [-1, null, ' 0', M_PI];
$tests['\' 0\' <=> int(max)'] = [-1, null, ' 0', PHP_INT_MAX];
$tests['\' 0\' <=> int(min)'] = [1, null, ' 0', PHP_INT_MIN];
$tests['\' 0\' <=> float(epsilon)'] = [-1, null, ' 0', PHP_FLOAT_EPSILON];
$tests['\' 0\' <=> float(min)'] = [-1, null, ' 0', PHP_FLOAT_MIN];
$tests['\' 0\' <=> float(max)'] = [-1, null, ' 0', PHP_FLOAT_MAX];
$tests['\' 0\' <=> float(inf)'] = [-1, null, ' 0', INF];
$tests['\' 0\' <=> float(-inf)'] = [1, null, ' 0', -INF];
$tests['\' 0\' <=> float(nan)'] = [1, null, ' 0', NAN];
$tests['\' 0\' <=> $closure1'] = [-1, null, ' 0', $closure1];
$tests['\' 0\' <=> $closure2'] = [-1, null, ' 0', $closure2];
$tests['\' 0\' <=> $fh1'] = [-1, null, ' 0', $fh1];
$tests['\' 0\' <=> $fh2'] = [-1, null, ' 0', $fh2];
$tests['\' 0\' <=> $proc'] = [-1, null, ' 0', $proc];
$tests['\' 0\' <=> DateTime(2024-01-01T12:00:00Z)'] = [-1, null, ' 0', unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\' 0\' <=> DateTime(2024-01-01T12:00:01Z)'] = [-1, null, ' 0', unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\' 0\' <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [-1, null, ' 0', unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\' 0\' <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [-1, null, ' 0', unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\' 0\' <=> []'] = [-1, null, ' 0', []];
$tests['\' 0\' <=> [[]]'] = [-1, null, ' 0', [[]]];
$tests['\' 0\' <=> [1 => []]'] = [-1, null, ' 0', [1 => []]];
$tests['\' 0\' <=> [1 => null]'] = [-1, null, ' 0', [1 => null]];
$tests['\' 0\' <=> [0]'] = [-1, null, ' 0', [0]];
$tests['\' 0\' <=> [0.0]'] = [-1, null, ' 0', [0.0]];
$tests['\' 0\' <=> [null]'] = [-1, null, ' 0', [null]];
$tests['\' 0\' <=> [false]'] = [-1, null, ' 0', [false]];
$tests['\' 0\' <=> [true]'] = [-1, null, ' 0', [true]];
$tests['\' 0\' <=> [\'\']'] = [-1, null, ' 0', ['']];
$tests['\' 0\' <=> [a, b, c]'] = [-1, null, ' 0', ['a','b','c']];
$tests['\' 0\' <=> [$fh1]'] = [-1, null, ' 0', [$fh1]];
$tests['\' 0\' <=> [foo => bar]'] = [-1, null, ' 0', ['foo' => 'bar']];
$tests['\' 0\' <=> object[]'] = [-1, null, ' 0', (object) []];
$tests['\' 0\' <=> object[[]]'] = [-1, null, ' 0', (object) [[]]];
$tests['\' 0\' <=> object[1 => []]'] = [-1, null, ' 0', (object) [1 => []]];
$tests['\' 0\' <=> object[1 => null]'] = [-1, null, ' 0', (object) [1 => null]];
$tests['\' 0\' <=> object[0]'] = [-1, null, ' 0', (object) [0]];
$tests['\' 0\' <=> object[0.0]'] = [-1, null, ' 0', (object) [0.0]];
$tests['\' 0\' <=> object[null]'] = [-1, null, ' 0', (object) [null]];
$tests['\' 0\' <=> object[false]'] = [-1, null, ' 0', (object) [false]];
$tests['\' 0\' <=> object[true]'] = [-1, null, ' 0', (object) [true]];
$tests['\' 0\' <=> object[\'\']'] = [-1, null, ' 0', (object) ['']];
$tests['\' 0\' <=> object[a, b, c]'] = [-1, null, ' 0', (object) ['a','b','c']];
$tests['\' 0\' <=> object[$fh1]'] = [-1, null, ' 0', (object) [$fh1]];
$tests['\' 0\' <=> object[foo => bar]'] = [-1, null, ' 0', (object) ['foo' => 'bar']];
$tests['\' -0\' <=> false'] = [1, null, ' -0', false];
$tests['\' -0\' <=> true'] = [0, null, ' -0', true];
$tests['\' -0\' <=> null'] = [1, null, ' -0', null];
$tests['\' -0\' <=> 0'] = [0, null, ' -0', 0];
$tests['\' -0\' <=> 1'] = [-1, null, ' -0', 1];
$tests['\' -0\' <=> -1'] = [1, null, ' -0', -1];
$tests['\' -0\' <=> 0.0'] = [0, null, ' -0', 0.0];
$tests['\' -0\' <=> -1.0'] = [1, null, ' -0', -1.0];
$tests['\' -0\' <=> 1.0'] = [-1, null, ' -0', 1.0];
$tests['\' -0\' <=> \'\''] = [1, null, ' -0', ''];
$tests['\' -0\' <=> \'0\''] = [0, null, ' -0', '0'];
$tests['\' -0\' <=> \'-0\''] = [0, null, ' -0', '-0'];
$tests['\' -0\' <=> \'+0\''] = [0, null, ' -0', '+0'];
$tests['\' -0\' <=> \'0.0\''] = [0, null, ' -0', '0.0'];
$tests['\' -0\' <=> \'-0.0\''] = [0, null, ' -0', '-0.0'];
$tests['\' -0\' <=> \'+0.0\''] = [0, null, ' -0', '+0.0'];
$tests['\' -0\' <=> \'1.0\''] = [-1, null, ' -0', '1.0'];
$tests['\' -0\' <=> \'-1.0\''] = [1, null, ' -0', '-1.0'];
$tests['\' -0\' <=> \'+1.0\''] = [-1, null, ' -0', '+1.0'];
$tests['\' -0\' <=> \'-1\''] = [1, null, ' -0', '-1'];
$tests['\' -0\' <=> \'+1\''] = [-1, null, ' -0', '+1'];
$tests['\' -0\' <=> \'1\''] = [-1, null, ' -0', '1'];
$tests['\' -0\' <=> \' 0\''] = [0, null, ' -0', ' 0'];
$tests['\' -0\' <=> \' -0\''] = [0, null, ' -0', ' -0'];
$tests['\' -0\' <=> \' +0\''] = [0, null, ' -0', ' +0'];
$tests['\' -0\' <=> \' 0\' '] = [0, null, ' -0', ' 0 '];
$tests['\' -0\' <=> \' -0\''] = [0, null, ' -0', ' -0 '];
$tests['\' -0\' <=> \' +0\''] = [0, null, ' -0', ' +0 '];
$tests['\' -0\' <=> \'0\' '] = [0, null, ' -0', '0 '];
$tests['\' -0\' <=> \'-0\''] = [0, null, ' -0', '-0 '];
$tests['\' -0\' <=> \'+0\''] = [0, null, ' -0', '+0 '];
$tests['\' -0\' <=> \' 0.0\''] = [0, null, ' -0', ' 0.0'];
$tests['\' -0\' <=> \' -0.0\''] = [0, null, ' -0', ' -0.0'];
$tests['\' -0\' <=> \' +0.0\''] = [0, null, ' -0', ' +0.0'];
$tests['\' -0\' <=> \' 0.0\' '] = [0, null, ' -0', ' 0.0 '];
$tests['\' -0\' <=> \' -0.0\''] = [0, null, ' -0', ' -0.0 '];
$tests['\' -0\' <=> \' +0.0\''] = [0, null, ' -0', ' +0.0 '];
$tests['\' -0\' <=> \'0.0\' '] = [0, null, ' -0', '0.0 '];
$tests['\' -0\' <=> \'-0.0\''] = [0, null, ' -0', '-0.0 '];
$tests['\' -0\' <=> \'+0.0\''] = [0, null, ' -0', '+0.0 '];
$tests['\' -0\' <=> \'03\''] = [-1, null, ' -0', '03'];
$tests['\' -0\' <=> \'2abc\''] = [-1, null, ' -0', '2abc'];
$tests['\' -0\' <=> \'2.5abc\''] = [-1, null, ' -0', '2.5abc'];
$tests['\' -0\' <=> \'abc2abc\''] = [-1, null, ' -0', 'abc2abc'];
$tests['\' -0\' <=> \'abc2.5abc\''] = [-1, null, ' -0', 'abc2.5abc'];
$tests['\' -0\' <=> \'\\0\''] = [1, null, ' -0', hex2bin('00')];
$tests['\' -0\' <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [-1, null, ' -0', hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['\' -0\' <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [1, null, ' -0', hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['\' -0\' <=> 12.0000000000001'] = [-1, null, ' -0', 12.0000000000001];
$tests['\' -0\' <=> 12.000000000000002'] = [-1, null, ' -0', 12.000000000000002];
$tests['\' -0\' <=> pi'] = [-1, null, ' -0', M_PI];
$tests['\' -0\' <=> int(max)'] = [-1, null, ' -0', PHP_INT_MAX];
$tests['\' -0\' <=> int(min)'] = [1, null, ' -0', PHP_INT_MIN];
$tests['\' -0\' <=> float(epsilon)'] = [-1, null, ' -0', PHP_FLOAT_EPSILON];
$tests['\' -0\' <=> float(min)'] = [-1, null, ' -0', PHP_FLOAT_MIN];
$tests['\' -0\' <=> float(max)'] = [-1, null, ' -0', PHP_FLOAT_MAX];
$tests['\' -0\' <=> float(inf)'] = [-1, null, ' -0', INF];
$tests['\' -0\' <=> float(-inf)'] = [1, null, ' -0', -INF];
$tests['\' -0\' <=> float(nan)'] = [1, null, ' -0', NAN];
$tests['\' -0\' <=> $closure1'] = [-1, null, ' -0', $closure1];
$tests['\' -0\' <=> $closure2'] = [-1, null, ' -0', $closure2];
$tests['\' -0\' <=> $fh1'] = [-1, null, ' -0', $fh1];
$tests['\' -0\' <=> $fh2'] = [-1, null, ' -0', $fh2];
$tests['\' -0\' <=> $proc'] = [-1, null, ' -0', $proc];
$tests['\' -0\' <=> DateTime(2024-01-01T12:00:00Z)'] = [-1, null, ' -0', unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\' -0\' <=> DateTime(2024-01-01T12:00:01Z)'] = [-1, null, ' -0', unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\' -0\' <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [-1, null, ' -0', unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\' -0\' <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [-1, null, ' -0', unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\' -0\' <=> []'] = [-1, null, ' -0', []];
$tests['\' -0\' <=> [[]]'] = [-1, null, ' -0', [[]]];
$tests['\' -0\' <=> [1 => []]'] = [-1, null, ' -0', [1 => []]];
$tests['\' -0\' <=> [1 => null]'] = [-1, null, ' -0', [1 => null]];
$tests['\' -0\' <=> [0]'] = [-1, null, ' -0', [0]];
$tests['\' -0\' <=> [0.0]'] = [-1, null, ' -0', [0.0]];
$tests['\' -0\' <=> [null]'] = [-1, null, ' -0', [null]];
$tests['\' -0\' <=> [false]'] = [-1, null, ' -0', [false]];
$tests['\' -0\' <=> [true]'] = [-1, null, ' -0', [true]];
$tests['\' -0\' <=> [\'\']'] = [-1, null, ' -0', ['']];
$tests['\' -0\' <=> [a, b, c]'] = [-1, null, ' -0', ['a','b','c']];
$tests['\' -0\' <=> [$fh1]'] = [-1, null, ' -0', [$fh1]];
$tests['\' -0\' <=> [foo => bar]'] = [-1, null, ' -0', ['foo' => 'bar']];
$tests['\' -0\' <=> object[]'] = [-1, null, ' -0', (object) []];
$tests['\' -0\' <=> object[[]]'] = [-1, null, ' -0', (object) [[]]];
$tests['\' -0\' <=> object[1 => []]'] = [-1, null, ' -0', (object) [1 => []]];
$tests['\' -0\' <=> object[1 => null]'] = [-1, null, ' -0', (object) [1 => null]];
$tests['\' -0\' <=> object[0]'] = [-1, null, ' -0', (object) [0]];
$tests['\' -0\' <=> object[0.0]'] = [-1, null, ' -0', (object) [0.0]];
$tests['\' -0\' <=> object[null]'] = [-1, null, ' -0', (object) [null]];
$tests['\' -0\' <=> object[false]'] = [-1, null, ' -0', (object) [false]];
$tests['\' -0\' <=> object[true]'] = [-1, null, ' -0', (object) [true]];
$tests['\' -0\' <=> object[\'\']'] = [-1, null, ' -0', (object) ['']];
$tests['\' -0\' <=> object[a, b, c]'] = [-1, null, ' -0', (object) ['a','b','c']];
$tests['\' -0\' <=> object[$fh1]'] = [-1, null, ' -0', (object) [$fh1]];
$tests['\' -0\' <=> object[foo => bar]'] = [-1, null, ' -0', (object) ['foo' => 'bar']];
$tests['\' +0\' <=> false'] = [1, null, ' +0', false];
$tests['\' +0\' <=> true'] = [0, null, ' +0', true];
$tests['\' +0\' <=> null'] = [1, null, ' +0', null];
$tests['\' +0\' <=> 0'] = [0, null, ' +0', 0];
$tests['\' +0\' <=> 1'] = [-1, null, ' +0', 1];
$tests['\' +0\' <=> -1'] = [1, null, ' +0', -1];
$tests['\' +0\' <=> 0.0'] = [0, null, ' +0', 0.0];
$tests['\' +0\' <=> -1.0'] = [1, null, ' +0', -1.0];
$tests['\' +0\' <=> 1.0'] = [-1, null, ' +0', 1.0];
$tests['\' +0\' <=> \'\''] = [1, null, ' +0', ''];
$tests['\' +0\' <=> \'0\''] = [0, null, ' +0', '0'];
$tests['\' +0\' <=> \'-0\''] = [0, null, ' +0', '-0'];
$tests['\' +0\' <=> \'+0\''] = [0, null, ' +0', '+0'];
$tests['\' +0\' <=> \'0.0\''] = [0, null, ' +0', '0.0'];
$tests['\' +0\' <=> \'-0.0\''] = [0, null, ' +0', '-0.0'];
$tests['\' +0\' <=> \'+0.0\''] = [0, null, ' +0', '+0.0'];
$tests['\' +0\' <=> \'1.0\''] = [-1, null, ' +0', '1.0'];
$tests['\' +0\' <=> \'-1.0\''] = [1, null, ' +0', '-1.0'];
$tests['\' +0\' <=> \'+1.0\''] = [-1, null, ' +0', '+1.0'];
$tests['\' +0\' <=> \'-1\''] = [1, null, ' +0', '-1'];
$tests['\' +0\' <=> \'+1\''] = [-1, null, ' +0', '+1'];
$tests['\' +0\' <=> \'1\''] = [-1, null, ' +0', '1'];
$tests['\' +0\' <=> \' 0\''] = [0, null, ' +0', ' 0'];
$tests['\' +0\' <=> \' -0\''] = [0, null, ' +0', ' -0'];
$tests['\' +0\' <=> \' +0\''] = [0, null, ' +0', ' +0'];
$tests['\' +0\' <=> \' 0\' '] = [0, null, ' +0', ' 0 '];
$tests['\' +0\' <=> \' -0\''] = [0, null, ' +0', ' -0 '];
$tests['\' +0\' <=> \' +0\''] = [0, null, ' +0', ' +0 '];
$tests['\' +0\' <=> \'0\' '] = [0, null, ' +0', '0 '];
$tests['\' +0\' <=> \'-0\''] = [0, null, ' +0', '-0 '];
$tests['\' +0\' <=> \'+0\''] = [0, null, ' +0', '+0 '];
$tests['\' +0\' <=> \' 0.0\''] = [0, null, ' +0', ' 0.0'];
$tests['\' +0\' <=> \' -0.0\''] = [0, null, ' +0', ' -0.0'];
$tests['\' +0\' <=> \' +0.0\''] = [0, null, ' +0', ' +0.0'];
$tests['\' +0\' <=> \' 0.0\' '] = [0, null, ' +0', ' 0.0 '];
$tests['\' +0\' <=> \' -0.0\''] = [0, null, ' +0', ' -0.0 '];
$tests['\' +0\' <=> \' +0.0\''] = [0, null, ' +0', ' +0.0 '];
$tests['\' +0\' <=> \'0.0\' '] = [0, null, ' +0', '0.0 '];
$tests['\' +0\' <=> \'-0.0\''] = [0, null, ' +0', '-0.0 '];
$tests['\' +0\' <=> \'+0.0\''] = [0, null, ' +0', '+0.0 '];
$tests['\' +0\' <=> \'03\''] = [-1, null, ' +0', '03'];
$tests['\' +0\' <=> \'2abc\''] = [-1, null, ' +0', '2abc'];
$tests['\' +0\' <=> \'2.5abc\''] = [-1, null, ' +0', '2.5abc'];
$tests['\' +0\' <=> \'abc2abc\''] = [-1, null, ' +0', 'abc2abc'];
$tests['\' +0\' <=> \'abc2.5abc\''] = [-1, null, ' +0', 'abc2.5abc'];
$tests['\' +0\' <=> \'\\0\''] = [1, null, ' +0', hex2bin('00')];
$tests['\' +0\' <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [-1, null, ' +0', hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['\' +0\' <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [1, null, ' +0', hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['\' +0\' <=> 12.0000000000001'] = [-1, null, ' +0', 12.0000000000001];
$tests['\' +0\' <=> 12.000000000000002'] = [-1, null, ' +0', 12.000000000000002];
$tests['\' +0\' <=> pi'] = [-1, null, ' +0', M_PI];
$tests['\' +0\' <=> int(max)'] = [-1, null, ' +0', PHP_INT_MAX];
$tests['\' +0\' <=> int(min)'] = [1, null, ' +0', PHP_INT_MIN];
$tests['\' +0\' <=> float(epsilon)'] = [-1, null, ' +0', PHP_FLOAT_EPSILON];
$tests['\' +0\' <=> float(min)'] = [-1, null, ' +0', PHP_FLOAT_MIN];
$tests['\' +0\' <=> float(max)'] = [-1, null, ' +0', PHP_FLOAT_MAX];
$tests['\' +0\' <=> float(inf)'] = [-1, null, ' +0', INF];
$tests['\' +0\' <=> float(-inf)'] = [1, null, ' +0', -INF];
$tests['\' +0\' <=> float(nan)'] = [1, null, ' +0', NAN];
$tests['\' +0\' <=> $closure1'] = [-1, null, ' +0', $closure1];
$tests['\' +0\' <=> $closure2'] = [-1, null, ' +0', $closure2];
$tests['\' +0\' <=> $fh1'] = [-1, null, ' +0', $fh1];
$tests['\' +0\' <=> $fh2'] = [-1, null, ' +0', $fh2];
$tests['\' +0\' <=> $proc'] = [-1, null, ' +0', $proc];
$tests['\' +0\' <=> DateTime(2024-01-01T12:00:00Z)'] = [-1, null, ' +0', unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\' +0\' <=> DateTime(2024-01-01T12:00:01Z)'] = [-1, null, ' +0', unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\' +0\' <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [-1, null, ' +0', unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\' +0\' <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [-1, null, ' +0', unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\' +0\' <=> []'] = [-1, null, ' +0', []];
$tests['\' +0\' <=> [[]]'] = [-1, null, ' +0', [[]]];
$tests['\' +0\' <=> [1 => []]'] = [-1, null, ' +0', [1 => []]];
$tests['\' +0\' <=> [1 => null]'] = [-1, null, ' +0', [1 => null]];
$tests['\' +0\' <=> [0]'] = [-1, null, ' +0', [0]];
$tests['\' +0\' <=> [0.0]'] = [-1, null, ' +0', [0.0]];
$tests['\' +0\' <=> [null]'] = [-1, null, ' +0', [null]];
$tests['\' +0\' <=> [false]'] = [-1, null, ' +0', [false]];
$tests['\' +0\' <=> [true]'] = [-1, null, ' +0', [true]];
$tests['\' +0\' <=> [\'\']'] = [-1, null, ' +0', ['']];
$tests['\' +0\' <=> [a, b, c]'] = [-1, null, ' +0', ['a','b','c']];
$tests['\' +0\' <=> [$fh1]'] = [-1, null, ' +0', [$fh1]];
$tests['\' +0\' <=> [foo => bar]'] = [-1, null, ' +0', ['foo' => 'bar']];
$tests['\' +0\' <=> object[]'] = [-1, null, ' +0', (object) []];
$tests['\' +0\' <=> object[[]]'] = [-1, null, ' +0', (object) [[]]];
$tests['\' +0\' <=> object[1 => []]'] = [-1, null, ' +0', (object) [1 => []]];
$tests['\' +0\' <=> object[1 => null]'] = [-1, null, ' +0', (object) [1 => null]];
$tests['\' +0\' <=> object[0]'] = [-1, null, ' +0', (object) [0]];
$tests['\' +0\' <=> object[0.0]'] = [-1, null, ' +0', (object) [0.0]];
$tests['\' +0\' <=> object[null]'] = [-1, null, ' +0', (object) [null]];
$tests['\' +0\' <=> object[false]'] = [-1, null, ' +0', (object) [false]];
$tests['\' +0\' <=> object[true]'] = [-1, null, ' +0', (object) [true]];
$tests['\' +0\' <=> object[\'\']'] = [-1, null, ' +0', (object) ['']];
$tests['\' +0\' <=> object[a, b, c]'] = [-1, null, ' +0', (object) ['a','b','c']];
$tests['\' +0\' <=> object[$fh1]'] = [-1, null, ' +0', (object) [$fh1]];
$tests['\' +0\' <=> object[foo => bar]'] = [-1, null, ' +0', (object) ['foo' => 'bar']];
$tests['\' 0\'  <=> false'] = [1, null, ' 0 ', false];
$tests['\' 0\'  <=> true'] = [0, null, ' 0 ', true];
$tests['\' 0\'  <=> null'] = [1, null, ' 0 ', null];
$tests['\' 0\'  <=> 0'] = [0, null, ' 0 ', 0];
$tests['\' 0\'  <=> 1'] = [-1, null, ' 0 ', 1];
$tests['\' 0\'  <=> -1'] = [1, null, ' 0 ', -1];
$tests['\' 0\'  <=> 0.0'] = [0, null, ' 0 ', 0.0];
$tests['\' 0\'  <=> -1.0'] = [1, null, ' 0 ', -1.0];
$tests['\' 0\'  <=> 1.0'] = [-1, null, ' 0 ', 1.0];
$tests['\' 0\'  <=> \'\''] = [1, null, ' 0 ', ''];
$tests['\' 0\'  <=> \'0\''] = [0, null, ' 0 ', '0'];
$tests['\' 0\'  <=> \'-0\''] = [0, null, ' 0 ', '-0'];
$tests['\' 0\'  <=> \'+0\''] = [0, null, ' 0 ', '+0'];
$tests['\' 0\'  <=> \'0.0\''] = [0, null, ' 0 ', '0.0'];
$tests['\' 0\'  <=> \'-0.0\''] = [0, null, ' 0 ', '-0.0'];
$tests['\' 0\'  <=> \'+0.0\''] = [0, null, ' 0 ', '+0.0'];
$tests['\' 0\'  <=> \'1.0\''] = [-1, null, ' 0 ', '1.0'];
$tests['\' 0\'  <=> \'-1.0\''] = [1, null, ' 0 ', '-1.0'];
$tests['\' 0\'  <=> \'+1.0\''] = [-1, null, ' 0 ', '+1.0'];
$tests['\' 0\'  <=> \'-1\''] = [1, null, ' 0 ', '-1'];
$tests['\' 0\'  <=> \'+1\''] = [-1, null, ' 0 ', '+1'];
$tests['\' 0\'  <=> \'1\''] = [-1, null, ' 0 ', '1'];
$tests['\' 0\'  <=> \' 0\''] = [0, null, ' 0 ', ' 0'];
$tests['\' 0\'  <=> \' -0\''] = [0, null, ' 0 ', ' -0'];
$tests['\' 0\'  <=> \' +0\''] = [0, null, ' 0 ', ' +0'];
$tests['\' 0\'  <=> \' 0\' '] = [0, null, ' 0 ', ' 0 '];
$tests['\' 0\'  <=> \' -0\''] = [0, null, ' 0 ', ' -0 '];
$tests['\' 0\'  <=> \' +0\''] = [0, null, ' 0 ', ' +0 '];
$tests['\' 0\'  <=> \'0\' '] = [0, null, ' 0 ', '0 '];
$tests['\' 0\'  <=> \'-0\''] = [0, null, ' 0 ', '-0 '];
$tests['\' 0\'  <=> \'+0\''] = [0, null, ' 0 ', '+0 '];
$tests['\' 0\'  <=> \' 0.0\''] = [0, null, ' 0 ', ' 0.0'];
$tests['\' 0\'  <=> \' -0.0\''] = [0, null, ' 0 ', ' -0.0'];
$tests['\' 0\'  <=> \' +0.0\''] = [0, null, ' 0 ', ' +0.0'];
$tests['\' 0\'  <=> \' 0.0\' '] = [0, null, ' 0 ', ' 0.0 '];
$tests['\' 0\'  <=> \' -0.0\''] = [0, null, ' 0 ', ' -0.0 '];
$tests['\' 0\'  <=> \' +0.0\''] = [0, null, ' 0 ', ' +0.0 '];
$tests['\' 0\'  <=> \'0.0\' '] = [0, null, ' 0 ', '0.0 '];
$tests['\' 0\'  <=> \'-0.0\''] = [0, null, ' 0 ', '-0.0 '];
$tests['\' 0\'  <=> \'+0.0\''] = [0, null, ' 0 ', '+0.0 '];
$tests['\' 0\'  <=> \'03\''] = [-1, null, ' 0 ', '03'];
$tests['\' 0\'  <=> \'2abc\''] = [-1, null, ' 0 ', '2abc'];
$tests['\' 0\'  <=> \'2.5abc\''] = [-1, null, ' 0 ', '2.5abc'];
$tests['\' 0\'  <=> \'abc2abc\''] = [-1, null, ' 0 ', 'abc2abc'];
$tests['\' 0\'  <=> \'abc2.5abc\''] = [-1, null, ' 0 ', 'abc2.5abc'];
$tests['\' 0\'  <=> \'\\0\''] = [1, null, ' 0 ', hex2bin('00')];
$tests['\' 0\'  <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [-1, null, ' 0 ', hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['\' 0\'  <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [1, null, ' 0 ', hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['\' 0\'  <=> 12.0000000000001'] = [-1, null, ' 0 ', 12.0000000000001];
$tests['\' 0\'  <=> 12.000000000000002'] = [-1, null, ' 0 ', 12.000000000000002];
$tests['\' 0\'  <=> pi'] = [-1, null, ' 0 ', M_PI];
$tests['\' 0\'  <=> int(max)'] = [-1, null, ' 0 ', PHP_INT_MAX];
$tests['\' 0\'  <=> int(min)'] = [1, null, ' 0 ', PHP_INT_MIN];
$tests['\' 0\'  <=> float(epsilon)'] = [-1, null, ' 0 ', PHP_FLOAT_EPSILON];
$tests['\' 0\'  <=> float(min)'] = [-1, null, ' 0 ', PHP_FLOAT_MIN];
$tests['\' 0\'  <=> float(max)'] = [-1, null, ' 0 ', PHP_FLOAT_MAX];
$tests['\' 0\'  <=> float(inf)'] = [-1, null, ' 0 ', INF];
$tests['\' 0\'  <=> float(-inf)'] = [1, null, ' 0 ', -INF];
$tests['\' 0\'  <=> float(nan)'] = [1, null, ' 0 ', NAN];
$tests['\' 0\'  <=> $closure1'] = [-1, null, ' 0 ', $closure1];
$tests['\' 0\'  <=> $closure2'] = [-1, null, ' 0 ', $closure2];
$tests['\' 0\'  <=> $fh1'] = [-1, null, ' 0 ', $fh1];
$tests['\' 0\'  <=> $fh2'] = [-1, null, ' 0 ', $fh2];
$tests['\' 0\'  <=> $proc'] = [-1, null, ' 0 ', $proc];
$tests['\' 0\'  <=> DateTime(2024-01-01T12:00:00Z)'] = [-1, null, ' 0 ', unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\' 0\'  <=> DateTime(2024-01-01T12:00:01Z)'] = [-1, null, ' 0 ', unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\' 0\'  <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [-1, null, ' 0 ', unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\' 0\'  <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [-1, null, ' 0 ', unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\' 0\'  <=> []'] = [-1, null, ' 0 ', []];
$tests['\' 0\'  <=> [[]]'] = [-1, null, ' 0 ', [[]]];
$tests['\' 0\'  <=> [1 => []]'] = [-1, null, ' 0 ', [1 => []]];
$tests['\' 0\'  <=> [1 => null]'] = [-1, null, ' 0 ', [1 => null]];
$tests['\' 0\'  <=> [0]'] = [-1, null, ' 0 ', [0]];
$tests['\' 0\'  <=> [0.0]'] = [-1, null, ' 0 ', [0.0]];
$tests['\' 0\'  <=> [null]'] = [-1, null, ' 0 ', [null]];
$tests['\' 0\'  <=> [false]'] = [-1, null, ' 0 ', [false]];
$tests['\' 0\'  <=> [true]'] = [-1, null, ' 0 ', [true]];
$tests['\' 0\'  <=> [\'\']'] = [-1, null, ' 0 ', ['']];
$tests['\' 0\'  <=> [a, b, c]'] = [-1, null, ' 0 ', ['a','b','c']];
$tests['\' 0\'  <=> [$fh1]'] = [-1, null, ' 0 ', [$fh1]];
$tests['\' 0\'  <=> [foo => bar]'] = [-1, null, ' 0 ', ['foo' => 'bar']];
$tests['\' 0\'  <=> object[]'] = [-1, null, ' 0 ', (object) []];
$tests['\' 0\'  <=> object[[]]'] = [-1, null, ' 0 ', (object) [[]]];
$tests['\' 0\'  <=> object[1 => []]'] = [-1, null, ' 0 ', (object) [1 => []]];
$tests['\' 0\'  <=> object[1 => null]'] = [-1, null, ' 0 ', (object) [1 => null]];
$tests['\' 0\'  <=> object[0]'] = [-1, null, ' 0 ', (object) [0]];
$tests['\' 0\'  <=> object[0.0]'] = [-1, null, ' 0 ', (object) [0.0]];
$tests['\' 0\'  <=> object[null]'] = [-1, null, ' 0 ', (object) [null]];
$tests['\' 0\'  <=> object[false]'] = [-1, null, ' 0 ', (object) [false]];
$tests['\' 0\'  <=> object[true]'] = [-1, null, ' 0 ', (object) [true]];
$tests['\' 0\'  <=> object[\'\']'] = [-1, null, ' 0 ', (object) ['']];
$tests['\' 0\'  <=> object[a, b, c]'] = [-1, null, ' 0 ', (object) ['a','b','c']];
$tests['\' 0\'  <=> object[$fh1]'] = [-1, null, ' 0 ', (object) [$fh1]];
$tests['\' 0\'  <=> object[foo => bar]'] = [-1, null, ' 0 ', (object) ['foo' => 'bar']];
$tests['\' -0\' <=> false'] = [1, null, ' -0 ', false];
$tests['\' -0\' <=> true'] = [0, null, ' -0 ', true];
$tests['\' -0\' <=> null'] = [1, null, ' -0 ', null];
$tests['\' -0\' <=> 0'] = [0, null, ' -0 ', 0];
$tests['\' -0\' <=> 1'] = [-1, null, ' -0 ', 1];
$tests['\' -0\' <=> -1'] = [1, null, ' -0 ', -1];
$tests['\' -0\' <=> 0.0'] = [0, null, ' -0 ', 0.0];
$tests['\' -0\' <=> -1.0'] = [1, null, ' -0 ', -1.0];
$tests['\' -0\' <=> 1.0'] = [-1, null, ' -0 ', 1.0];
$tests['\' -0\' <=> \'\''] = [1, null, ' -0 ', ''];
$tests['\' -0\' <=> \'0\''] = [0, null, ' -0 ', '0'];
$tests['\' -0\' <=> \'-0\''] = [0, null, ' -0 ', '-0'];
$tests['\' -0\' <=> \'+0\''] = [0, null, ' -0 ', '+0'];
$tests['\' -0\' <=> \'0.0\''] = [0, null, ' -0 ', '0.0'];
$tests['\' -0\' <=> \'-0.0\''] = [0, null, ' -0 ', '-0.0'];
$tests['\' -0\' <=> \'+0.0\''] = [0, null, ' -0 ', '+0.0'];
$tests['\' -0\' <=> \'1.0\''] = [-1, null, ' -0 ', '1.0'];
$tests['\' -0\' <=> \'-1.0\''] = [1, null, ' -0 ', '-1.0'];
$tests['\' -0\' <=> \'+1.0\''] = [-1, null, ' -0 ', '+1.0'];
$tests['\' -0\' <=> \'-1\''] = [1, null, ' -0 ', '-1'];
$tests['\' -0\' <=> \'+1\''] = [-1, null, ' -0 ', '+1'];
$tests['\' -0\' <=> \'1\''] = [-1, null, ' -0 ', '1'];
$tests['\' -0\' <=> \' 0\''] = [0, null, ' -0 ', ' 0'];
$tests['\' -0\' <=> \' -0\''] = [0, null, ' -0 ', ' -0'];
$tests['\' -0\' <=> \' +0\''] = [0, null, ' -0 ', ' +0'];
$tests['\' -0\' <=> \' 0\' '] = [0, null, ' -0 ', ' 0 '];
$tests['\' -0\' <=> \' -0\''] = [0, null, ' -0 ', ' -0 '];
$tests['\' -0\' <=> \' +0\''] = [0, null, ' -0 ', ' +0 '];
$tests['\' -0\' <=> \'0\' '] = [0, null, ' -0 ', '0 '];
$tests['\' -0\' <=> \'-0\''] = [0, null, ' -0 ', '-0 '];
$tests['\' -0\' <=> \'+0\''] = [0, null, ' -0 ', '+0 '];
$tests['\' -0\' <=> \' 0.0\''] = [0, null, ' -0 ', ' 0.0'];
$tests['\' -0\' <=> \' -0.0\''] = [0, null, ' -0 ', ' -0.0'];
$tests['\' -0\' <=> \' +0.0\''] = [0, null, ' -0 ', ' +0.0'];
$tests['\' -0\' <=> \' 0.0\' '] = [0, null, ' -0 ', ' 0.0 '];
$tests['\' -0\' <=> \' -0.0\''] = [0, null, ' -0 ', ' -0.0 '];
$tests['\' -0\' <=> \' +0.0\''] = [0, null, ' -0 ', ' +0.0 '];
$tests['\' -0\' <=> \'0.0\' '] = [0, null, ' -0 ', '0.0 '];
$tests['\' -0\' <=> \'-0.0\''] = [0, null, ' -0 ', '-0.0 '];
$tests['\' -0\' <=> \'+0.0\''] = [0, null, ' -0 ', '+0.0 '];
$tests['\' -0\' <=> \'03\''] = [-1, null, ' -0 ', '03'];
$tests['\' -0\' <=> \'2abc\''] = [-1, null, ' -0 ', '2abc'];
$tests['\' -0\' <=> \'2.5abc\''] = [-1, null, ' -0 ', '2.5abc'];
$tests['\' -0\' <=> \'abc2abc\''] = [-1, null, ' -0 ', 'abc2abc'];
$tests['\' -0\' <=> \'abc2.5abc\''] = [-1, null, ' -0 ', 'abc2.5abc'];
$tests['\' -0\' <=> \'\\0\''] = [1, null, ' -0 ', hex2bin('00')];
$tests['\' -0\' <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [-1, null, ' -0 ', hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['\' -0\' <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [1, null, ' -0 ', hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['\' -0\' <=> 12.0000000000001'] = [-1, null, ' -0 ', 12.0000000000001];
$tests['\' -0\' <=> 12.000000000000002'] = [-1, null, ' -0 ', 12.000000000000002];
$tests['\' -0\' <=> pi'] = [-1, null, ' -0 ', M_PI];
$tests['\' -0\' <=> int(max)'] = [-1, null, ' -0 ', PHP_INT_MAX];
$tests['\' -0\' <=> int(min)'] = [1, null, ' -0 ', PHP_INT_MIN];
$tests['\' -0\' <=> float(epsilon)'] = [-1, null, ' -0 ', PHP_FLOAT_EPSILON];
$tests['\' -0\' <=> float(min)'] = [-1, null, ' -0 ', PHP_FLOAT_MIN];
$tests['\' -0\' <=> float(max)'] = [-1, null, ' -0 ', PHP_FLOAT_MAX];
$tests['\' -0\' <=> float(inf)'] = [-1, null, ' -0 ', INF];
$tests['\' -0\' <=> float(-inf)'] = [1, null, ' -0 ', -INF];
$tests['\' -0\' <=> float(nan)'] = [1, null, ' -0 ', NAN];
$tests['\' -0\' <=> $closure1'] = [-1, null, ' -0 ', $closure1];
$tests['\' -0\' <=> $closure2'] = [-1, null, ' -0 ', $closure2];
$tests['\' -0\' <=> $fh1'] = [-1, null, ' -0 ', $fh1];
$tests['\' -0\' <=> $fh2'] = [-1, null, ' -0 ', $fh2];
$tests['\' -0\' <=> $proc'] = [-1, null, ' -0 ', $proc];
$tests['\' -0\' <=> DateTime(2024-01-01T12:00:00Z)'] = [-1, null, ' -0 ', unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\' -0\' <=> DateTime(2024-01-01T12:00:01Z)'] = [-1, null, ' -0 ', unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\' -0\' <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [-1, null, ' -0 ', unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\' -0\' <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [-1, null, ' -0 ', unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\' -0\' <=> []'] = [-1, null, ' -0 ', []];
$tests['\' -0\' <=> [[]]'] = [-1, null, ' -0 ', [[]]];
$tests['\' -0\' <=> [1 => []]'] = [-1, null, ' -0 ', [1 => []]];
$tests['\' -0\' <=> [1 => null]'] = [-1, null, ' -0 ', [1 => null]];
$tests['\' -0\' <=> [0]'] = [-1, null, ' -0 ', [0]];
$tests['\' -0\' <=> [0.0]'] = [-1, null, ' -0 ', [0.0]];
$tests['\' -0\' <=> [null]'] = [-1, null, ' -0 ', [null]];
$tests['\' -0\' <=> [false]'] = [-1, null, ' -0 ', [false]];
$tests['\' -0\' <=> [true]'] = [-1, null, ' -0 ', [true]];
$tests['\' -0\' <=> [\'\']'] = [-1, null, ' -0 ', ['']];
$tests['\' -0\' <=> [a, b, c]'] = [-1, null, ' -0 ', ['a','b','c']];
$tests['\' -0\' <=> [$fh1]'] = [-1, null, ' -0 ', [$fh1]];
$tests['\' -0\' <=> [foo => bar]'] = [-1, null, ' -0 ', ['foo' => 'bar']];
$tests['\' -0\' <=> object[]'] = [-1, null, ' -0 ', (object) []];
$tests['\' -0\' <=> object[[]]'] = [-1, null, ' -0 ', (object) [[]]];
$tests['\' -0\' <=> object[1 => []]'] = [-1, null, ' -0 ', (object) [1 => []]];
$tests['\' -0\' <=> object[1 => null]'] = [-1, null, ' -0 ', (object) [1 => null]];
$tests['\' -0\' <=> object[0]'] = [-1, null, ' -0 ', (object) [0]];
$tests['\' -0\' <=> object[0.0]'] = [-1, null, ' -0 ', (object) [0.0]];
$tests['\' -0\' <=> object[null]'] = [-1, null, ' -0 ', (object) [null]];
$tests['\' -0\' <=> object[false]'] = [-1, null, ' -0 ', (object) [false]];
$tests['\' -0\' <=> object[true]'] = [-1, null, ' -0 ', (object) [true]];
$tests['\' -0\' <=> object[\'\']'] = [-1, null, ' -0 ', (object) ['']];
$tests['\' -0\' <=> object[a, b, c]'] = [-1, null, ' -0 ', (object) ['a','b','c']];
$tests['\' -0\' <=> object[$fh1]'] = [-1, null, ' -0 ', (object) [$fh1]];
$tests['\' -0\' <=> object[foo => bar]'] = [-1, null, ' -0 ', (object) ['foo' => 'bar']];
$tests['\' +0\' <=> false'] = [1, null, ' +0 ', false];
$tests['\' +0\' <=> true'] = [0, null, ' +0 ', true];
$tests['\' +0\' <=> null'] = [1, null, ' +0 ', null];
$tests['\' +0\' <=> 0'] = [0, null, ' +0 ', 0];
$tests['\' +0\' <=> 1'] = [-1, null, ' +0 ', 1];
$tests['\' +0\' <=> -1'] = [1, null, ' +0 ', -1];
$tests['\' +0\' <=> 0.0'] = [0, null, ' +0 ', 0.0];
$tests['\' +0\' <=> -1.0'] = [1, null, ' +0 ', -1.0];
$tests['\' +0\' <=> 1.0'] = [-1, null, ' +0 ', 1.0];
$tests['\' +0\' <=> \'\''] = [1, null, ' +0 ', ''];
$tests['\' +0\' <=> \'0\''] = [0, null, ' +0 ', '0'];
$tests['\' +0\' <=> \'-0\''] = [0, null, ' +0 ', '-0'];
$tests['\' +0\' <=> \'+0\''] = [0, null, ' +0 ', '+0'];
$tests['\' +0\' <=> \'0.0\''] = [0, null, ' +0 ', '0.0'];
$tests['\' +0\' <=> \'-0.0\''] = [0, null, ' +0 ', '-0.0'];
$tests['\' +0\' <=> \'+0.0\''] = [0, null, ' +0 ', '+0.0'];
$tests['\' +0\' <=> \'1.0\''] = [-1, null, ' +0 ', '1.0'];
$tests['\' +0\' <=> \'-1.0\''] = [1, null, ' +0 ', '-1.0'];
$tests['\' +0\' <=> \'+1.0\''] = [-1, null, ' +0 ', '+1.0'];
$tests['\' +0\' <=> \'-1\''] = [1, null, ' +0 ', '-1'];
$tests['\' +0\' <=> \'+1\''] = [-1, null, ' +0 ', '+1'];
$tests['\' +0\' <=> \'1\''] = [-1, null, ' +0 ', '1'];
$tests['\' +0\' <=> \' 0\''] = [0, null, ' +0 ', ' 0'];
$tests['\' +0\' <=> \' -0\''] = [0, null, ' +0 ', ' -0'];
$tests['\' +0\' <=> \' +0\''] = [0, null, ' +0 ', ' +0'];
$tests['\' +0\' <=> \' 0\' '] = [0, null, ' +0 ', ' 0 '];
$tests['\' +0\' <=> \' -0\''] = [0, null, ' +0 ', ' -0 '];
$tests['\' +0\' <=> \' +0\''] = [0, null, ' +0 ', ' +0 '];
$tests['\' +0\' <=> \'0\' '] = [0, null, ' +0 ', '0 '];
$tests['\' +0\' <=> \'-0\''] = [0, null, ' +0 ', '-0 '];
$tests['\' +0\' <=> \'+0\''] = [0, null, ' +0 ', '+0 '];
$tests['\' +0\' <=> \' 0.0\''] = [0, null, ' +0 ', ' 0.0'];
$tests['\' +0\' <=> \' -0.0\''] = [0, null, ' +0 ', ' -0.0'];
$tests['\' +0\' <=> \' +0.0\''] = [0, null, ' +0 ', ' +0.0'];
$tests['\' +0\' <=> \' 0.0\' '] = [0, null, ' +0 ', ' 0.0 '];
$tests['\' +0\' <=> \' -0.0\''] = [0, null, ' +0 ', ' -0.0 '];
$tests['\' +0\' <=> \' +0.0\''] = [0, null, ' +0 ', ' +0.0 '];
$tests['\' +0\' <=> \'0.0\' '] = [0, null, ' +0 ', '0.0 '];
$tests['\' +0\' <=> \'-0.0\''] = [0, null, ' +0 ', '-0.0 '];
$tests['\' +0\' <=> \'+0.0\''] = [0, null, ' +0 ', '+0.0 '];
$tests['\' +0\' <=> \'03\''] = [-1, null, ' +0 ', '03'];
$tests['\' +0\' <=> \'2abc\''] = [-1, null, ' +0 ', '2abc'];
$tests['\' +0\' <=> \'2.5abc\''] = [-1, null, ' +0 ', '2.5abc'];
$tests['\' +0\' <=> \'abc2abc\''] = [-1, null, ' +0 ', 'abc2abc'];
$tests['\' +0\' <=> \'abc2.5abc\''] = [-1, null, ' +0 ', 'abc2.5abc'];
$tests['\' +0\' <=> \'\\0\''] = [1, null, ' +0 ', hex2bin('00')];
$tests['\' +0\' <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [-1, null, ' +0 ', hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['\' +0\' <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [1, null, ' +0 ', hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['\' +0\' <=> 12.0000000000001'] = [-1, null, ' +0 ', 12.0000000000001];
$tests['\' +0\' <=> 12.000000000000002'] = [-1, null, ' +0 ', 12.000000000000002];
$tests['\' +0\' <=> pi'] = [-1, null, ' +0 ', M_PI];
$tests['\' +0\' <=> int(max)'] = [-1, null, ' +0 ', PHP_INT_MAX];
$tests['\' +0\' <=> int(min)'] = [1, null, ' +0 ', PHP_INT_MIN];
$tests['\' +0\' <=> float(epsilon)'] = [-1, null, ' +0 ', PHP_FLOAT_EPSILON];
$tests['\' +0\' <=> float(min)'] = [-1, null, ' +0 ', PHP_FLOAT_MIN];
$tests['\' +0\' <=> float(max)'] = [-1, null, ' +0 ', PHP_FLOAT_MAX];
$tests['\' +0\' <=> float(inf)'] = [-1, null, ' +0 ', INF];
$tests['\' +0\' <=> float(-inf)'] = [1, null, ' +0 ', -INF];
$tests['\' +0\' <=> float(nan)'] = [1, null, ' +0 ', NAN];
$tests['\' +0\' <=> $closure1'] = [-1, null, ' +0 ', $closure1];
$tests['\' +0\' <=> $closure2'] = [-1, null, ' +0 ', $closure2];
$tests['\' +0\' <=> $fh1'] = [-1, null, ' +0 ', $fh1];
$tests['\' +0\' <=> $fh2'] = [-1, null, ' +0 ', $fh2];
$tests['\' +0\' <=> $proc'] = [-1, null, ' +0 ', $proc];
$tests['\' +0\' <=> DateTime(2024-01-01T12:00:00Z)'] = [-1, null, ' +0 ', unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\' +0\' <=> DateTime(2024-01-01T12:00:01Z)'] = [-1, null, ' +0 ', unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\' +0\' <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [-1, null, ' +0 ', unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\' +0\' <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [-1, null, ' +0 ', unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\' +0\' <=> []'] = [-1, null, ' +0 ', []];
$tests['\' +0\' <=> [[]]'] = [-1, null, ' +0 ', [[]]];
$tests['\' +0\' <=> [1 => []]'] = [-1, null, ' +0 ', [1 => []]];
$tests['\' +0\' <=> [1 => null]'] = [-1, null, ' +0 ', [1 => null]];
$tests['\' +0\' <=> [0]'] = [-1, null, ' +0 ', [0]];
$tests['\' +0\' <=> [0.0]'] = [-1, null, ' +0 ', [0.0]];
$tests['\' +0\' <=> [null]'] = [-1, null, ' +0 ', [null]];
$tests['\' +0\' <=> [false]'] = [-1, null, ' +0 ', [false]];
$tests['\' +0\' <=> [true]'] = [-1, null, ' +0 ', [true]];
$tests['\' +0\' <=> [\'\']'] = [-1, null, ' +0 ', ['']];
$tests['\' +0\' <=> [a, b, c]'] = [-1, null, ' +0 ', ['a','b','c']];
$tests['\' +0\' <=> [$fh1]'] = [-1, null, ' +0 ', [$fh1]];
$tests['\' +0\' <=> [foo => bar]'] = [-1, null, ' +0 ', ['foo' => 'bar']];
$tests['\' +0\' <=> object[]'] = [-1, null, ' +0 ', (object) []];
$tests['\' +0\' <=> object[[]]'] = [-1, null, ' +0 ', (object) [[]]];
$tests['\' +0\' <=> object[1 => []]'] = [-1, null, ' +0 ', (object) [1 => []]];
$tests['\' +0\' <=> object[1 => null]'] = [-1, null, ' +0 ', (object) [1 => null]];
$tests['\' +0\' <=> object[0]'] = [-1, null, ' +0 ', (object) [0]];
$tests['\' +0\' <=> object[0.0]'] = [-1, null, ' +0 ', (object) [0.0]];
$tests['\' +0\' <=> object[null]'] = [-1, null, ' +0 ', (object) [null]];
$tests['\' +0\' <=> object[false]'] = [-1, null, ' +0 ', (object) [false]];
$tests['\' +0\' <=> object[true]'] = [-1, null, ' +0 ', (object) [true]];
$tests['\' +0\' <=> object[\'\']'] = [-1, null, ' +0 ', (object) ['']];
$tests['\' +0\' <=> object[a, b, c]'] = [-1, null, ' +0 ', (object) ['a','b','c']];
$tests['\' +0\' <=> object[$fh1]'] = [-1, null, ' +0 ', (object) [$fh1]];
$tests['\' +0\' <=> object[foo => bar]'] = [-1, null, ' +0 ', (object) ['foo' => 'bar']];
$tests['\'0\'  <=> false'] = [1, null, '0 ', false];
$tests['\'0\'  <=> true'] = [0, null, '0 ', true];
$tests['\'0\'  <=> null'] = [1, null, '0 ', null];
$tests['\'0\'  <=> 0'] = [0, null, '0 ', 0];
$tests['\'0\'  <=> 1'] = [-1, null, '0 ', 1];
$tests['\'0\'  <=> -1'] = [1, null, '0 ', -1];
$tests['\'0\'  <=> 0.0'] = [0, null, '0 ', 0.0];
$tests['\'0\'  <=> -1.0'] = [1, null, '0 ', -1.0];
$tests['\'0\'  <=> 1.0'] = [-1, null, '0 ', 1.0];
$tests['\'0\'  <=> \'\''] = [1, null, '0 ', ''];
$tests['\'0\'  <=> \'0\''] = [0, null, '0 ', '0'];
$tests['\'0\'  <=> \'-0\''] = [0, null, '0 ', '-0'];
$tests['\'0\'  <=> \'+0\''] = [0, null, '0 ', '+0'];
$tests['\'0\'  <=> \'0.0\''] = [0, null, '0 ', '0.0'];
$tests['\'0\'  <=> \'-0.0\''] = [0, null, '0 ', '-0.0'];
$tests['\'0\'  <=> \'+0.0\''] = [0, null, '0 ', '+0.0'];
$tests['\'0\'  <=> \'1.0\''] = [-1, null, '0 ', '1.0'];
$tests['\'0\'  <=> \'-1.0\''] = [1, null, '0 ', '-1.0'];
$tests['\'0\'  <=> \'+1.0\''] = [-1, null, '0 ', '+1.0'];
$tests['\'0\'  <=> \'-1\''] = [1, null, '0 ', '-1'];
$tests['\'0\'  <=> \'+1\''] = [-1, null, '0 ', '+1'];
$tests['\'0\'  <=> \'1\''] = [-1, null, '0 ', '1'];
$tests['\'0\'  <=> \' 0\''] = [0, null, '0 ', ' 0'];
$tests['\'0\'  <=> \' -0\''] = [0, null, '0 ', ' -0'];
$tests['\'0\'  <=> \' +0\''] = [0, null, '0 ', ' +0'];
$tests['\'0\'  <=> \' 0\' '] = [0, null, '0 ', ' 0 '];
$tests['\'0\'  <=> \' -0\''] = [0, null, '0 ', ' -0 '];
$tests['\'0\'  <=> \' +0\''] = [0, null, '0 ', ' +0 '];
$tests['\'0\'  <=> \'0\' '] = [0, null, '0 ', '0 '];
$tests['\'0\'  <=> \'-0\''] = [0, null, '0 ', '-0 '];
$tests['\'0\'  <=> \'+0\''] = [0, null, '0 ', '+0 '];
$tests['\'0\'  <=> \' 0.0\''] = [0, null, '0 ', ' 0.0'];
$tests['\'0\'  <=> \' -0.0\''] = [0, null, '0 ', ' -0.0'];
$tests['\'0\'  <=> \' +0.0\''] = [0, null, '0 ', ' +0.0'];
$tests['\'0\'  <=> \' 0.0\' '] = [0, null, '0 ', ' 0.0 '];
$tests['\'0\'  <=> \' -0.0\''] = [0, null, '0 ', ' -0.0 '];
$tests['\'0\'  <=> \' +0.0\''] = [0, null, '0 ', ' +0.0 '];
$tests['\'0\'  <=> \'0.0\' '] = [0, null, '0 ', '0.0 '];
$tests['\'0\'  <=> \'-0.0\''] = [0, null, '0 ', '-0.0 '];
$tests['\'0\'  <=> \'+0.0\''] = [0, null, '0 ', '+0.0 '];
$tests['\'0\'  <=> \'03\''] = [-1, null, '0 ', '03'];
$tests['\'0\'  <=> \'2abc\''] = [-1, null, '0 ', '2abc'];
$tests['\'0\'  <=> \'2.5abc\''] = [-1, null, '0 ', '2.5abc'];
$tests['\'0\'  <=> \'abc2abc\''] = [-1, null, '0 ', 'abc2abc'];
$tests['\'0\'  <=> \'abc2.5abc\''] = [-1, null, '0 ', 'abc2.5abc'];
$tests['\'0\'  <=> \'\\0\''] = [1, null, '0 ', hex2bin('00')];
$tests['\'0\'  <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [-1, null, '0 ', hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['\'0\'  <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [1, null, '0 ', hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['\'0\'  <=> 12.0000000000001'] = [-1, null, '0 ', 12.0000000000001];
$tests['\'0\'  <=> 12.000000000000002'] = [-1, null, '0 ', 12.000000000000002];
$tests['\'0\'  <=> pi'] = [-1, null, '0 ', M_PI];
$tests['\'0\'  <=> int(max)'] = [-1, null, '0 ', PHP_INT_MAX];
$tests['\'0\'  <=> int(min)'] = [1, null, '0 ', PHP_INT_MIN];
$tests['\'0\'  <=> float(epsilon)'] = [-1, null, '0 ', PHP_FLOAT_EPSILON];
$tests['\'0\'  <=> float(min)'] = [-1, null, '0 ', PHP_FLOAT_MIN];
$tests['\'0\'  <=> float(max)'] = [-1, null, '0 ', PHP_FLOAT_MAX];
$tests['\'0\'  <=> float(inf)'] = [-1, null, '0 ', INF];
$tests['\'0\'  <=> float(-inf)'] = [1, null, '0 ', -INF];
$tests['\'0\'  <=> float(nan)'] = [1, null, '0 ', NAN];
$tests['\'0\'  <=> $closure1'] = [-1, null, '0 ', $closure1];
$tests['\'0\'  <=> $closure2'] = [-1, null, '0 ', $closure2];
$tests['\'0\'  <=> $fh1'] = [-1, null, '0 ', $fh1];
$tests['\'0\'  <=> $fh2'] = [-1, null, '0 ', $fh2];
$tests['\'0\'  <=> $proc'] = [-1, null, '0 ', $proc];
$tests['\'0\'  <=> DateTime(2024-01-01T12:00:00Z)'] = [-1, null, '0 ', unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'0\'  <=> DateTime(2024-01-01T12:00:01Z)'] = [-1, null, '0 ', unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'0\'  <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [-1, null, '0 ', unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'0\'  <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [-1, null, '0 ', unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'0\'  <=> []'] = [-1, null, '0 ', []];
$tests['\'0\'  <=> [[]]'] = [-1, null, '0 ', [[]]];
$tests['\'0\'  <=> [1 => []]'] = [-1, null, '0 ', [1 => []]];
$tests['\'0\'  <=> [1 => null]'] = [-1, null, '0 ', [1 => null]];
$tests['\'0\'  <=> [0]'] = [-1, null, '0 ', [0]];
$tests['\'0\'  <=> [0.0]'] = [-1, null, '0 ', [0.0]];
$tests['\'0\'  <=> [null]'] = [-1, null, '0 ', [null]];
$tests['\'0\'  <=> [false]'] = [-1, null, '0 ', [false]];
$tests['\'0\'  <=> [true]'] = [-1, null, '0 ', [true]];
$tests['\'0\'  <=> [\'\']'] = [-1, null, '0 ', ['']];
$tests['\'0\'  <=> [a, b, c]'] = [-1, null, '0 ', ['a','b','c']];
$tests['\'0\'  <=> [$fh1]'] = [-1, null, '0 ', [$fh1]];
$tests['\'0\'  <=> [foo => bar]'] = [-1, null, '0 ', ['foo' => 'bar']];
$tests['\'0\'  <=> object[]'] = [-1, null, '0 ', (object) []];
$tests['\'0\'  <=> object[[]]'] = [-1, null, '0 ', (object) [[]]];
$tests['\'0\'  <=> object[1 => []]'] = [-1, null, '0 ', (object) [1 => []]];
$tests['\'0\'  <=> object[1 => null]'] = [-1, null, '0 ', (object) [1 => null]];
$tests['\'0\'  <=> object[0]'] = [-1, null, '0 ', (object) [0]];
$tests['\'0\'  <=> object[0.0]'] = [-1, null, '0 ', (object) [0.0]];
$tests['\'0\'  <=> object[null]'] = [-1, null, '0 ', (object) [null]];
$tests['\'0\'  <=> object[false]'] = [-1, null, '0 ', (object) [false]];
$tests['\'0\'  <=> object[true]'] = [-1, null, '0 ', (object) [true]];
$tests['\'0\'  <=> object[\'\']'] = [-1, null, '0 ', (object) ['']];
$tests['\'0\'  <=> object[a, b, c]'] = [-1, null, '0 ', (object) ['a','b','c']];
$tests['\'0\'  <=> object[$fh1]'] = [-1, null, '0 ', (object) [$fh1]];
$tests['\'0\'  <=> object[foo => bar]'] = [-1, null, '0 ', (object) ['foo' => 'bar']];
$tests['\'-0\' <=> false'] = [1, null, '-0 ', false];
$tests['\'-0\' <=> true'] = [0, null, '-0 ', true];
$tests['\'-0\' <=> null'] = [1, null, '-0 ', null];
$tests['\'-0\' <=> 0'] = [0, null, '-0 ', 0];
$tests['\'-0\' <=> 1'] = [-1, null, '-0 ', 1];
$tests['\'-0\' <=> -1'] = [1, null, '-0 ', -1];
$tests['\'-0\' <=> 0.0'] = [0, null, '-0 ', 0.0];
$tests['\'-0\' <=> -1.0'] = [1, null, '-0 ', -1.0];
$tests['\'-0\' <=> 1.0'] = [-1, null, '-0 ', 1.0];
$tests['\'-0\' <=> \'\''] = [1, null, '-0 ', ''];
$tests['\'-0\' <=> \'0\''] = [0, null, '-0 ', '0'];
$tests['\'-0\' <=> \'-0\''] = [0, null, '-0 ', '-0'];
$tests['\'-0\' <=> \'+0\''] = [0, null, '-0 ', '+0'];
$tests['\'-0\' <=> \'0.0\''] = [0, null, '-0 ', '0.0'];
$tests['\'-0\' <=> \'-0.0\''] = [0, null, '-0 ', '-0.0'];
$tests['\'-0\' <=> \'+0.0\''] = [0, null, '-0 ', '+0.0'];
$tests['\'-0\' <=> \'1.0\''] = [-1, null, '-0 ', '1.0'];
$tests['\'-0\' <=> \'-1.0\''] = [1, null, '-0 ', '-1.0'];
$tests['\'-0\' <=> \'+1.0\''] = [-1, null, '-0 ', '+1.0'];
$tests['\'-0\' <=> \'-1\''] = [1, null, '-0 ', '-1'];
$tests['\'-0\' <=> \'+1\''] = [-1, null, '-0 ', '+1'];
$tests['\'-0\' <=> \'1\''] = [-1, null, '-0 ', '1'];
$tests['\'-0\' <=> \' 0\''] = [0, null, '-0 ', ' 0'];
$tests['\'-0\' <=> \' -0\''] = [0, null, '-0 ', ' -0'];
$tests['\'-0\' <=> \' +0\''] = [0, null, '-0 ', ' +0'];
$tests['\'-0\' <=> \' 0\' '] = [0, null, '-0 ', ' 0 '];
$tests['\'-0\' <=> \' -0\''] = [0, null, '-0 ', ' -0 '];
$tests['\'-0\' <=> \' +0\''] = [0, null, '-0 ', ' +0 '];
$tests['\'-0\' <=> \'0\' '] = [0, null, '-0 ', '0 '];
$tests['\'-0\' <=> \'-0\''] = [0, null, '-0 ', '-0 '];
$tests['\'-0\' <=> \'+0\''] = [0, null, '-0 ', '+0 '];
$tests['\'-0\' <=> \' 0.0\''] = [0, null, '-0 ', ' 0.0'];
$tests['\'-0\' <=> \' -0.0\''] = [0, null, '-0 ', ' -0.0'];
$tests['\'-0\' <=> \' +0.0\''] = [0, null, '-0 ', ' +0.0'];
$tests['\'-0\' <=> \' 0.0\' '] = [0, null, '-0 ', ' 0.0 '];
$tests['\'-0\' <=> \' -0.0\''] = [0, null, '-0 ', ' -0.0 '];
$tests['\'-0\' <=> \' +0.0\''] = [0, null, '-0 ', ' +0.0 '];
$tests['\'-0\' <=> \'0.0\' '] = [0, null, '-0 ', '0.0 '];
$tests['\'-0\' <=> \'-0.0\''] = [0, null, '-0 ', '-0.0 '];
$tests['\'-0\' <=> \'+0.0\''] = [0, null, '-0 ', '+0.0 '];
$tests['\'-0\' <=> \'03\''] = [-1, null, '-0 ', '03'];
$tests['\'-0\' <=> \'2abc\''] = [-1, null, '-0 ', '2abc'];
$tests['\'-0\' <=> \'2.5abc\''] = [-1, null, '-0 ', '2.5abc'];
$tests['\'-0\' <=> \'abc2abc\''] = [-1, null, '-0 ', 'abc2abc'];
$tests['\'-0\' <=> \'abc2.5abc\''] = [-1, null, '-0 ', 'abc2.5abc'];
$tests['\'-0\' <=> \'\\0\''] = [1, null, '-0 ', hex2bin('00')];
$tests['\'-0\' <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [-1, null, '-0 ', hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['\'-0\' <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [1, null, '-0 ', hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['\'-0\' <=> 12.0000000000001'] = [-1, null, '-0 ', 12.0000000000001];
$tests['\'-0\' <=> 12.000000000000002'] = [-1, null, '-0 ', 12.000000000000002];
$tests['\'-0\' <=> pi'] = [-1, null, '-0 ', M_PI];
$tests['\'-0\' <=> int(max)'] = [-1, null, '-0 ', PHP_INT_MAX];
$tests['\'-0\' <=> int(min)'] = [1, null, '-0 ', PHP_INT_MIN];
$tests['\'-0\' <=> float(epsilon)'] = [-1, null, '-0 ', PHP_FLOAT_EPSILON];
$tests['\'-0\' <=> float(min)'] = [-1, null, '-0 ', PHP_FLOAT_MIN];
$tests['\'-0\' <=> float(max)'] = [-1, null, '-0 ', PHP_FLOAT_MAX];
$tests['\'-0\' <=> float(inf)'] = [-1, null, '-0 ', INF];
$tests['\'-0\' <=> float(-inf)'] = [1, null, '-0 ', -INF];
$tests['\'-0\' <=> float(nan)'] = [1, null, '-0 ', NAN];
$tests['\'-0\' <=> $closure1'] = [-1, null, '-0 ', $closure1];
$tests['\'-0\' <=> $closure2'] = [-1, null, '-0 ', $closure2];
$tests['\'-0\' <=> $fh1'] = [-1, null, '-0 ', $fh1];
$tests['\'-0\' <=> $fh2'] = [-1, null, '-0 ', $fh2];
$tests['\'-0\' <=> $proc'] = [-1, null, '-0 ', $proc];
$tests['\'-0\' <=> DateTime(2024-01-01T12:00:00Z)'] = [-1, null, '-0 ', unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'-0\' <=> DateTime(2024-01-01T12:00:01Z)'] = [-1, null, '-0 ', unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'-0\' <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [-1, null, '-0 ', unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'-0\' <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [-1, null, '-0 ', unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'-0\' <=> []'] = [-1, null, '-0 ', []];
$tests['\'-0\' <=> [[]]'] = [-1, null, '-0 ', [[]]];
$tests['\'-0\' <=> [1 => []]'] = [-1, null, '-0 ', [1 => []]];
$tests['\'-0\' <=> [1 => null]'] = [-1, null, '-0 ', [1 => null]];
$tests['\'-0\' <=> [0]'] = [-1, null, '-0 ', [0]];
$tests['\'-0\' <=> [0.0]'] = [-1, null, '-0 ', [0.0]];
$tests['\'-0\' <=> [null]'] = [-1, null, '-0 ', [null]];
$tests['\'-0\' <=> [false]'] = [-1, null, '-0 ', [false]];
$tests['\'-0\' <=> [true]'] = [-1, null, '-0 ', [true]];
$tests['\'-0\' <=> [\'\']'] = [-1, null, '-0 ', ['']];
$tests['\'-0\' <=> [a, b, c]'] = [-1, null, '-0 ', ['a','b','c']];
$tests['\'-0\' <=> [$fh1]'] = [-1, null, '-0 ', [$fh1]];
$tests['\'-0\' <=> [foo => bar]'] = [-1, null, '-0 ', ['foo' => 'bar']];
$tests['\'-0\' <=> object[]'] = [-1, null, '-0 ', (object) []];
$tests['\'-0\' <=> object[[]]'] = [-1, null, '-0 ', (object) [[]]];
$tests['\'-0\' <=> object[1 => []]'] = [-1, null, '-0 ', (object) [1 => []]];
$tests['\'-0\' <=> object[1 => null]'] = [-1, null, '-0 ', (object) [1 => null]];
$tests['\'-0\' <=> object[0]'] = [-1, null, '-0 ', (object) [0]];
$tests['\'-0\' <=> object[0.0]'] = [-1, null, '-0 ', (object) [0.0]];
$tests['\'-0\' <=> object[null]'] = [-1, null, '-0 ', (object) [null]];
$tests['\'-0\' <=> object[false]'] = [-1, null, '-0 ', (object) [false]];
$tests['\'-0\' <=> object[true]'] = [-1, null, '-0 ', (object) [true]];
$tests['\'-0\' <=> object[\'\']'] = [-1, null, '-0 ', (object) ['']];
$tests['\'-0\' <=> object[a, b, c]'] = [-1, null, '-0 ', (object) ['a','b','c']];
$tests['\'-0\' <=> object[$fh1]'] = [-1, null, '-0 ', (object) [$fh1]];
$tests['\'-0\' <=> object[foo => bar]'] = [-1, null, '-0 ', (object) ['foo' => 'bar']];
$tests['\'+0\' <=> false'] = [1, null, '+0 ', false];
$tests['\'+0\' <=> true'] = [0, null, '+0 ', true];
$tests['\'+0\' <=> null'] = [1, null, '+0 ', null];
$tests['\'+0\' <=> 0'] = [0, null, '+0 ', 0];
$tests['\'+0\' <=> 1'] = [-1, null, '+0 ', 1];
$tests['\'+0\' <=> -1'] = [1, null, '+0 ', -1];
$tests['\'+0\' <=> 0.0'] = [0, null, '+0 ', 0.0];
$tests['\'+0\' <=> -1.0'] = [1, null, '+0 ', -1.0];
$tests['\'+0\' <=> 1.0'] = [-1, null, '+0 ', 1.0];
$tests['\'+0\' <=> \'\''] = [1, null, '+0 ', ''];
$tests['\'+0\' <=> \'0\''] = [0, null, '+0 ', '0'];
$tests['\'+0\' <=> \'-0\''] = [0, null, '+0 ', '-0'];
$tests['\'+0\' <=> \'+0\''] = [0, null, '+0 ', '+0'];
$tests['\'+0\' <=> \'0.0\''] = [0, null, '+0 ', '0.0'];
$tests['\'+0\' <=> \'-0.0\''] = [0, null, '+0 ', '-0.0'];
$tests['\'+0\' <=> \'+0.0\''] = [0, null, '+0 ', '+0.0'];
$tests['\'+0\' <=> \'1.0\''] = [-1, null, '+0 ', '1.0'];
$tests['\'+0\' <=> \'-1.0\''] = [1, null, '+0 ', '-1.0'];
$tests['\'+0\' <=> \'+1.0\''] = [-1, null, '+0 ', '+1.0'];
$tests['\'+0\' <=> \'-1\''] = [1, null, '+0 ', '-1'];
$tests['\'+0\' <=> \'+1\''] = [-1, null, '+0 ', '+1'];
$tests['\'+0\' <=> \'1\''] = [-1, null, '+0 ', '1'];
$tests['\'+0\' <=> \' 0\''] = [0, null, '+0 ', ' 0'];
$tests['\'+0\' <=> \' -0\''] = [0, null, '+0 ', ' -0'];
$tests['\'+0\' <=> \' +0\''] = [0, null, '+0 ', ' +0'];
$tests['\'+0\' <=> \' 0\' '] = [0, null, '+0 ', ' 0 '];
$tests['\'+0\' <=> \' -0\''] = [0, null, '+0 ', ' -0 '];
$tests['\'+0\' <=> \' +0\''] = [0, null, '+0 ', ' +0 '];
$tests['\'+0\' <=> \'0\' '] = [0, null, '+0 ', '0 '];
$tests['\'+0\' <=> \'-0\''] = [0, null, '+0 ', '-0 '];
$tests['\'+0\' <=> \'+0\''] = [0, null, '+0 ', '+0 '];
$tests['\'+0\' <=> \' 0.0\''] = [0, null, '+0 ', ' 0.0'];
$tests['\'+0\' <=> \' -0.0\''] = [0, null, '+0 ', ' -0.0'];
$tests['\'+0\' <=> \' +0.0\''] = [0, null, '+0 ', ' +0.0'];
$tests['\'+0\' <=> \' 0.0\' '] = [0, null, '+0 ', ' 0.0 '];
$tests['\'+0\' <=> \' -0.0\''] = [0, null, '+0 ', ' -0.0 '];
$tests['\'+0\' <=> \' +0.0\''] = [0, null, '+0 ', ' +0.0 '];
$tests['\'+0\' <=> \'0.0\' '] = [0, null, '+0 ', '0.0 '];
$tests['\'+0\' <=> \'-0.0\''] = [0, null, '+0 ', '-0.0 '];
$tests['\'+0\' <=> \'+0.0\''] = [0, null, '+0 ', '+0.0 '];
$tests['\'+0\' <=> \'03\''] = [-1, null, '+0 ', '03'];
$tests['\'+0\' <=> \'2abc\''] = [-1, null, '+0 ', '2abc'];
$tests['\'+0\' <=> \'2.5abc\''] = [-1, null, '+0 ', '2.5abc'];
$tests['\'+0\' <=> \'abc2abc\''] = [-1, null, '+0 ', 'abc2abc'];
$tests['\'+0\' <=> \'abc2.5abc\''] = [-1, null, '+0 ', 'abc2.5abc'];
$tests['\'+0\' <=> \'\\0\''] = [1, null, '+0 ', hex2bin('00')];
$tests['\'+0\' <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [-1, null, '+0 ', hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['\'+0\' <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [1, null, '+0 ', hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['\'+0\' <=> 12.0000000000001'] = [-1, null, '+0 ', 12.0000000000001];
$tests['\'+0\' <=> 12.000000000000002'] = [-1, null, '+0 ', 12.000000000000002];
$tests['\'+0\' <=> pi'] = [-1, null, '+0 ', M_PI];
$tests['\'+0\' <=> int(max)'] = [-1, null, '+0 ', PHP_INT_MAX];
$tests['\'+0\' <=> int(min)'] = [1, null, '+0 ', PHP_INT_MIN];
$tests['\'+0\' <=> float(epsilon)'] = [-1, null, '+0 ', PHP_FLOAT_EPSILON];
$tests['\'+0\' <=> float(min)'] = [-1, null, '+0 ', PHP_FLOAT_MIN];
$tests['\'+0\' <=> float(max)'] = [-1, null, '+0 ', PHP_FLOAT_MAX];
$tests['\'+0\' <=> float(inf)'] = [-1, null, '+0 ', INF];
$tests['\'+0\' <=> float(-inf)'] = [1, null, '+0 ', -INF];
$tests['\'+0\' <=> float(nan)'] = [1, null, '+0 ', NAN];
$tests['\'+0\' <=> $closure1'] = [-1, null, '+0 ', $closure1];
$tests['\'+0\' <=> $closure2'] = [-1, null, '+0 ', $closure2];
$tests['\'+0\' <=> $fh1'] = [-1, null, '+0 ', $fh1];
$tests['\'+0\' <=> $fh2'] = [-1, null, '+0 ', $fh2];
$tests['\'+0\' <=> $proc'] = [-1, null, '+0 ', $proc];
$tests['\'+0\' <=> DateTime(2024-01-01T12:00:00Z)'] = [-1, null, '+0 ', unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'+0\' <=> DateTime(2024-01-01T12:00:01Z)'] = [-1, null, '+0 ', unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'+0\' <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [-1, null, '+0 ', unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'+0\' <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [-1, null, '+0 ', unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'+0\' <=> []'] = [-1, null, '+0 ', []];
$tests['\'+0\' <=> [[]]'] = [-1, null, '+0 ', [[]]];
$tests['\'+0\' <=> [1 => []]'] = [-1, null, '+0 ', [1 => []]];
$tests['\'+0\' <=> [1 => null]'] = [-1, null, '+0 ', [1 => null]];
$tests['\'+0\' <=> [0]'] = [-1, null, '+0 ', [0]];
$tests['\'+0\' <=> [0.0]'] = [-1, null, '+0 ', [0.0]];
$tests['\'+0\' <=> [null]'] = [-1, null, '+0 ', [null]];
$tests['\'+0\' <=> [false]'] = [-1, null, '+0 ', [false]];
$tests['\'+0\' <=> [true]'] = [-1, null, '+0 ', [true]];
$tests['\'+0\' <=> [\'\']'] = [-1, null, '+0 ', ['']];
$tests['\'+0\' <=> [a, b, c]'] = [-1, null, '+0 ', ['a','b','c']];
$tests['\'+0\' <=> [$fh1]'] = [-1, null, '+0 ', [$fh1]];
$tests['\'+0\' <=> [foo => bar]'] = [-1, null, '+0 ', ['foo' => 'bar']];
$tests['\'+0\' <=> object[]'] = [-1, null, '+0 ', (object) []];
$tests['\'+0\' <=> object[[]]'] = [-1, null, '+0 ', (object) [[]]];
$tests['\'+0\' <=> object[1 => []]'] = [-1, null, '+0 ', (object) [1 => []]];
$tests['\'+0\' <=> object[1 => null]'] = [-1, null, '+0 ', (object) [1 => null]];
$tests['\'+0\' <=> object[0]'] = [-1, null, '+0 ', (object) [0]];
$tests['\'+0\' <=> object[0.0]'] = [-1, null, '+0 ', (object) [0.0]];
$tests['\'+0\' <=> object[null]'] = [-1, null, '+0 ', (object) [null]];
$tests['\'+0\' <=> object[false]'] = [-1, null, '+0 ', (object) [false]];
$tests['\'+0\' <=> object[true]'] = [-1, null, '+0 ', (object) [true]];
$tests['\'+0\' <=> object[\'\']'] = [-1, null, '+0 ', (object) ['']];
$tests['\'+0\' <=> object[a, b, c]'] = [-1, null, '+0 ', (object) ['a','b','c']];
$tests['\'+0\' <=> object[$fh1]'] = [-1, null, '+0 ', (object) [$fh1]];
$tests['\'+0\' <=> object[foo => bar]'] = [-1, null, '+0 ', (object) ['foo' => 'bar']];
$tests['\' 0.0\' <=> false'] = [1, null, ' 0.0', false];
$tests['\' 0.0\' <=> true'] = [0, null, ' 0.0', true];
$tests['\' 0.0\' <=> null'] = [1, null, ' 0.0', null];
$tests['\' 0.0\' <=> 0'] = [0, null, ' 0.0', 0];
$tests['\' 0.0\' <=> 1'] = [-1, null, ' 0.0', 1];
$tests['\' 0.0\' <=> -1'] = [1, null, ' 0.0', -1];
$tests['\' 0.0\' <=> 0.0'] = [0, null, ' 0.0', 0.0];
$tests['\' 0.0\' <=> -1.0'] = [1, null, ' 0.0', -1.0];
$tests['\' 0.0\' <=> 1.0'] = [-1, null, ' 0.0', 1.0];
$tests['\' 0.0\' <=> \'\''] = [1, null, ' 0.0', ''];
$tests['\' 0.0\' <=> \'0\''] = [0, null, ' 0.0', '0'];
$tests['\' 0.0\' <=> \'-0\''] = [0, null, ' 0.0', '-0'];
$tests['\' 0.0\' <=> \'+0\''] = [0, null, ' 0.0', '+0'];
$tests['\' 0.0\' <=> \'0.0\''] = [0, null, ' 0.0', '0.0'];
$tests['\' 0.0\' <=> \'-0.0\''] = [0, null, ' 0.0', '-0.0'];
$tests['\' 0.0\' <=> \'+0.0\''] = [0, null, ' 0.0', '+0.0'];
$tests['\' 0.0\' <=> \'1.0\''] = [-1, null, ' 0.0', '1.0'];
$tests['\' 0.0\' <=> \'-1.0\''] = [1, null, ' 0.0', '-1.0'];
$tests['\' 0.0\' <=> \'+1.0\''] = [-1, null, ' 0.0', '+1.0'];
$tests['\' 0.0\' <=> \'-1\''] = [1, null, ' 0.0', '-1'];
$tests['\' 0.0\' <=> \'+1\''] = [-1, null, ' 0.0', '+1'];
$tests['\' 0.0\' <=> \'1\''] = [-1, null, ' 0.0', '1'];
$tests['\' 0.0\' <=> \' 0\''] = [0, null, ' 0.0', ' 0'];
$tests['\' 0.0\' <=> \' -0\''] = [0, null, ' 0.0', ' -0'];
$tests['\' 0.0\' <=> \' +0\''] = [0, null, ' 0.0', ' +0'];
$tests['\' 0.0\' <=> \' 0\' '] = [0, null, ' 0.0', ' 0 '];
$tests['\' 0.0\' <=> \' -0\''] = [0, null, ' 0.0', ' -0 '];
$tests['\' 0.0\' <=> \' +0\''] = [0, null, ' 0.0', ' +0 '];
$tests['\' 0.0\' <=> \'0\' '] = [0, null, ' 0.0', '0 '];
$tests['\' 0.0\' <=> \'-0\''] = [0, null, ' 0.0', '-0 '];
$tests['\' 0.0\' <=> \'+0\''] = [0, null, ' 0.0', '+0 '];
$tests['\' 0.0\' <=> \' 0.0\''] = [0, null, ' 0.0', ' 0.0'];
$tests['\' 0.0\' <=> \' -0.0\''] = [0, null, ' 0.0', ' -0.0'];
$tests['\' 0.0\' <=> \' +0.0\''] = [0, null, ' 0.0', ' +0.0'];
$tests['\' 0.0\' <=> \' 0.0\' '] = [0, null, ' 0.0', ' 0.0 '];
$tests['\' 0.0\' <=> \' -0.0\''] = [0, null, ' 0.0', ' -0.0 '];
$tests['\' 0.0\' <=> \' +0.0\''] = [0, null, ' 0.0', ' +0.0 '];
$tests['\' 0.0\' <=> \'0.0\' '] = [0, null, ' 0.0', '0.0 '];
$tests['\' 0.0\' <=> \'-0.0\''] = [0, null, ' 0.0', '-0.0 '];
$tests['\' 0.0\' <=> \'+0.0\''] = [0, null, ' 0.0', '+0.0 '];
$tests['\' 0.0\' <=> \'03\''] = [-1, null, ' 0.0', '03'];
$tests['\' 0.0\' <=> \'2abc\''] = [-1, null, ' 0.0', '2abc'];
$tests['\' 0.0\' <=> \'2.5abc\''] = [-1, null, ' 0.0', '2.5abc'];
$tests['\' 0.0\' <=> \'abc2abc\''] = [-1, null, ' 0.0', 'abc2abc'];
$tests['\' 0.0\' <=> \'abc2.5abc\''] = [-1, null, ' 0.0', 'abc2.5abc'];
$tests['\' 0.0\' <=> \'\\0\''] = [1, null, ' 0.0', hex2bin('00')];
$tests['\' 0.0\' <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [-1, null, ' 0.0', hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['\' 0.0\' <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [1, null, ' 0.0', hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['\' 0.0\' <=> 12.0000000000001'] = [-1, null, ' 0.0', 12.0000000000001];
$tests['\' 0.0\' <=> 12.000000000000002'] = [-1, null, ' 0.0', 12.000000000000002];
$tests['\' 0.0\' <=> pi'] = [-1, null, ' 0.0', M_PI];
$tests['\' 0.0\' <=> int(max)'] = [-1, null, ' 0.0', PHP_INT_MAX];
$tests['\' 0.0\' <=> int(min)'] = [1, null, ' 0.0', PHP_INT_MIN];
$tests['\' 0.0\' <=> float(epsilon)'] = [-1, null, ' 0.0', PHP_FLOAT_EPSILON];
$tests['\' 0.0\' <=> float(min)'] = [-1, null, ' 0.0', PHP_FLOAT_MIN];
$tests['\' 0.0\' <=> float(max)'] = [-1, null, ' 0.0', PHP_FLOAT_MAX];
$tests['\' 0.0\' <=> float(inf)'] = [-1, null, ' 0.0', INF];
$tests['\' 0.0\' <=> float(-inf)'] = [1, null, ' 0.0', -INF];
$tests['\' 0.0\' <=> float(nan)'] = [1, null, ' 0.0', NAN];
$tests['\' 0.0\' <=> $closure1'] = [-1, null, ' 0.0', $closure1];
$tests['\' 0.0\' <=> $closure2'] = [-1, null, ' 0.0', $closure2];
$tests['\' 0.0\' <=> $fh1'] = [-1, null, ' 0.0', $fh1];
$tests['\' 0.0\' <=> $fh2'] = [-1, null, ' 0.0', $fh2];
$tests['\' 0.0\' <=> $proc'] = [-1, null, ' 0.0', $proc];
$tests['\' 0.0\' <=> DateTime(2024-01-01T12:00:00Z)'] = [-1, null, ' 0.0', unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\' 0.0\' <=> DateTime(2024-01-01T12:00:01Z)'] = [-1, null, ' 0.0', unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\' 0.0\' <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [-1, null, ' 0.0', unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\' 0.0\' <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [-1, null, ' 0.0', unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\' 0.0\' <=> []'] = [-1, null, ' 0.0', []];
$tests['\' 0.0\' <=> [[]]'] = [-1, null, ' 0.0', [[]]];
$tests['\' 0.0\' <=> [1 => []]'] = [-1, null, ' 0.0', [1 => []]];
$tests['\' 0.0\' <=> [1 => null]'] = [-1, null, ' 0.0', [1 => null]];
$tests['\' 0.0\' <=> [0]'] = [-1, null, ' 0.0', [0]];
$tests['\' 0.0\' <=> [0.0]'] = [-1, null, ' 0.0', [0.0]];
$tests['\' 0.0\' <=> [null]'] = [-1, null, ' 0.0', [null]];
$tests['\' 0.0\' <=> [false]'] = [-1, null, ' 0.0', [false]];
$tests['\' 0.0\' <=> [true]'] = [-1, null, ' 0.0', [true]];
$tests['\' 0.0\' <=> [\'\']'] = [-1, null, ' 0.0', ['']];
$tests['\' 0.0\' <=> [a, b, c]'] = [-1, null, ' 0.0', ['a','b','c']];
$tests['\' 0.0\' <=> [$fh1]'] = [-1, null, ' 0.0', [$fh1]];
$tests['\' 0.0\' <=> [foo => bar]'] = [-1, null, ' 0.0', ['foo' => 'bar']];
$tests['\' 0.0\' <=> object[]'] = [-1, null, ' 0.0', (object) []];
$tests['\' 0.0\' <=> object[[]]'] = [-1, null, ' 0.0', (object) [[]]];
$tests['\' 0.0\' <=> object[1 => []]'] = [-1, null, ' 0.0', (object) [1 => []]];
$tests['\' 0.0\' <=> object[1 => null]'] = [-1, null, ' 0.0', (object) [1 => null]];
$tests['\' 0.0\' <=> object[0]'] = [-1, null, ' 0.0', (object) [0]];
$tests['\' 0.0\' <=> object[0.0]'] = [-1, null, ' 0.0', (object) [0.0]];
$tests['\' 0.0\' <=> object[null]'] = [-1, null, ' 0.0', (object) [null]];
$tests['\' 0.0\' <=> object[false]'] = [-1, null, ' 0.0', (object) [false]];
$tests['\' 0.0\' <=> object[true]'] = [-1, null, ' 0.0', (object) [true]];
$tests['\' 0.0\' <=> object[\'\']'] = [-1, null, ' 0.0', (object) ['']];
$tests['\' 0.0\' <=> object[a, b, c]'] = [-1, null, ' 0.0', (object) ['a','b','c']];
$tests['\' 0.0\' <=> object[$fh1]'] = [-1, null, ' 0.0', (object) [$fh1]];
$tests['\' 0.0\' <=> object[foo => bar]'] = [-1, null, ' 0.0', (object) ['foo' => 'bar']];
$tests['\' -0.0\' <=> false'] = [1, null, ' -0.0', false];
$tests['\' -0.0\' <=> true'] = [0, null, ' -0.0', true];
$tests['\' -0.0\' <=> null'] = [1, null, ' -0.0', null];
$tests['\' -0.0\' <=> 0'] = [0, null, ' -0.0', 0];
$tests['\' -0.0\' <=> 1'] = [-1, null, ' -0.0', 1];
$tests['\' -0.0\' <=> -1'] = [1, null, ' -0.0', -1];
$tests['\' -0.0\' <=> 0.0'] = [0, null, ' -0.0', 0.0];
$tests['\' -0.0\' <=> -1.0'] = [1, null, ' -0.0', -1.0];
$tests['\' -0.0\' <=> 1.0'] = [-1, null, ' -0.0', 1.0];
$tests['\' -0.0\' <=> \'\''] = [1, null, ' -0.0', ''];
$tests['\' -0.0\' <=> \'0\''] = [0, null, ' -0.0', '0'];
$tests['\' -0.0\' <=> \'-0\''] = [0, null, ' -0.0', '-0'];
$tests['\' -0.0\' <=> \'+0\''] = [0, null, ' -0.0', '+0'];
$tests['\' -0.0\' <=> \'0.0\''] = [0, null, ' -0.0', '0.0'];
$tests['\' -0.0\' <=> \'-0.0\''] = [0, null, ' -0.0', '-0.0'];
$tests['\' -0.0\' <=> \'+0.0\''] = [0, null, ' -0.0', '+0.0'];
$tests['\' -0.0\' <=> \'1.0\''] = [-1, null, ' -0.0', '1.0'];
$tests['\' -0.0\' <=> \'-1.0\''] = [1, null, ' -0.0', '-1.0'];
$tests['\' -0.0\' <=> \'+1.0\''] = [-1, null, ' -0.0', '+1.0'];
$tests['\' -0.0\' <=> \'-1\''] = [1, null, ' -0.0', '-1'];
$tests['\' -0.0\' <=> \'+1\''] = [-1, null, ' -0.0', '+1'];
$tests['\' -0.0\' <=> \'1\''] = [-1, null, ' -0.0', '1'];
$tests['\' -0.0\' <=> \' 0\''] = [0, null, ' -0.0', ' 0'];
$tests['\' -0.0\' <=> \' -0\''] = [0, null, ' -0.0', ' -0'];
$tests['\' -0.0\' <=> \' +0\''] = [0, null, ' -0.0', ' +0'];
$tests['\' -0.0\' <=> \' 0\' '] = [0, null, ' -0.0', ' 0 '];
$tests['\' -0.0\' <=> \' -0\''] = [0, null, ' -0.0', ' -0 '];
$tests['\' -0.0\' <=> \' +0\''] = [0, null, ' -0.0', ' +0 '];
$tests['\' -0.0\' <=> \'0\' '] = [0, null, ' -0.0', '0 '];
$tests['\' -0.0\' <=> \'-0\''] = [0, null, ' -0.0', '-0 '];
$tests['\' -0.0\' <=> \'+0\''] = [0, null, ' -0.0', '+0 '];
$tests['\' -0.0\' <=> \' 0.0\''] = [0, null, ' -0.0', ' 0.0'];
$tests['\' -0.0\' <=> \' -0.0\''] = [0, null, ' -0.0', ' -0.0'];
$tests['\' -0.0\' <=> \' +0.0\''] = [0, null, ' -0.0', ' +0.0'];
$tests['\' -0.0\' <=> \' 0.0\' '] = [0, null, ' -0.0', ' 0.0 '];
$tests['\' -0.0\' <=> \' -0.0\''] = [0, null, ' -0.0', ' -0.0 '];
$tests['\' -0.0\' <=> \' +0.0\''] = [0, null, ' -0.0', ' +0.0 '];
$tests['\' -0.0\' <=> \'0.0\' '] = [0, null, ' -0.0', '0.0 '];
$tests['\' -0.0\' <=> \'-0.0\''] = [0, null, ' -0.0', '-0.0 '];
$tests['\' -0.0\' <=> \'+0.0\''] = [0, null, ' -0.0', '+0.0 '];
$tests['\' -0.0\' <=> \'03\''] = [-1, null, ' -0.0', '03'];
$tests['\' -0.0\' <=> \'2abc\''] = [-1, null, ' -0.0', '2abc'];
$tests['\' -0.0\' <=> \'2.5abc\''] = [-1, null, ' -0.0', '2.5abc'];
$tests['\' -0.0\' <=> \'abc2abc\''] = [-1, null, ' -0.0', 'abc2abc'];
$tests['\' -0.0\' <=> \'abc2.5abc\''] = [-1, null, ' -0.0', 'abc2.5abc'];
$tests['\' -0.0\' <=> \'\\0\''] = [1, null, ' -0.0', hex2bin('00')];
$tests['\' -0.0\' <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [-1, null, ' -0.0', hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['\' -0.0\' <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [1, null, ' -0.0', hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['\' -0.0\' <=> 12.0000000000001'] = [-1, null, ' -0.0', 12.0000000000001];
$tests['\' -0.0\' <=> 12.000000000000002'] = [-1, null, ' -0.0', 12.000000000000002];
$tests['\' -0.0\' <=> pi'] = [-1, null, ' -0.0', M_PI];
$tests['\' -0.0\' <=> int(max)'] = [-1, null, ' -0.0', PHP_INT_MAX];
$tests['\' -0.0\' <=> int(min)'] = [1, null, ' -0.0', PHP_INT_MIN];
$tests['\' -0.0\' <=> float(epsilon)'] = [-1, null, ' -0.0', PHP_FLOAT_EPSILON];
$tests['\' -0.0\' <=> float(min)'] = [-1, null, ' -0.0', PHP_FLOAT_MIN];
$tests['\' -0.0\' <=> float(max)'] = [-1, null, ' -0.0', PHP_FLOAT_MAX];
$tests['\' -0.0\' <=> float(inf)'] = [-1, null, ' -0.0', INF];
$tests['\' -0.0\' <=> float(-inf)'] = [1, null, ' -0.0', -INF];
$tests['\' -0.0\' <=> float(nan)'] = [1, null, ' -0.0', NAN];
$tests['\' -0.0\' <=> $closure1'] = [-1, null, ' -0.0', $closure1];
$tests['\' -0.0\' <=> $closure2'] = [-1, null, ' -0.0', $closure2];
$tests['\' -0.0\' <=> $fh1'] = [-1, null, ' -0.0', $fh1];
$tests['\' -0.0\' <=> $fh2'] = [-1, null, ' -0.0', $fh2];
$tests['\' -0.0\' <=> $proc'] = [-1, null, ' -0.0', $proc];
$tests['\' -0.0\' <=> DateTime(2024-01-01T12:00:00Z)'] = [-1, null, ' -0.0', unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\' -0.0\' <=> DateTime(2024-01-01T12:00:01Z)'] = [-1, null, ' -0.0', unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\' -0.0\' <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [-1, null, ' -0.0', unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\' -0.0\' <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [-1, null, ' -0.0', unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\' -0.0\' <=> []'] = [-1, null, ' -0.0', []];
$tests['\' -0.0\' <=> [[]]'] = [-1, null, ' -0.0', [[]]];
$tests['\' -0.0\' <=> [1 => []]'] = [-1, null, ' -0.0', [1 => []]];
$tests['\' -0.0\' <=> [1 => null]'] = [-1, null, ' -0.0', [1 => null]];
$tests['\' -0.0\' <=> [0]'] = [-1, null, ' -0.0', [0]];
$tests['\' -0.0\' <=> [0.0]'] = [-1, null, ' -0.0', [0.0]];
$tests['\' -0.0\' <=> [null]'] = [-1, null, ' -0.0', [null]];
$tests['\' -0.0\' <=> [false]'] = [-1, null, ' -0.0', [false]];
$tests['\' -0.0\' <=> [true]'] = [-1, null, ' -0.0', [true]];
$tests['\' -0.0\' <=> [\'\']'] = [-1, null, ' -0.0', ['']];
$tests['\' -0.0\' <=> [a, b, c]'] = [-1, null, ' -0.0', ['a','b','c']];
$tests['\' -0.0\' <=> [$fh1]'] = [-1, null, ' -0.0', [$fh1]];
$tests['\' -0.0\' <=> [foo => bar]'] = [-1, null, ' -0.0', ['foo' => 'bar']];
$tests['\' -0.0\' <=> object[]'] = [-1, null, ' -0.0', (object) []];
$tests['\' -0.0\' <=> object[[]]'] = [-1, null, ' -0.0', (object) [[]]];
$tests['\' -0.0\' <=> object[1 => []]'] = [-1, null, ' -0.0', (object) [1 => []]];
$tests['\' -0.0\' <=> object[1 => null]'] = [-1, null, ' -0.0', (object) [1 => null]];
$tests['\' -0.0\' <=> object[0]'] = [-1, null, ' -0.0', (object) [0]];
$tests['\' -0.0\' <=> object[0.0]'] = [-1, null, ' -0.0', (object) [0.0]];
$tests['\' -0.0\' <=> object[null]'] = [-1, null, ' -0.0', (object) [null]];
$tests['\' -0.0\' <=> object[false]'] = [-1, null, ' -0.0', (object) [false]];
$tests['\' -0.0\' <=> object[true]'] = [-1, null, ' -0.0', (object) [true]];
$tests['\' -0.0\' <=> object[\'\']'] = [-1, null, ' -0.0', (object) ['']];
$tests['\' -0.0\' <=> object[a, b, c]'] = [-1, null, ' -0.0', (object) ['a','b','c']];
$tests['\' -0.0\' <=> object[$fh1]'] = [-1, null, ' -0.0', (object) [$fh1]];
$tests['\' -0.0\' <=> object[foo => bar]'] = [-1, null, ' -0.0', (object) ['foo' => 'bar']];
$tests['\' +0.0\' <=> false'] = [1, null, ' +0.0', false];
$tests['\' +0.0\' <=> true'] = [0, null, ' +0.0', true];
$tests['\' +0.0\' <=> null'] = [1, null, ' +0.0', null];
$tests['\' +0.0\' <=> 0'] = [0, null, ' +0.0', 0];
$tests['\' +0.0\' <=> 1'] = [-1, null, ' +0.0', 1];
$tests['\' +0.0\' <=> -1'] = [1, null, ' +0.0', -1];
$tests['\' +0.0\' <=> 0.0'] = [0, null, ' +0.0', 0.0];
$tests['\' +0.0\' <=> -1.0'] = [1, null, ' +0.0', -1.0];
$tests['\' +0.0\' <=> 1.0'] = [-1, null, ' +0.0', 1.0];
$tests['\' +0.0\' <=> \'\''] = [1, null, ' +0.0', ''];
$tests['\' +0.0\' <=> \'0\''] = [0, null, ' +0.0', '0'];
$tests['\' +0.0\' <=> \'-0\''] = [0, null, ' +0.0', '-0'];
$tests['\' +0.0\' <=> \'+0\''] = [0, null, ' +0.0', '+0'];
$tests['\' +0.0\' <=> \'0.0\''] = [0, null, ' +0.0', '0.0'];
$tests['\' +0.0\' <=> \'-0.0\''] = [0, null, ' +0.0', '-0.0'];
$tests['\' +0.0\' <=> \'+0.0\''] = [0, null, ' +0.0', '+0.0'];
$tests['\' +0.0\' <=> \'1.0\''] = [-1, null, ' +0.0', '1.0'];
$tests['\' +0.0\' <=> \'-1.0\''] = [1, null, ' +0.0', '-1.0'];
$tests['\' +0.0\' <=> \'+1.0\''] = [-1, null, ' +0.0', '+1.0'];
$tests['\' +0.0\' <=> \'-1\''] = [1, null, ' +0.0', '-1'];
$tests['\' +0.0\' <=> \'+1\''] = [-1, null, ' +0.0', '+1'];
$tests['\' +0.0\' <=> \'1\''] = [-1, null, ' +0.0', '1'];
$tests['\' +0.0\' <=> \' 0\''] = [0, null, ' +0.0', ' 0'];
$tests['\' +0.0\' <=> \' -0\''] = [0, null, ' +0.0', ' -0'];
$tests['\' +0.0\' <=> \' +0\''] = [0, null, ' +0.0', ' +0'];
$tests['\' +0.0\' <=> \' 0\' '] = [0, null, ' +0.0', ' 0 '];
$tests['\' +0.0\' <=> \' -0\''] = [0, null, ' +0.0', ' -0 '];
$tests['\' +0.0\' <=> \' +0\''] = [0, null, ' +0.0', ' +0 '];
$tests['\' +0.0\' <=> \'0\' '] = [0, null, ' +0.0', '0 '];
$tests['\' +0.0\' <=> \'-0\''] = [0, null, ' +0.0', '-0 '];
$tests['\' +0.0\' <=> \'+0\''] = [0, null, ' +0.0', '+0 '];
$tests['\' +0.0\' <=> \' 0.0\''] = [0, null, ' +0.0', ' 0.0'];
$tests['\' +0.0\' <=> \' -0.0\''] = [0, null, ' +0.0', ' -0.0'];
$tests['\' +0.0\' <=> \' +0.0\''] = [0, null, ' +0.0', ' +0.0'];
$tests['\' +0.0\' <=> \' 0.0\' '] = [0, null, ' +0.0', ' 0.0 '];
$tests['\' +0.0\' <=> \' -0.0\''] = [0, null, ' +0.0', ' -0.0 '];
$tests['\' +0.0\' <=> \' +0.0\''] = [0, null, ' +0.0', ' +0.0 '];
$tests['\' +0.0\' <=> \'0.0\' '] = [0, null, ' +0.0', '0.0 '];
$tests['\' +0.0\' <=> \'-0.0\''] = [0, null, ' +0.0', '-0.0 '];
$tests['\' +0.0\' <=> \'+0.0\''] = [0, null, ' +0.0', '+0.0 '];
$tests['\' +0.0\' <=> \'03\''] = [-1, null, ' +0.0', '03'];
$tests['\' +0.0\' <=> \'2abc\''] = [-1, null, ' +0.0', '2abc'];
$tests['\' +0.0\' <=> \'2.5abc\''] = [-1, null, ' +0.0', '2.5abc'];
$tests['\' +0.0\' <=> \'abc2abc\''] = [-1, null, ' +0.0', 'abc2abc'];
$tests['\' +0.0\' <=> \'abc2.5abc\''] = [-1, null, ' +0.0', 'abc2.5abc'];
$tests['\' +0.0\' <=> \'\\0\''] = [1, null, ' +0.0', hex2bin('00')];
$tests['\' +0.0\' <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [-1, null, ' +0.0', hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['\' +0.0\' <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [1, null, ' +0.0', hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['\' +0.0\' <=> 12.0000000000001'] = [-1, null, ' +0.0', 12.0000000000001];
$tests['\' +0.0\' <=> 12.000000000000002'] = [-1, null, ' +0.0', 12.000000000000002];
$tests['\' +0.0\' <=> pi'] = [-1, null, ' +0.0', M_PI];
$tests['\' +0.0\' <=> int(max)'] = [-1, null, ' +0.0', PHP_INT_MAX];
$tests['\' +0.0\' <=> int(min)'] = [1, null, ' +0.0', PHP_INT_MIN];
$tests['\' +0.0\' <=> float(epsilon)'] = [-1, null, ' +0.0', PHP_FLOAT_EPSILON];
$tests['\' +0.0\' <=> float(min)'] = [-1, null, ' +0.0', PHP_FLOAT_MIN];
$tests['\' +0.0\' <=> float(max)'] = [-1, null, ' +0.0', PHP_FLOAT_MAX];
$tests['\' +0.0\' <=> float(inf)'] = [-1, null, ' +0.0', INF];
$tests['\' +0.0\' <=> float(-inf)'] = [1, null, ' +0.0', -INF];
$tests['\' +0.0\' <=> float(nan)'] = [1, null, ' +0.0', NAN];
$tests['\' +0.0\' <=> $closure1'] = [-1, null, ' +0.0', $closure1];
$tests['\' +0.0\' <=> $closure2'] = [-1, null, ' +0.0', $closure2];
$tests['\' +0.0\' <=> $fh1'] = [-1, null, ' +0.0', $fh1];
$tests['\' +0.0\' <=> $fh2'] = [-1, null, ' +0.0', $fh2];
$tests['\' +0.0\' <=> $proc'] = [-1, null, ' +0.0', $proc];
$tests['\' +0.0\' <=> DateTime(2024-01-01T12:00:00Z)'] = [-1, null, ' +0.0', unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\' +0.0\' <=> DateTime(2024-01-01T12:00:01Z)'] = [-1, null, ' +0.0', unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\' +0.0\' <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [-1, null, ' +0.0', unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\' +0.0\' <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [-1, null, ' +0.0', unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\' +0.0\' <=> []'] = [-1, null, ' +0.0', []];
$tests['\' +0.0\' <=> [[]]'] = [-1, null, ' +0.0', [[]]];
$tests['\' +0.0\' <=> [1 => []]'] = [-1, null, ' +0.0', [1 => []]];
$tests['\' +0.0\' <=> [1 => null]'] = [-1, null, ' +0.0', [1 => null]];
$tests['\' +0.0\' <=> [0]'] = [-1, null, ' +0.0', [0]];
$tests['\' +0.0\' <=> [0.0]'] = [-1, null, ' +0.0', [0.0]];
$tests['\' +0.0\' <=> [null]'] = [-1, null, ' +0.0', [null]];
$tests['\' +0.0\' <=> [false]'] = [-1, null, ' +0.0', [false]];
$tests['\' +0.0\' <=> [true]'] = [-1, null, ' +0.0', [true]];
$tests['\' +0.0\' <=> [\'\']'] = [-1, null, ' +0.0', ['']];
$tests['\' +0.0\' <=> [a, b, c]'] = [-1, null, ' +0.0', ['a','b','c']];
$tests['\' +0.0\' <=> [$fh1]'] = [-1, null, ' +0.0', [$fh1]];
$tests['\' +0.0\' <=> [foo => bar]'] = [-1, null, ' +0.0', ['foo' => 'bar']];
$tests['\' +0.0\' <=> object[]'] = [-1, null, ' +0.0', (object) []];
$tests['\' +0.0\' <=> object[[]]'] = [-1, null, ' +0.0', (object) [[]]];
$tests['\' +0.0\' <=> object[1 => []]'] = [-1, null, ' +0.0', (object) [1 => []]];
$tests['\' +0.0\' <=> object[1 => null]'] = [-1, null, ' +0.0', (object) [1 => null]];
$tests['\' +0.0\' <=> object[0]'] = [-1, null, ' +0.0', (object) [0]];
$tests['\' +0.0\' <=> object[0.0]'] = [-1, null, ' +0.0', (object) [0.0]];
$tests['\' +0.0\' <=> object[null]'] = [-1, null, ' +0.0', (object) [null]];
$tests['\' +0.0\' <=> object[false]'] = [-1, null, ' +0.0', (object) [false]];
$tests['\' +0.0\' <=> object[true]'] = [-1, null, ' +0.0', (object) [true]];
$tests['\' +0.0\' <=> object[\'\']'] = [-1, null, ' +0.0', (object) ['']];
$tests['\' +0.0\' <=> object[a, b, c]'] = [-1, null, ' +0.0', (object) ['a','b','c']];
$tests['\' +0.0\' <=> object[$fh1]'] = [-1, null, ' +0.0', (object) [$fh1]];
$tests['\' +0.0\' <=> object[foo => bar]'] = [-1, null, ' +0.0', (object) ['foo' => 'bar']];
$tests['\' 0.0\'  <=> false'] = [1, null, ' 0.0 ', false];
$tests['\' 0.0\'  <=> true'] = [0, null, ' 0.0 ', true];
$tests['\' 0.0\'  <=> null'] = [1, null, ' 0.0 ', null];
$tests['\' 0.0\'  <=> 0'] = [0, null, ' 0.0 ', 0];
$tests['\' 0.0\'  <=> 1'] = [-1, null, ' 0.0 ', 1];
$tests['\' 0.0\'  <=> -1'] = [1, null, ' 0.0 ', -1];
$tests['\' 0.0\'  <=> 0.0'] = [0, null, ' 0.0 ', 0.0];
$tests['\' 0.0\'  <=> -1.0'] = [1, null, ' 0.0 ', -1.0];
$tests['\' 0.0\'  <=> 1.0'] = [-1, null, ' 0.0 ', 1.0];
$tests['\' 0.0\'  <=> \'\''] = [1, null, ' 0.0 ', ''];
$tests['\' 0.0\'  <=> \'0\''] = [0, null, ' 0.0 ', '0'];
$tests['\' 0.0\'  <=> \'-0\''] = [0, null, ' 0.0 ', '-0'];
$tests['\' 0.0\'  <=> \'+0\''] = [0, null, ' 0.0 ', '+0'];
$tests['\' 0.0\'  <=> \'0.0\''] = [0, null, ' 0.0 ', '0.0'];
$tests['\' 0.0\'  <=> \'-0.0\''] = [0, null, ' 0.0 ', '-0.0'];
$tests['\' 0.0\'  <=> \'+0.0\''] = [0, null, ' 0.0 ', '+0.0'];
$tests['\' 0.0\'  <=> \'1.0\''] = [-1, null, ' 0.0 ', '1.0'];
$tests['\' 0.0\'  <=> \'-1.0\''] = [1, null, ' 0.0 ', '-1.0'];
$tests['\' 0.0\'  <=> \'+1.0\''] = [-1, null, ' 0.0 ', '+1.0'];
$tests['\' 0.0\'  <=> \'-1\''] = [1, null, ' 0.0 ', '-1'];
$tests['\' 0.0\'  <=> \'+1\''] = [-1, null, ' 0.0 ', '+1'];
$tests['\' 0.0\'  <=> \'1\''] = [-1, null, ' 0.0 ', '1'];
$tests['\' 0.0\'  <=> \' 0\''] = [0, null, ' 0.0 ', ' 0'];
$tests['\' 0.0\'  <=> \' -0\''] = [0, null, ' 0.0 ', ' -0'];
$tests['\' 0.0\'  <=> \' +0\''] = [0, null, ' 0.0 ', ' +0'];
$tests['\' 0.0\'  <=> \' 0\' '] = [0, null, ' 0.0 ', ' 0 '];
$tests['\' 0.0\'  <=> \' -0\''] = [0, null, ' 0.0 ', ' -0 '];
$tests['\' 0.0\'  <=> \' +0\''] = [0, null, ' 0.0 ', ' +0 '];
$tests['\' 0.0\'  <=> \'0\' '] = [0, null, ' 0.0 ', '0 '];
$tests['\' 0.0\'  <=> \'-0\''] = [0, null, ' 0.0 ', '-0 '];
$tests['\' 0.0\'  <=> \'+0\''] = [0, null, ' 0.0 ', '+0 '];
$tests['\' 0.0\'  <=> \' 0.0\''] = [0, null, ' 0.0 ', ' 0.0'];
$tests['\' 0.0\'  <=> \' -0.0\''] = [0, null, ' 0.0 ', ' -0.0'];
$tests['\' 0.0\'  <=> \' +0.0\''] = [0, null, ' 0.0 ', ' +0.0'];
$tests['\' 0.0\'  <=> \' 0.0\' '] = [0, null, ' 0.0 ', ' 0.0 '];
$tests['\' 0.0\'  <=> \' -0.0\''] = [0, null, ' 0.0 ', ' -0.0 '];
$tests['\' 0.0\'  <=> \' +0.0\''] = [0, null, ' 0.0 ', ' +0.0 '];
$tests['\' 0.0\'  <=> \'0.0\' '] = [0, null, ' 0.0 ', '0.0 '];
$tests['\' 0.0\'  <=> \'-0.0\''] = [0, null, ' 0.0 ', '-0.0 '];
$tests['\' 0.0\'  <=> \'+0.0\''] = [0, null, ' 0.0 ', '+0.0 '];
$tests['\' 0.0\'  <=> \'03\''] = [-1, null, ' 0.0 ', '03'];
$tests['\' 0.0\'  <=> \'2abc\''] = [-1, null, ' 0.0 ', '2abc'];
$tests['\' 0.0\'  <=> \'2.5abc\''] = [-1, null, ' 0.0 ', '2.5abc'];
$tests['\' 0.0\'  <=> \'abc2abc\''] = [-1, null, ' 0.0 ', 'abc2abc'];
$tests['\' 0.0\'  <=> \'abc2.5abc\''] = [-1, null, ' 0.0 ', 'abc2.5abc'];
$tests['\' 0.0\'  <=> \'\\0\''] = [1, null, ' 0.0 ', hex2bin('00')];
$tests['\' 0.0\'  <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [-1, null, ' 0.0 ', hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['\' 0.0\'  <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [1, null, ' 0.0 ', hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['\' 0.0\'  <=> 12.0000000000001'] = [-1, null, ' 0.0 ', 12.0000000000001];
$tests['\' 0.0\'  <=> 12.000000000000002'] = [-1, null, ' 0.0 ', 12.000000000000002];
$tests['\' 0.0\'  <=> pi'] = [-1, null, ' 0.0 ', M_PI];
$tests['\' 0.0\'  <=> int(max)'] = [-1, null, ' 0.0 ', PHP_INT_MAX];
$tests['\' 0.0\'  <=> int(min)'] = [1, null, ' 0.0 ', PHP_INT_MIN];
$tests['\' 0.0\'  <=> float(epsilon)'] = [-1, null, ' 0.0 ', PHP_FLOAT_EPSILON];
$tests['\' 0.0\'  <=> float(min)'] = [-1, null, ' 0.0 ', PHP_FLOAT_MIN];
$tests['\' 0.0\'  <=> float(max)'] = [-1, null, ' 0.0 ', PHP_FLOAT_MAX];
$tests['\' 0.0\'  <=> float(inf)'] = [-1, null, ' 0.0 ', INF];
$tests['\' 0.0\'  <=> float(-inf)'] = [1, null, ' 0.0 ', -INF];
$tests['\' 0.0\'  <=> float(nan)'] = [1, null, ' 0.0 ', NAN];
$tests['\' 0.0\'  <=> $closure1'] = [-1, null, ' 0.0 ', $closure1];
$tests['\' 0.0\'  <=> $closure2'] = [-1, null, ' 0.0 ', $closure2];
$tests['\' 0.0\'  <=> $fh1'] = [-1, null, ' 0.0 ', $fh1];
$tests['\' 0.0\'  <=> $fh2'] = [-1, null, ' 0.0 ', $fh2];
$tests['\' 0.0\'  <=> $proc'] = [-1, null, ' 0.0 ', $proc];
$tests['\' 0.0\'  <=> DateTime(2024-01-01T12:00:00Z)'] = [-1, null, ' 0.0 ', unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\' 0.0\'  <=> DateTime(2024-01-01T12:00:01Z)'] = [-1, null, ' 0.0 ', unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\' 0.0\'  <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [-1, null, ' 0.0 ', unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\' 0.0\'  <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [-1, null, ' 0.0 ', unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\' 0.0\'  <=> []'] = [-1, null, ' 0.0 ', []];
$tests['\' 0.0\'  <=> [[]]'] = [-1, null, ' 0.0 ', [[]]];
$tests['\' 0.0\'  <=> [1 => []]'] = [-1, null, ' 0.0 ', [1 => []]];
$tests['\' 0.0\'  <=> [1 => null]'] = [-1, null, ' 0.0 ', [1 => null]];
$tests['\' 0.0\'  <=> [0]'] = [-1, null, ' 0.0 ', [0]];
$tests['\' 0.0\'  <=> [0.0]'] = [-1, null, ' 0.0 ', [0.0]];
$tests['\' 0.0\'  <=> [null]'] = [-1, null, ' 0.0 ', [null]];
$tests['\' 0.0\'  <=> [false]'] = [-1, null, ' 0.0 ', [false]];
$tests['\' 0.0\'  <=> [true]'] = [-1, null, ' 0.0 ', [true]];
$tests['\' 0.0\'  <=> [\'\']'] = [-1, null, ' 0.0 ', ['']];
$tests['\' 0.0\'  <=> [a, b, c]'] = [-1, null, ' 0.0 ', ['a','b','c']];
$tests['\' 0.0\'  <=> [$fh1]'] = [-1, null, ' 0.0 ', [$fh1]];
$tests['\' 0.0\'  <=> [foo => bar]'] = [-1, null, ' 0.0 ', ['foo' => 'bar']];
$tests['\' 0.0\'  <=> object[]'] = [-1, null, ' 0.0 ', (object) []];
$tests['\' 0.0\'  <=> object[[]]'] = [-1, null, ' 0.0 ', (object) [[]]];
$tests['\' 0.0\'  <=> object[1 => []]'] = [-1, null, ' 0.0 ', (object) [1 => []]];
$tests['\' 0.0\'  <=> object[1 => null]'] = [-1, null, ' 0.0 ', (object) [1 => null]];
$tests['\' 0.0\'  <=> object[0]'] = [-1, null, ' 0.0 ', (object) [0]];
$tests['\' 0.0\'  <=> object[0.0]'] = [-1, null, ' 0.0 ', (object) [0.0]];
$tests['\' 0.0\'  <=> object[null]'] = [-1, null, ' 0.0 ', (object) [null]];
$tests['\' 0.0\'  <=> object[false]'] = [-1, null, ' 0.0 ', (object) [false]];
$tests['\' 0.0\'  <=> object[true]'] = [-1, null, ' 0.0 ', (object) [true]];
$tests['\' 0.0\'  <=> object[\'\']'] = [-1, null, ' 0.0 ', (object) ['']];
$tests['\' 0.0\'  <=> object[a, b, c]'] = [-1, null, ' 0.0 ', (object) ['a','b','c']];
$tests['\' 0.0\'  <=> object[$fh1]'] = [-1, null, ' 0.0 ', (object) [$fh1]];
$tests['\' 0.0\'  <=> object[foo => bar]'] = [-1, null, ' 0.0 ', (object) ['foo' => 'bar']];
$tests['\' -0.0\' <=> false'] = [1, null, ' -0.0 ', false];
$tests['\' -0.0\' <=> true'] = [0, null, ' -0.0 ', true];
$tests['\' -0.0\' <=> null'] = [1, null, ' -0.0 ', null];
$tests['\' -0.0\' <=> 0'] = [0, null, ' -0.0 ', 0];
$tests['\' -0.0\' <=> 1'] = [-1, null, ' -0.0 ', 1];
$tests['\' -0.0\' <=> -1'] = [1, null, ' -0.0 ', -1];
$tests['\' -0.0\' <=> 0.0'] = [0, null, ' -0.0 ', 0.0];
$tests['\' -0.0\' <=> -1.0'] = [1, null, ' -0.0 ', -1.0];
$tests['\' -0.0\' <=> 1.0'] = [-1, null, ' -0.0 ', 1.0];
$tests['\' -0.0\' <=> \'\''] = [1, null, ' -0.0 ', ''];
$tests['\' -0.0\' <=> \'0\''] = [0, null, ' -0.0 ', '0'];
$tests['\' -0.0\' <=> \'-0\''] = [0, null, ' -0.0 ', '-0'];
$tests['\' -0.0\' <=> \'+0\''] = [0, null, ' -0.0 ', '+0'];
$tests['\' -0.0\' <=> \'0.0\''] = [0, null, ' -0.0 ', '0.0'];
$tests['\' -0.0\' <=> \'-0.0\''] = [0, null, ' -0.0 ', '-0.0'];
$tests['\' -0.0\' <=> \'+0.0\''] = [0, null, ' -0.0 ', '+0.0'];
$tests['\' -0.0\' <=> \'1.0\''] = [-1, null, ' -0.0 ', '1.0'];
$tests['\' -0.0\' <=> \'-1.0\''] = [1, null, ' -0.0 ', '-1.0'];
$tests['\' -0.0\' <=> \'+1.0\''] = [-1, null, ' -0.0 ', '+1.0'];
$tests['\' -0.0\' <=> \'-1\''] = [1, null, ' -0.0 ', '-1'];
$tests['\' -0.0\' <=> \'+1\''] = [-1, null, ' -0.0 ', '+1'];
$tests['\' -0.0\' <=> \'1\''] = [-1, null, ' -0.0 ', '1'];
$tests['\' -0.0\' <=> \' 0\''] = [0, null, ' -0.0 ', ' 0'];
$tests['\' -0.0\' <=> \' -0\''] = [0, null, ' -0.0 ', ' -0'];
$tests['\' -0.0\' <=> \' +0\''] = [0, null, ' -0.0 ', ' +0'];
$tests['\' -0.0\' <=> \' 0\' '] = [0, null, ' -0.0 ', ' 0 '];
$tests['\' -0.0\' <=> \' -0\''] = [0, null, ' -0.0 ', ' -0 '];
$tests['\' -0.0\' <=> \' +0\''] = [0, null, ' -0.0 ', ' +0 '];
$tests['\' -0.0\' <=> \'0\' '] = [0, null, ' -0.0 ', '0 '];
$tests['\' -0.0\' <=> \'-0\''] = [0, null, ' -0.0 ', '-0 '];
$tests['\' -0.0\' <=> \'+0\''] = [0, null, ' -0.0 ', '+0 '];
$tests['\' -0.0\' <=> \' 0.0\''] = [0, null, ' -0.0 ', ' 0.0'];
$tests['\' -0.0\' <=> \' -0.0\''] = [0, null, ' -0.0 ', ' -0.0'];
$tests['\' -0.0\' <=> \' +0.0\''] = [0, null, ' -0.0 ', ' +0.0'];
$tests['\' -0.0\' <=> \' 0.0\' '] = [0, null, ' -0.0 ', ' 0.0 '];
$tests['\' -0.0\' <=> \' -0.0\''] = [0, null, ' -0.0 ', ' -0.0 '];
$tests['\' -0.0\' <=> \' +0.0\''] = [0, null, ' -0.0 ', ' +0.0 '];
$tests['\' -0.0\' <=> \'0.0\' '] = [0, null, ' -0.0 ', '0.0 '];
$tests['\' -0.0\' <=> \'-0.0\''] = [0, null, ' -0.0 ', '-0.0 '];
$tests['\' -0.0\' <=> \'+0.0\''] = [0, null, ' -0.0 ', '+0.0 '];
$tests['\' -0.0\' <=> \'03\''] = [-1, null, ' -0.0 ', '03'];
$tests['\' -0.0\' <=> \'2abc\''] = [-1, null, ' -0.0 ', '2abc'];
$tests['\' -0.0\' <=> \'2.5abc\''] = [-1, null, ' -0.0 ', '2.5abc'];
$tests['\' -0.0\' <=> \'abc2abc\''] = [-1, null, ' -0.0 ', 'abc2abc'];
$tests['\' -0.0\' <=> \'abc2.5abc\''] = [-1, null, ' -0.0 ', 'abc2.5abc'];
$tests['\' -0.0\' <=> \'\\0\''] = [1, null, ' -0.0 ', hex2bin('00')];
$tests['\' -0.0\' <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [-1, null, ' -0.0 ', hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['\' -0.0\' <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [1, null, ' -0.0 ', hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['\' -0.0\' <=> 12.0000000000001'] = [-1, null, ' -0.0 ', 12.0000000000001];
$tests['\' -0.0\' <=> 12.000000000000002'] = [-1, null, ' -0.0 ', 12.000000000000002];
$tests['\' -0.0\' <=> pi'] = [-1, null, ' -0.0 ', M_PI];
$tests['\' -0.0\' <=> int(max)'] = [-1, null, ' -0.0 ', PHP_INT_MAX];
$tests['\' -0.0\' <=> int(min)'] = [1, null, ' -0.0 ', PHP_INT_MIN];
$tests['\' -0.0\' <=> float(epsilon)'] = [-1, null, ' -0.0 ', PHP_FLOAT_EPSILON];
$tests['\' -0.0\' <=> float(min)'] = [-1, null, ' -0.0 ', PHP_FLOAT_MIN];
$tests['\' -0.0\' <=> float(max)'] = [-1, null, ' -0.0 ', PHP_FLOAT_MAX];
$tests['\' -0.0\' <=> float(inf)'] = [-1, null, ' -0.0 ', INF];
$tests['\' -0.0\' <=> float(-inf)'] = [1, null, ' -0.0 ', -INF];
$tests['\' -0.0\' <=> float(nan)'] = [1, null, ' -0.0 ', NAN];
$tests['\' -0.0\' <=> $closure1'] = [-1, null, ' -0.0 ', $closure1];
$tests['\' -0.0\' <=> $closure2'] = [-1, null, ' -0.0 ', $closure2];
$tests['\' -0.0\' <=> $fh1'] = [-1, null, ' -0.0 ', $fh1];
$tests['\' -0.0\' <=> $fh2'] = [-1, null, ' -0.0 ', $fh2];
$tests['\' -0.0\' <=> $proc'] = [-1, null, ' -0.0 ', $proc];
$tests['\' -0.0\' <=> DateTime(2024-01-01T12:00:00Z)'] = [-1, null, ' -0.0 ', unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\' -0.0\' <=> DateTime(2024-01-01T12:00:01Z)'] = [-1, null, ' -0.0 ', unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\' -0.0\' <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [-1, null, ' -0.0 ', unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\' -0.0\' <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [-1, null, ' -0.0 ', unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\' -0.0\' <=> []'] = [-1, null, ' -0.0 ', []];
$tests['\' -0.0\' <=> [[]]'] = [-1, null, ' -0.0 ', [[]]];
$tests['\' -0.0\' <=> [1 => []]'] = [-1, null, ' -0.0 ', [1 => []]];
$tests['\' -0.0\' <=> [1 => null]'] = [-1, null, ' -0.0 ', [1 => null]];
$tests['\' -0.0\' <=> [0]'] = [-1, null, ' -0.0 ', [0]];
$tests['\' -0.0\' <=> [0.0]'] = [-1, null, ' -0.0 ', [0.0]];
$tests['\' -0.0\' <=> [null]'] = [-1, null, ' -0.0 ', [null]];
$tests['\' -0.0\' <=> [false]'] = [-1, null, ' -0.0 ', [false]];
$tests['\' -0.0\' <=> [true]'] = [-1, null, ' -0.0 ', [true]];
$tests['\' -0.0\' <=> [\'\']'] = [-1, null, ' -0.0 ', ['']];
$tests['\' -0.0\' <=> [a, b, c]'] = [-1, null, ' -0.0 ', ['a','b','c']];
$tests['\' -0.0\' <=> [$fh1]'] = [-1, null, ' -0.0 ', [$fh1]];
$tests['\' -0.0\' <=> [foo => bar]'] = [-1, null, ' -0.0 ', ['foo' => 'bar']];
$tests['\' -0.0\' <=> object[]'] = [-1, null, ' -0.0 ', (object) []];
$tests['\' -0.0\' <=> object[[]]'] = [-1, null, ' -0.0 ', (object) [[]]];
$tests['\' -0.0\' <=> object[1 => []]'] = [-1, null, ' -0.0 ', (object) [1 => []]];
$tests['\' -0.0\' <=> object[1 => null]'] = [-1, null, ' -0.0 ', (object) [1 => null]];
$tests['\' -0.0\' <=> object[0]'] = [-1, null, ' -0.0 ', (object) [0]];
$tests['\' -0.0\' <=> object[0.0]'] = [-1, null, ' -0.0 ', (object) [0.0]];
$tests['\' -0.0\' <=> object[null]'] = [-1, null, ' -0.0 ', (object) [null]];
$tests['\' -0.0\' <=> object[false]'] = [-1, null, ' -0.0 ', (object) [false]];
$tests['\' -0.0\' <=> object[true]'] = [-1, null, ' -0.0 ', (object) [true]];
$tests['\' -0.0\' <=> object[\'\']'] = [-1, null, ' -0.0 ', (object) ['']];
$tests['\' -0.0\' <=> object[a, b, c]'] = [-1, null, ' -0.0 ', (object) ['a','b','c']];
$tests['\' -0.0\' <=> object[$fh1]'] = [-1, null, ' -0.0 ', (object) [$fh1]];
$tests['\' -0.0\' <=> object[foo => bar]'] = [-1, null, ' -0.0 ', (object) ['foo' => 'bar']];
$tests['\' +0.0\' <=> false'] = [1, null, ' +0.0 ', false];
$tests['\' +0.0\' <=> true'] = [0, null, ' +0.0 ', true];
$tests['\' +0.0\' <=> null'] = [1, null, ' +0.0 ', null];
$tests['\' +0.0\' <=> 0'] = [0, null, ' +0.0 ', 0];
$tests['\' +0.0\' <=> 1'] = [-1, null, ' +0.0 ', 1];
$tests['\' +0.0\' <=> -1'] = [1, null, ' +0.0 ', -1];
$tests['\' +0.0\' <=> 0.0'] = [0, null, ' +0.0 ', 0.0];
$tests['\' +0.0\' <=> -1.0'] = [1, null, ' +0.0 ', -1.0];
$tests['\' +0.0\' <=> 1.0'] = [-1, null, ' +0.0 ', 1.0];
$tests['\' +0.0\' <=> \'\''] = [1, null, ' +0.0 ', ''];
$tests['\' +0.0\' <=> \'0\''] = [0, null, ' +0.0 ', '0'];
$tests['\' +0.0\' <=> \'-0\''] = [0, null, ' +0.0 ', '-0'];
$tests['\' +0.0\' <=> \'+0\''] = [0, null, ' +0.0 ', '+0'];
$tests['\' +0.0\' <=> \'0.0\''] = [0, null, ' +0.0 ', '0.0'];
$tests['\' +0.0\' <=> \'-0.0\''] = [0, null, ' +0.0 ', '-0.0'];
$tests['\' +0.0\' <=> \'+0.0\''] = [0, null, ' +0.0 ', '+0.0'];
$tests['\' +0.0\' <=> \'1.0\''] = [-1, null, ' +0.0 ', '1.0'];
$tests['\' +0.0\' <=> \'-1.0\''] = [1, null, ' +0.0 ', '-1.0'];
$tests['\' +0.0\' <=> \'+1.0\''] = [-1, null, ' +0.0 ', '+1.0'];
$tests['\' +0.0\' <=> \'-1\''] = [1, null, ' +0.0 ', '-1'];
$tests['\' +0.0\' <=> \'+1\''] = [-1, null, ' +0.0 ', '+1'];
$tests['\' +0.0\' <=> \'1\''] = [-1, null, ' +0.0 ', '1'];
$tests['\' +0.0\' <=> \' 0\''] = [0, null, ' +0.0 ', ' 0'];
$tests['\' +0.0\' <=> \' -0\''] = [0, null, ' +0.0 ', ' -0'];
$tests['\' +0.0\' <=> \' +0\''] = [0, null, ' +0.0 ', ' +0'];
$tests['\' +0.0\' <=> \' 0\' '] = [0, null, ' +0.0 ', ' 0 '];
$tests['\' +0.0\' <=> \' -0\''] = [0, null, ' +0.0 ', ' -0 '];
$tests['\' +0.0\' <=> \' +0\''] = [0, null, ' +0.0 ', ' +0 '];
$tests['\' +0.0\' <=> \'0\' '] = [0, null, ' +0.0 ', '0 '];
$tests['\' +0.0\' <=> \'-0\''] = [0, null, ' +0.0 ', '-0 '];
$tests['\' +0.0\' <=> \'+0\''] = [0, null, ' +0.0 ', '+0 '];
$tests['\' +0.0\' <=> \' 0.0\''] = [0, null, ' +0.0 ', ' 0.0'];
$tests['\' +0.0\' <=> \' -0.0\''] = [0, null, ' +0.0 ', ' -0.0'];
$tests['\' +0.0\' <=> \' +0.0\''] = [0, null, ' +0.0 ', ' +0.0'];
$tests['\' +0.0\' <=> \' 0.0\' '] = [0, null, ' +0.0 ', ' 0.0 '];
$tests['\' +0.0\' <=> \' -0.0\''] = [0, null, ' +0.0 ', ' -0.0 '];
$tests['\' +0.0\' <=> \' +0.0\''] = [0, null, ' +0.0 ', ' +0.0 '];
$tests['\' +0.0\' <=> \'0.0\' '] = [0, null, ' +0.0 ', '0.0 '];
$tests['\' +0.0\' <=> \'-0.0\''] = [0, null, ' +0.0 ', '-0.0 '];
$tests['\' +0.0\' <=> \'+0.0\''] = [0, null, ' +0.0 ', '+0.0 '];
$tests['\' +0.0\' <=> \'03\''] = [-1, null, ' +0.0 ', '03'];
$tests['\' +0.0\' <=> \'2abc\''] = [-1, null, ' +0.0 ', '2abc'];
$tests['\' +0.0\' <=> \'2.5abc\''] = [-1, null, ' +0.0 ', '2.5abc'];
$tests['\' +0.0\' <=> \'abc2abc\''] = [-1, null, ' +0.0 ', 'abc2abc'];
$tests['\' +0.0\' <=> \'abc2.5abc\''] = [-1, null, ' +0.0 ', 'abc2.5abc'];
$tests['\' +0.0\' <=> \'\\0\''] = [1, null, ' +0.0 ', hex2bin('00')];
$tests['\' +0.0\' <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [-1, null, ' +0.0 ', hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['\' +0.0\' <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [1, null, ' +0.0 ', hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['\' +0.0\' <=> 12.0000000000001'] = [-1, null, ' +0.0 ', 12.0000000000001];
$tests['\' +0.0\' <=> 12.000000000000002'] = [-1, null, ' +0.0 ', 12.000000000000002];
$tests['\' +0.0\' <=> pi'] = [-1, null, ' +0.0 ', M_PI];
$tests['\' +0.0\' <=> int(max)'] = [-1, null, ' +0.0 ', PHP_INT_MAX];
$tests['\' +0.0\' <=> int(min)'] = [1, null, ' +0.0 ', PHP_INT_MIN];
$tests['\' +0.0\' <=> float(epsilon)'] = [-1, null, ' +0.0 ', PHP_FLOAT_EPSILON];
$tests['\' +0.0\' <=> float(min)'] = [-1, null, ' +0.0 ', PHP_FLOAT_MIN];
$tests['\' +0.0\' <=> float(max)'] = [-1, null, ' +0.0 ', PHP_FLOAT_MAX];
$tests['\' +0.0\' <=> float(inf)'] = [-1, null, ' +0.0 ', INF];
$tests['\' +0.0\' <=> float(-inf)'] = [1, null, ' +0.0 ', -INF];
$tests['\' +0.0\' <=> float(nan)'] = [1, null, ' +0.0 ', NAN];
$tests['\' +0.0\' <=> $closure1'] = [-1, null, ' +0.0 ', $closure1];
$tests['\' +0.0\' <=> $closure2'] = [-1, null, ' +0.0 ', $closure2];
$tests['\' +0.0\' <=> $fh1'] = [-1, null, ' +0.0 ', $fh1];
$tests['\' +0.0\' <=> $fh2'] = [-1, null, ' +0.0 ', $fh2];
$tests['\' +0.0\' <=> $proc'] = [-1, null, ' +0.0 ', $proc];
$tests['\' +0.0\' <=> DateTime(2024-01-01T12:00:00Z)'] = [-1, null, ' +0.0 ', unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\' +0.0\' <=> DateTime(2024-01-01T12:00:01Z)'] = [-1, null, ' +0.0 ', unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\' +0.0\' <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [-1, null, ' +0.0 ', unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\' +0.0\' <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [-1, null, ' +0.0 ', unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\' +0.0\' <=> []'] = [-1, null, ' +0.0 ', []];
$tests['\' +0.0\' <=> [[]]'] = [-1, null, ' +0.0 ', [[]]];
$tests['\' +0.0\' <=> [1 => []]'] = [-1, null, ' +0.0 ', [1 => []]];
$tests['\' +0.0\' <=> [1 => null]'] = [-1, null, ' +0.0 ', [1 => null]];
$tests['\' +0.0\' <=> [0]'] = [-1, null, ' +0.0 ', [0]];
$tests['\' +0.0\' <=> [0.0]'] = [-1, null, ' +0.0 ', [0.0]];
$tests['\' +0.0\' <=> [null]'] = [-1, null, ' +0.0 ', [null]];
$tests['\' +0.0\' <=> [false]'] = [-1, null, ' +0.0 ', [false]];
$tests['\' +0.0\' <=> [true]'] = [-1, null, ' +0.0 ', [true]];
$tests['\' +0.0\' <=> [\'\']'] = [-1, null, ' +0.0 ', ['']];
$tests['\' +0.0\' <=> [a, b, c]'] = [-1, null, ' +0.0 ', ['a','b','c']];
$tests['\' +0.0\' <=> [$fh1]'] = [-1, null, ' +0.0 ', [$fh1]];
$tests['\' +0.0\' <=> [foo => bar]'] = [-1, null, ' +0.0 ', ['foo' => 'bar']];
$tests['\' +0.0\' <=> object[]'] = [-1, null, ' +0.0 ', (object) []];
$tests['\' +0.0\' <=> object[[]]'] = [-1, null, ' +0.0 ', (object) [[]]];
$tests['\' +0.0\' <=> object[1 => []]'] = [-1, null, ' +0.0 ', (object) [1 => []]];
$tests['\' +0.0\' <=> object[1 => null]'] = [-1, null, ' +0.0 ', (object) [1 => null]];
$tests['\' +0.0\' <=> object[0]'] = [-1, null, ' +0.0 ', (object) [0]];
$tests['\' +0.0\' <=> object[0.0]'] = [-1, null, ' +0.0 ', (object) [0.0]];
$tests['\' +0.0\' <=> object[null]'] = [-1, null, ' +0.0 ', (object) [null]];
$tests['\' +0.0\' <=> object[false]'] = [-1, null, ' +0.0 ', (object) [false]];
$tests['\' +0.0\' <=> object[true]'] = [-1, null, ' +0.0 ', (object) [true]];
$tests['\' +0.0\' <=> object[\'\']'] = [-1, null, ' +0.0 ', (object) ['']];
$tests['\' +0.0\' <=> object[a, b, c]'] = [-1, null, ' +0.0 ', (object) ['a','b','c']];
$tests['\' +0.0\' <=> object[$fh1]'] = [-1, null, ' +0.0 ', (object) [$fh1]];
$tests['\' +0.0\' <=> object[foo => bar]'] = [-1, null, ' +0.0 ', (object) ['foo' => 'bar']];
$tests['\'0.0\'  <=> false'] = [1, null, '0.0 ', false];
$tests['\'0.0\'  <=> true'] = [0, null, '0.0 ', true];
$tests['\'0.0\'  <=> null'] = [1, null, '0.0 ', null];
$tests['\'0.0\'  <=> 0'] = [0, null, '0.0 ', 0];
$tests['\'0.0\'  <=> 1'] = [-1, null, '0.0 ', 1];
$tests['\'0.0\'  <=> -1'] = [1, null, '0.0 ', -1];
$tests['\'0.0\'  <=> 0.0'] = [0, null, '0.0 ', 0.0];
$tests['\'0.0\'  <=> -1.0'] = [1, null, '0.0 ', -1.0];
$tests['\'0.0\'  <=> 1.0'] = [-1, null, '0.0 ', 1.0];
$tests['\'0.0\'  <=> \'\''] = [1, null, '0.0 ', ''];
$tests['\'0.0\'  <=> \'0\''] = [0, null, '0.0 ', '0'];
$tests['\'0.0\'  <=> \'-0\''] = [0, null, '0.0 ', '-0'];
$tests['\'0.0\'  <=> \'+0\''] = [0, null, '0.0 ', '+0'];
$tests['\'0.0\'  <=> \'0.0\''] = [0, null, '0.0 ', '0.0'];
$tests['\'0.0\'  <=> \'-0.0\''] = [0, null, '0.0 ', '-0.0'];
$tests['\'0.0\'  <=> \'+0.0\''] = [0, null, '0.0 ', '+0.0'];
$tests['\'0.0\'  <=> \'1.0\''] = [-1, null, '0.0 ', '1.0'];
$tests['\'0.0\'  <=> \'-1.0\''] = [1, null, '0.0 ', '-1.0'];
$tests['\'0.0\'  <=> \'+1.0\''] = [-1, null, '0.0 ', '+1.0'];
$tests['\'0.0\'  <=> \'-1\''] = [1, null, '0.0 ', '-1'];
$tests['\'0.0\'  <=> \'+1\''] = [-1, null, '0.0 ', '+1'];
$tests['\'0.0\'  <=> \'1\''] = [-1, null, '0.0 ', '1'];
$tests['\'0.0\'  <=> \' 0\''] = [0, null, '0.0 ', ' 0'];
$tests['\'0.0\'  <=> \' -0\''] = [0, null, '0.0 ', ' -0'];
$tests['\'0.0\'  <=> \' +0\''] = [0, null, '0.0 ', ' +0'];
$tests['\'0.0\'  <=> \' 0\' '] = [0, null, '0.0 ', ' 0 '];
$tests['\'0.0\'  <=> \' -0\''] = [0, null, '0.0 ', ' -0 '];
$tests['\'0.0\'  <=> \' +0\''] = [0, null, '0.0 ', ' +0 '];
$tests['\'0.0\'  <=> \'0\' '] = [0, null, '0.0 ', '0 '];
$tests['\'0.0\'  <=> \'-0\''] = [0, null, '0.0 ', '-0 '];
$tests['\'0.0\'  <=> \'+0\''] = [0, null, '0.0 ', '+0 '];
$tests['\'0.0\'  <=> \' 0.0\''] = [0, null, '0.0 ', ' 0.0'];
$tests['\'0.0\'  <=> \' -0.0\''] = [0, null, '0.0 ', ' -0.0'];
$tests['\'0.0\'  <=> \' +0.0\''] = [0, null, '0.0 ', ' +0.0'];
$tests['\'0.0\'  <=> \' 0.0\' '] = [0, null, '0.0 ', ' 0.0 '];
$tests['\'0.0\'  <=> \' -0.0\''] = [0, null, '0.0 ', ' -0.0 '];
$tests['\'0.0\'  <=> \' +0.0\''] = [0, null, '0.0 ', ' +0.0 '];
$tests['\'0.0\'  <=> \'0.0\' '] = [0, null, '0.0 ', '0.0 '];
$tests['\'0.0\'  <=> \'-0.0\''] = [0, null, '0.0 ', '-0.0 '];
$tests['\'0.0\'  <=> \'+0.0\''] = [0, null, '0.0 ', '+0.0 '];
$tests['\'0.0\'  <=> \'03\''] = [-1, null, '0.0 ', '03'];
$tests['\'0.0\'  <=> \'2abc\''] = [-1, null, '0.0 ', '2abc'];
$tests['\'0.0\'  <=> \'2.5abc\''] = [-1, null, '0.0 ', '2.5abc'];
$tests['\'0.0\'  <=> \'abc2abc\''] = [-1, null, '0.0 ', 'abc2abc'];
$tests['\'0.0\'  <=> \'abc2.5abc\''] = [-1, null, '0.0 ', 'abc2.5abc'];
$tests['\'0.0\'  <=> \'\\0\''] = [1, null, '0.0 ', hex2bin('00')];
$tests['\'0.0\'  <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [-1, null, '0.0 ', hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['\'0.0\'  <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [1, null, '0.0 ', hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['\'0.0\'  <=> 12.0000000000001'] = [-1, null, '0.0 ', 12.0000000000001];
$tests['\'0.0\'  <=> 12.000000000000002'] = [-1, null, '0.0 ', 12.000000000000002];
$tests['\'0.0\'  <=> pi'] = [-1, null, '0.0 ', M_PI];
$tests['\'0.0\'  <=> int(max)'] = [-1, null, '0.0 ', PHP_INT_MAX];
$tests['\'0.0\'  <=> int(min)'] = [1, null, '0.0 ', PHP_INT_MIN];
$tests['\'0.0\'  <=> float(epsilon)'] = [-1, null, '0.0 ', PHP_FLOAT_EPSILON];
$tests['\'0.0\'  <=> float(min)'] = [-1, null, '0.0 ', PHP_FLOAT_MIN];
$tests['\'0.0\'  <=> float(max)'] = [-1, null, '0.0 ', PHP_FLOAT_MAX];
$tests['\'0.0\'  <=> float(inf)'] = [-1, null, '0.0 ', INF];
$tests['\'0.0\'  <=> float(-inf)'] = [1, null, '0.0 ', -INF];
$tests['\'0.0\'  <=> float(nan)'] = [1, null, '0.0 ', NAN];
$tests['\'0.0\'  <=> $closure1'] = [-1, null, '0.0 ', $closure1];
$tests['\'0.0\'  <=> $closure2'] = [-1, null, '0.0 ', $closure2];
$tests['\'0.0\'  <=> $fh1'] = [-1, null, '0.0 ', $fh1];
$tests['\'0.0\'  <=> $fh2'] = [-1, null, '0.0 ', $fh2];
$tests['\'0.0\'  <=> $proc'] = [-1, null, '0.0 ', $proc];
$tests['\'0.0\'  <=> DateTime(2024-01-01T12:00:00Z)'] = [-1, null, '0.0 ', unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'0.0\'  <=> DateTime(2024-01-01T12:00:01Z)'] = [-1, null, '0.0 ', unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'0.0\'  <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [-1, null, '0.0 ', unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'0.0\'  <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [-1, null, '0.0 ', unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'0.0\'  <=> []'] = [-1, null, '0.0 ', []];
$tests['\'0.0\'  <=> [[]]'] = [-1, null, '0.0 ', [[]]];
$tests['\'0.0\'  <=> [1 => []]'] = [-1, null, '0.0 ', [1 => []]];
$tests['\'0.0\'  <=> [1 => null]'] = [-1, null, '0.0 ', [1 => null]];
$tests['\'0.0\'  <=> [0]'] = [-1, null, '0.0 ', [0]];
$tests['\'0.0\'  <=> [0.0]'] = [-1, null, '0.0 ', [0.0]];
$tests['\'0.0\'  <=> [null]'] = [-1, null, '0.0 ', [null]];
$tests['\'0.0\'  <=> [false]'] = [-1, null, '0.0 ', [false]];
$tests['\'0.0\'  <=> [true]'] = [-1, null, '0.0 ', [true]];
$tests['\'0.0\'  <=> [\'\']'] = [-1, null, '0.0 ', ['']];
$tests['\'0.0\'  <=> [a, b, c]'] = [-1, null, '0.0 ', ['a','b','c']];
$tests['\'0.0\'  <=> [$fh1]'] = [-1, null, '0.0 ', [$fh1]];
$tests['\'0.0\'  <=> [foo => bar]'] = [-1, null, '0.0 ', ['foo' => 'bar']];
$tests['\'0.0\'  <=> object[]'] = [-1, null, '0.0 ', (object) []];
$tests['\'0.0\'  <=> object[[]]'] = [-1, null, '0.0 ', (object) [[]]];
$tests['\'0.0\'  <=> object[1 => []]'] = [-1, null, '0.0 ', (object) [1 => []]];
$tests['\'0.0\'  <=> object[1 => null]'] = [-1, null, '0.0 ', (object) [1 => null]];
$tests['\'0.0\'  <=> object[0]'] = [-1, null, '0.0 ', (object) [0]];
$tests['\'0.0\'  <=> object[0.0]'] = [-1, null, '0.0 ', (object) [0.0]];
$tests['\'0.0\'  <=> object[null]'] = [-1, null, '0.0 ', (object) [null]];
$tests['\'0.0\'  <=> object[false]'] = [-1, null, '0.0 ', (object) [false]];
$tests['\'0.0\'  <=> object[true]'] = [-1, null, '0.0 ', (object) [true]];
$tests['\'0.0\'  <=> object[\'\']'] = [-1, null, '0.0 ', (object) ['']];
$tests['\'0.0\'  <=> object[a, b, c]'] = [-1, null, '0.0 ', (object) ['a','b','c']];
$tests['\'0.0\'  <=> object[$fh1]'] = [-1, null, '0.0 ', (object) [$fh1]];
$tests['\'0.0\'  <=> object[foo => bar]'] = [-1, null, '0.0 ', (object) ['foo' => 'bar']];
$tests['\'-0.0\' <=> false'] = [1, null, '-0.0 ', false];
$tests['\'-0.0\' <=> true'] = [0, null, '-0.0 ', true];
$tests['\'-0.0\' <=> null'] = [1, null, '-0.0 ', null];
$tests['\'-0.0\' <=> 0'] = [0, null, '-0.0 ', 0];
$tests['\'-0.0\' <=> 1'] = [-1, null, '-0.0 ', 1];
$tests['\'-0.0\' <=> -1'] = [1, null, '-0.0 ', -1];
$tests['\'-0.0\' <=> 0.0'] = [0, null, '-0.0 ', 0.0];
$tests['\'-0.0\' <=> -1.0'] = [1, null, '-0.0 ', -1.0];
$tests['\'-0.0\' <=> 1.0'] = [-1, null, '-0.0 ', 1.0];
$tests['\'-0.0\' <=> \'\''] = [1, null, '-0.0 ', ''];
$tests['\'-0.0\' <=> \'0\''] = [0, null, '-0.0 ', '0'];
$tests['\'-0.0\' <=> \'-0\''] = [0, null, '-0.0 ', '-0'];
$tests['\'-0.0\' <=> \'+0\''] = [0, null, '-0.0 ', '+0'];
$tests['\'-0.0\' <=> \'0.0\''] = [0, null, '-0.0 ', '0.0'];
$tests['\'-0.0\' <=> \'-0.0\''] = [0, null, '-0.0 ', '-0.0'];
$tests['\'-0.0\' <=> \'+0.0\''] = [0, null, '-0.0 ', '+0.0'];
$tests['\'-0.0\' <=> \'1.0\''] = [-1, null, '-0.0 ', '1.0'];
$tests['\'-0.0\' <=> \'-1.0\''] = [1, null, '-0.0 ', '-1.0'];
$tests['\'-0.0\' <=> \'+1.0\''] = [-1, null, '-0.0 ', '+1.0'];
$tests['\'-0.0\' <=> \'-1\''] = [1, null, '-0.0 ', '-1'];
$tests['\'-0.0\' <=> \'+1\''] = [-1, null, '-0.0 ', '+1'];
$tests['\'-0.0\' <=> \'1\''] = [-1, null, '-0.0 ', '1'];
$tests['\'-0.0\' <=> \' 0\''] = [0, null, '-0.0 ', ' 0'];
$tests['\'-0.0\' <=> \' -0\''] = [0, null, '-0.0 ', ' -0'];
$tests['\'-0.0\' <=> \' +0\''] = [0, null, '-0.0 ', ' +0'];
$tests['\'-0.0\' <=> \' 0\' '] = [0, null, '-0.0 ', ' 0 '];
$tests['\'-0.0\' <=> \' -0\''] = [0, null, '-0.0 ', ' -0 '];
$tests['\'-0.0\' <=> \' +0\''] = [0, null, '-0.0 ', ' +0 '];
$tests['\'-0.0\' <=> \'0\' '] = [0, null, '-0.0 ', '0 '];
$tests['\'-0.0\' <=> \'-0\''] = [0, null, '-0.0 ', '-0 '];
$tests['\'-0.0\' <=> \'+0\''] = [0, null, '-0.0 ', '+0 '];
$tests['\'-0.0\' <=> \' 0.0\''] = [0, null, '-0.0 ', ' 0.0'];
$tests['\'-0.0\' <=> \' -0.0\''] = [0, null, '-0.0 ', ' -0.0'];
$tests['\'-0.0\' <=> \' +0.0\''] = [0, null, '-0.0 ', ' +0.0'];
$tests['\'-0.0\' <=> \' 0.0\' '] = [0, null, '-0.0 ', ' 0.0 '];
$tests['\'-0.0\' <=> \' -0.0\''] = [0, null, '-0.0 ', ' -0.0 '];
$tests['\'-0.0\' <=> \' +0.0\''] = [0, null, '-0.0 ', ' +0.0 '];
$tests['\'-0.0\' <=> \'0.0\' '] = [0, null, '-0.0 ', '0.0 '];
$tests['\'-0.0\' <=> \'-0.0\''] = [0, null, '-0.0 ', '-0.0 '];
$tests['\'-0.0\' <=> \'+0.0\''] = [0, null, '-0.0 ', '+0.0 '];
$tests['\'-0.0\' <=> \'03\''] = [-1, null, '-0.0 ', '03'];
$tests['\'-0.0\' <=> \'2abc\''] = [-1, null, '-0.0 ', '2abc'];
$tests['\'-0.0\' <=> \'2.5abc\''] = [-1, null, '-0.0 ', '2.5abc'];
$tests['\'-0.0\' <=> \'abc2abc\''] = [-1, null, '-0.0 ', 'abc2abc'];
$tests['\'-0.0\' <=> \'abc2.5abc\''] = [-1, null, '-0.0 ', 'abc2.5abc'];
$tests['\'-0.0\' <=> \'\\0\''] = [1, null, '-0.0 ', hex2bin('00')];
$tests['\'-0.0\' <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [-1, null, '-0.0 ', hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['\'-0.0\' <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [1, null, '-0.0 ', hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['\'-0.0\' <=> 12.0000000000001'] = [-1, null, '-0.0 ', 12.0000000000001];
$tests['\'-0.0\' <=> 12.000000000000002'] = [-1, null, '-0.0 ', 12.000000000000002];
$tests['\'-0.0\' <=> pi'] = [-1, null, '-0.0 ', M_PI];
$tests['\'-0.0\' <=> int(max)'] = [-1, null, '-0.0 ', PHP_INT_MAX];
$tests['\'-0.0\' <=> int(min)'] = [1, null, '-0.0 ', PHP_INT_MIN];
$tests['\'-0.0\' <=> float(epsilon)'] = [-1, null, '-0.0 ', PHP_FLOAT_EPSILON];
$tests['\'-0.0\' <=> float(min)'] = [-1, null, '-0.0 ', PHP_FLOAT_MIN];
$tests['\'-0.0\' <=> float(max)'] = [-1, null, '-0.0 ', PHP_FLOAT_MAX];
$tests['\'-0.0\' <=> float(inf)'] = [-1, null, '-0.0 ', INF];
$tests['\'-0.0\' <=> float(-inf)'] = [1, null, '-0.0 ', -INF];
$tests['\'-0.0\' <=> float(nan)'] = [1, null, '-0.0 ', NAN];
$tests['\'-0.0\' <=> $closure1'] = [-1, null, '-0.0 ', $closure1];
$tests['\'-0.0\' <=> $closure2'] = [-1, null, '-0.0 ', $closure2];
$tests['\'-0.0\' <=> $fh1'] = [-1, null, '-0.0 ', $fh1];
$tests['\'-0.0\' <=> $fh2'] = [-1, null, '-0.0 ', $fh2];
$tests['\'-0.0\' <=> $proc'] = [-1, null, '-0.0 ', $proc];
$tests['\'-0.0\' <=> DateTime(2024-01-01T12:00:00Z)'] = [-1, null, '-0.0 ', unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'-0.0\' <=> DateTime(2024-01-01T12:00:01Z)'] = [-1, null, '-0.0 ', unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'-0.0\' <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [-1, null, '-0.0 ', unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'-0.0\' <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [-1, null, '-0.0 ', unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'-0.0\' <=> []'] = [-1, null, '-0.0 ', []];
$tests['\'-0.0\' <=> [[]]'] = [-1, null, '-0.0 ', [[]]];
$tests['\'-0.0\' <=> [1 => []]'] = [-1, null, '-0.0 ', [1 => []]];
$tests['\'-0.0\' <=> [1 => null]'] = [-1, null, '-0.0 ', [1 => null]];
$tests['\'-0.0\' <=> [0]'] = [-1, null, '-0.0 ', [0]];
$tests['\'-0.0\' <=> [0.0]'] = [-1, null, '-0.0 ', [0.0]];
$tests['\'-0.0\' <=> [null]'] = [-1, null, '-0.0 ', [null]];
$tests['\'-0.0\' <=> [false]'] = [-1, null, '-0.0 ', [false]];
$tests['\'-0.0\' <=> [true]'] = [-1, null, '-0.0 ', [true]];
$tests['\'-0.0\' <=> [\'\']'] = [-1, null, '-0.0 ', ['']];
$tests['\'-0.0\' <=> [a, b, c]'] = [-1, null, '-0.0 ', ['a','b','c']];
$tests['\'-0.0\' <=> [$fh1]'] = [-1, null, '-0.0 ', [$fh1]];
$tests['\'-0.0\' <=> [foo => bar]'] = [-1, null, '-0.0 ', ['foo' => 'bar']];
$tests['\'-0.0\' <=> object[]'] = [-1, null, '-0.0 ', (object) []];
$tests['\'-0.0\' <=> object[[]]'] = [-1, null, '-0.0 ', (object) [[]]];
$tests['\'-0.0\' <=> object[1 => []]'] = [-1, null, '-0.0 ', (object) [1 => []]];
$tests['\'-0.0\' <=> object[1 => null]'] = [-1, null, '-0.0 ', (object) [1 => null]];
$tests['\'-0.0\' <=> object[0]'] = [-1, null, '-0.0 ', (object) [0]];
$tests['\'-0.0\' <=> object[0.0]'] = [-1, null, '-0.0 ', (object) [0.0]];
$tests['\'-0.0\' <=> object[null]'] = [-1, null, '-0.0 ', (object) [null]];
$tests['\'-0.0\' <=> object[false]'] = [-1, null, '-0.0 ', (object) [false]];
$tests['\'-0.0\' <=> object[true]'] = [-1, null, '-0.0 ', (object) [true]];
$tests['\'-0.0\' <=> object[\'\']'] = [-1, null, '-0.0 ', (object) ['']];
$tests['\'-0.0\' <=> object[a, b, c]'] = [-1, null, '-0.0 ', (object) ['a','b','c']];
$tests['\'-0.0\' <=> object[$fh1]'] = [-1, null, '-0.0 ', (object) [$fh1]];
$tests['\'-0.0\' <=> object[foo => bar]'] = [-1, null, '-0.0 ', (object) ['foo' => 'bar']];
$tests['\'+0.0\' <=> false'] = [1, null, '+0.0 ', false];
$tests['\'+0.0\' <=> true'] = [0, null, '+0.0 ', true];
$tests['\'+0.0\' <=> null'] = [1, null, '+0.0 ', null];
$tests['\'+0.0\' <=> 0'] = [0, null, '+0.0 ', 0];
$tests['\'+0.0\' <=> 1'] = [-1, null, '+0.0 ', 1];
$tests['\'+0.0\' <=> -1'] = [1, null, '+0.0 ', -1];
$tests['\'+0.0\' <=> 0.0'] = [0, null, '+0.0 ', 0.0];
$tests['\'+0.0\' <=> -1.0'] = [1, null, '+0.0 ', -1.0];
$tests['\'+0.0\' <=> 1.0'] = [-1, null, '+0.0 ', 1.0];
$tests['\'+0.0\' <=> \'\''] = [1, null, '+0.0 ', ''];
$tests['\'+0.0\' <=> \'0\''] = [0, null, '+0.0 ', '0'];
$tests['\'+0.0\' <=> \'-0\''] = [0, null, '+0.0 ', '-0'];
$tests['\'+0.0\' <=> \'+0\''] = [0, null, '+0.0 ', '+0'];
$tests['\'+0.0\' <=> \'0.0\''] = [0, null, '+0.0 ', '0.0'];
$tests['\'+0.0\' <=> \'-0.0\''] = [0, null, '+0.0 ', '-0.0'];
$tests['\'+0.0\' <=> \'+0.0\''] = [0, null, '+0.0 ', '+0.0'];
$tests['\'+0.0\' <=> \'1.0\''] = [-1, null, '+0.0 ', '1.0'];
$tests['\'+0.0\' <=> \'-1.0\''] = [1, null, '+0.0 ', '-1.0'];
$tests['\'+0.0\' <=> \'+1.0\''] = [-1, null, '+0.0 ', '+1.0'];
$tests['\'+0.0\' <=> \'-1\''] = [1, null, '+0.0 ', '-1'];
$tests['\'+0.0\' <=> \'+1\''] = [-1, null, '+0.0 ', '+1'];
$tests['\'+0.0\' <=> \'1\''] = [-1, null, '+0.0 ', '1'];
$tests['\'+0.0\' <=> \' 0\''] = [0, null, '+0.0 ', ' 0'];
$tests['\'+0.0\' <=> \' -0\''] = [0, null, '+0.0 ', ' -0'];
$tests['\'+0.0\' <=> \' +0\''] = [0, null, '+0.0 ', ' +0'];
$tests['\'+0.0\' <=> \' 0\' '] = [0, null, '+0.0 ', ' 0 '];
$tests['\'+0.0\' <=> \' -0\''] = [0, null, '+0.0 ', ' -0 '];
$tests['\'+0.0\' <=> \' +0\''] = [0, null, '+0.0 ', ' +0 '];
$tests['\'+0.0\' <=> \'0\' '] = [0, null, '+0.0 ', '0 '];
$tests['\'+0.0\' <=> \'-0\''] = [0, null, '+0.0 ', '-0 '];
$tests['\'+0.0\' <=> \'+0\''] = [0, null, '+0.0 ', '+0 '];
$tests['\'+0.0\' <=> \' 0.0\''] = [0, null, '+0.0 ', ' 0.0'];
$tests['\'+0.0\' <=> \' -0.0\''] = [0, null, '+0.0 ', ' -0.0'];
$tests['\'+0.0\' <=> \' +0.0\''] = [0, null, '+0.0 ', ' +0.0'];
$tests['\'+0.0\' <=> \' 0.0\' '] = [0, null, '+0.0 ', ' 0.0 '];
$tests['\'+0.0\' <=> \' -0.0\''] = [0, null, '+0.0 ', ' -0.0 '];
$tests['\'+0.0\' <=> \' +0.0\''] = [0, null, '+0.0 ', ' +0.0 '];
$tests['\'+0.0\' <=> \'0.0\' '] = [0, null, '+0.0 ', '0.0 '];
$tests['\'+0.0\' <=> \'-0.0\''] = [0, null, '+0.0 ', '-0.0 '];
$tests['\'+0.0\' <=> \'+0.0\''] = [0, null, '+0.0 ', '+0.0 '];
$tests['\'+0.0\' <=> \'03\''] = [-1, null, '+0.0 ', '03'];
$tests['\'+0.0\' <=> \'2abc\''] = [-1, null, '+0.0 ', '2abc'];
$tests['\'+0.0\' <=> \'2.5abc\''] = [-1, null, '+0.0 ', '2.5abc'];
$tests['\'+0.0\' <=> \'abc2abc\''] = [-1, null, '+0.0 ', 'abc2abc'];
$tests['\'+0.0\' <=> \'abc2.5abc\''] = [-1, null, '+0.0 ', 'abc2.5abc'];
$tests['\'+0.0\' <=> \'\\0\''] = [1, null, '+0.0 ', hex2bin('00')];
$tests['\'+0.0\' <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [-1, null, '+0.0 ', hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['\'+0.0\' <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [1, null, '+0.0 ', hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['\'+0.0\' <=> 12.0000000000001'] = [-1, null, '+0.0 ', 12.0000000000001];
$tests['\'+0.0\' <=> 12.000000000000002'] = [-1, null, '+0.0 ', 12.000000000000002];
$tests['\'+0.0\' <=> pi'] = [-1, null, '+0.0 ', M_PI];
$tests['\'+0.0\' <=> int(max)'] = [-1, null, '+0.0 ', PHP_INT_MAX];
$tests['\'+0.0\' <=> int(min)'] = [1, null, '+0.0 ', PHP_INT_MIN];
$tests['\'+0.0\' <=> float(epsilon)'] = [-1, null, '+0.0 ', PHP_FLOAT_EPSILON];
$tests['\'+0.0\' <=> float(min)'] = [-1, null, '+0.0 ', PHP_FLOAT_MIN];
$tests['\'+0.0\' <=> float(max)'] = [-1, null, '+0.0 ', PHP_FLOAT_MAX];
$tests['\'+0.0\' <=> float(inf)'] = [-1, null, '+0.0 ', INF];
$tests['\'+0.0\' <=> float(-inf)'] = [1, null, '+0.0 ', -INF];
$tests['\'+0.0\' <=> float(nan)'] = [1, null, '+0.0 ', NAN];
$tests['\'+0.0\' <=> $closure1'] = [-1, null, '+0.0 ', $closure1];
$tests['\'+0.0\' <=> $closure2'] = [-1, null, '+0.0 ', $closure2];
$tests['\'+0.0\' <=> $fh1'] = [-1, null, '+0.0 ', $fh1];
$tests['\'+0.0\' <=> $fh2'] = [-1, null, '+0.0 ', $fh2];
$tests['\'+0.0\' <=> $proc'] = [-1, null, '+0.0 ', $proc];
$tests['\'+0.0\' <=> DateTime(2024-01-01T12:00:00Z)'] = [-1, null, '+0.0 ', unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'+0.0\' <=> DateTime(2024-01-01T12:00:01Z)'] = [-1, null, '+0.0 ', unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'+0.0\' <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [-1, null, '+0.0 ', unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'+0.0\' <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [-1, null, '+0.0 ', unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'+0.0\' <=> []'] = [-1, null, '+0.0 ', []];
$tests['\'+0.0\' <=> [[]]'] = [-1, null, '+0.0 ', [[]]];
$tests['\'+0.0\' <=> [1 => []]'] = [-1, null, '+0.0 ', [1 => []]];
$tests['\'+0.0\' <=> [1 => null]'] = [-1, null, '+0.0 ', [1 => null]];
$tests['\'+0.0\' <=> [0]'] = [-1, null, '+0.0 ', [0]];
$tests['\'+0.0\' <=> [0.0]'] = [-1, null, '+0.0 ', [0.0]];
$tests['\'+0.0\' <=> [null]'] = [-1, null, '+0.0 ', [null]];
$tests['\'+0.0\' <=> [false]'] = [-1, null, '+0.0 ', [false]];
$tests['\'+0.0\' <=> [true]'] = [-1, null, '+0.0 ', [true]];
$tests['\'+0.0\' <=> [\'\']'] = [-1, null, '+0.0 ', ['']];
$tests['\'+0.0\' <=> [a, b, c]'] = [-1, null, '+0.0 ', ['a','b','c']];
$tests['\'+0.0\' <=> [$fh1]'] = [-1, null, '+0.0 ', [$fh1]];
$tests['\'+0.0\' <=> [foo => bar]'] = [-1, null, '+0.0 ', ['foo' => 'bar']];
$tests['\'+0.0\' <=> object[]'] = [-1, null, '+0.0 ', (object) []];
$tests['\'+0.0\' <=> object[[]]'] = [-1, null, '+0.0 ', (object) [[]]];
$tests['\'+0.0\' <=> object[1 => []]'] = [-1, null, '+0.0 ', (object) [1 => []]];
$tests['\'+0.0\' <=> object[1 => null]'] = [-1, null, '+0.0 ', (object) [1 => null]];
$tests['\'+0.0\' <=> object[0]'] = [-1, null, '+0.0 ', (object) [0]];
$tests['\'+0.0\' <=> object[0.0]'] = [-1, null, '+0.0 ', (object) [0.0]];
$tests['\'+0.0\' <=> object[null]'] = [-1, null, '+0.0 ', (object) [null]];
$tests['\'+0.0\' <=> object[false]'] = [-1, null, '+0.0 ', (object) [false]];
$tests['\'+0.0\' <=> object[true]'] = [-1, null, '+0.0 ', (object) [true]];
$tests['\'+0.0\' <=> object[\'\']'] = [-1, null, '+0.0 ', (object) ['']];
$tests['\'+0.0\' <=> object[a, b, c]'] = [-1, null, '+0.0 ', (object) ['a','b','c']];
$tests['\'+0.0\' <=> object[$fh1]'] = [-1, null, '+0.0 ', (object) [$fh1]];
$tests['\'+0.0\' <=> object[foo => bar]'] = [-1, null, '+0.0 ', (object) ['foo' => 'bar']];
$tests['\'03\' <=> false'] = [1, null, '03', false];
$tests['\'03\' <=> true'] = [0, null, '03', true];
$tests['\'03\' <=> null'] = [1, null, '03', null];
$tests['\'03\' <=> 0'] = [1, null, '03', 0];
$tests['\'03\' <=> 1'] = [1, null, '03', 1];
$tests['\'03\' <=> -1'] = [1, null, '03', -1];
$tests['\'03\' <=> 0.0'] = [1, null, '03', 0.0];
$tests['\'03\' <=> -1.0'] = [1, null, '03', -1.0];
$tests['\'03\' <=> 1.0'] = [1, null, '03', 1.0];
$tests['\'03\' <=> \'\''] = [1, null, '03', ''];
$tests['\'03\' <=> \'0\''] = [1, null, '03', '0'];
$tests['\'03\' <=> \'-0\''] = [1, null, '03', '-0'];
$tests['\'03\' <=> \'+0\''] = [1, null, '03', '+0'];
$tests['\'03\' <=> \'0.0\''] = [1, null, '03', '0.0'];
$tests['\'03\' <=> \'-0.0\''] = [1, null, '03', '-0.0'];
$tests['\'03\' <=> \'+0.0\''] = [1, null, '03', '+0.0'];
$tests['\'03\' <=> \'1.0\''] = [1, null, '03', '1.0'];
$tests['\'03\' <=> \'-1.0\''] = [1, null, '03', '-1.0'];
$tests['\'03\' <=> \'+1.0\''] = [1, null, '03', '+1.0'];
$tests['\'03\' <=> \'-1\''] = [1, null, '03', '-1'];
$tests['\'03\' <=> \'+1\''] = [1, null, '03', '+1'];
$tests['\'03\' <=> \'1\''] = [1, null, '03', '1'];
$tests['\'03\' <=> \' 0\''] = [1, null, '03', ' 0'];
$tests['\'03\' <=> \' -0\''] = [1, null, '03', ' -0'];
$tests['\'03\' <=> \' +0\''] = [1, null, '03', ' +0'];
$tests['\'03\' <=> \' 0\' '] = [1, null, '03', ' 0 '];
$tests['\'03\' <=> \' -0\''] = [1, null, '03', ' -0 '];
$tests['\'03\' <=> \' +0\''] = [1, null, '03', ' +0 '];
$tests['\'03\' <=> \'0\' '] = [1, null, '03', '0 '];
$tests['\'03\' <=> \'-0\''] = [1, null, '03', '-0 '];
$tests['\'03\' <=> \'+0\''] = [1, null, '03', '+0 '];
$tests['\'03\' <=> \' 0.0\''] = [1, null, '03', ' 0.0'];
$tests['\'03\' <=> \' -0.0\''] = [1, null, '03', ' -0.0'];
$tests['\'03\' <=> \' +0.0\''] = [1, null, '03', ' +0.0'];
$tests['\'03\' <=> \' 0.0\' '] = [1, null, '03', ' 0.0 '];
$tests['\'03\' <=> \' -0.0\''] = [1, null, '03', ' -0.0 '];
$tests['\'03\' <=> \' +0.0\''] = [1, null, '03', ' +0.0 '];
$tests['\'03\' <=> \'0.0\' '] = [1, null, '03', '0.0 '];
$tests['\'03\' <=> \'-0.0\''] = [1, null, '03', '-0.0 '];
$tests['\'03\' <=> \'+0.0\''] = [1, null, '03', '+0.0 '];
$tests['\'03\' <=> \'03\''] = [0, null, '03', '03'];
$tests['\'03\' <=> \'2abc\''] = [-1, null, '03', '2abc'];
$tests['\'03\' <=> \'2.5abc\''] = [-1, null, '03', '2.5abc'];
$tests['\'03\' <=> \'abc2abc\''] = [-1, null, '03', 'abc2abc'];
$tests['\'03\' <=> \'abc2.5abc\''] = [-1, null, '03', 'abc2.5abc'];
$tests['\'03\' <=> \'\\0\''] = [1, null, '03', hex2bin('00')];
$tests['\'03\' <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [-1, null, '03', hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['\'03\' <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [1, null, '03', hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['\'03\' <=> 12.0000000000001'] = [-1, null, '03', 12.0000000000001];
$tests['\'03\' <=> 12.000000000000002'] = [-1, null, '03', 12.000000000000002];
$tests['\'03\' <=> pi'] = [-1, null, '03', M_PI];
$tests['\'03\' <=> int(max)'] = [-1, null, '03', PHP_INT_MAX];
$tests['\'03\' <=> int(min)'] = [1, null, '03', PHP_INT_MIN];
$tests['\'03\' <=> float(epsilon)'] = [1, null, '03', PHP_FLOAT_EPSILON];
$tests['\'03\' <=> float(min)'] = [1, null, '03', PHP_FLOAT_MIN];
$tests['\'03\' <=> float(max)'] = [-1, null, '03', PHP_FLOAT_MAX];
$tests['\'03\' <=> float(inf)'] = [-1, null, '03', INF];
$tests['\'03\' <=> float(-inf)'] = [1, null, '03', -INF];
$tests['\'03\' <=> float(nan)'] = [1, null, '03', NAN];
$tests['\'03\' <=> $closure1'] = [-1, null, '03', $closure1];
$tests['\'03\' <=> $closure2'] = [-1, null, '03', $closure2];
$tests['\'03\' <=> $fh1'] = [-1, null, '03', $fh1];
$tests['\'03\' <=> $fh2'] = [-1, null, '03', $fh2];
$tests['\'03\' <=> $proc'] = [-1, null, '03', $proc];
$tests['\'03\' <=> DateTime(2024-01-01T12:00:00Z)'] = [-1, null, '03', unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'03\' <=> DateTime(2024-01-01T12:00:01Z)'] = [-1, null, '03', unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'03\' <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [-1, null, '03', unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'03\' <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [-1, null, '03', unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'03\' <=> []'] = [-1, null, '03', []];
$tests['\'03\' <=> [[]]'] = [-1, null, '03', [[]]];
$tests['\'03\' <=> [1 => []]'] = [-1, null, '03', [1 => []]];
$tests['\'03\' <=> [1 => null]'] = [-1, null, '03', [1 => null]];
$tests['\'03\' <=> [0]'] = [-1, null, '03', [0]];
$tests['\'03\' <=> [0.0]'] = [-1, null, '03', [0.0]];
$tests['\'03\' <=> [null]'] = [-1, null, '03', [null]];
$tests['\'03\' <=> [false]'] = [-1, null, '03', [false]];
$tests['\'03\' <=> [true]'] = [-1, null, '03', [true]];
$tests['\'03\' <=> [\'\']'] = [-1, null, '03', ['']];
$tests['\'03\' <=> [a, b, c]'] = [-1, null, '03', ['a','b','c']];
$tests['\'03\' <=> [$fh1]'] = [-1, null, '03', [$fh1]];
$tests['\'03\' <=> [foo => bar]'] = [-1, null, '03', ['foo' => 'bar']];
$tests['\'03\' <=> object[]'] = [-1, null, '03', (object) []];
$tests['\'03\' <=> object[[]]'] = [-1, null, '03', (object) [[]]];
$tests['\'03\' <=> object[1 => []]'] = [-1, null, '03', (object) [1 => []]];
$tests['\'03\' <=> object[1 => null]'] = [-1, null, '03', (object) [1 => null]];
$tests['\'03\' <=> object[0]'] = [-1, null, '03', (object) [0]];
$tests['\'03\' <=> object[0.0]'] = [-1, null, '03', (object) [0.0]];
$tests['\'03\' <=> object[null]'] = [-1, null, '03', (object) [null]];
$tests['\'03\' <=> object[false]'] = [-1, null, '03', (object) [false]];
$tests['\'03\' <=> object[true]'] = [-1, null, '03', (object) [true]];
$tests['\'03\' <=> object[\'\']'] = [-1, null, '03', (object) ['']];
$tests['\'03\' <=> object[a, b, c]'] = [-1, null, '03', (object) ['a','b','c']];
$tests['\'03\' <=> object[$fh1]'] = [-1, null, '03', (object) [$fh1]];
$tests['\'03\' <=> object[foo => bar]'] = [-1, null, '03', (object) ['foo' => 'bar']];
$tests['\'2abc\' <=> false'] = [1, null, '2abc', false];
$tests['\'2abc\' <=> true'] = [0, null, '2abc', true];
$tests['\'2abc\' <=> null'] = [1, null, '2abc', null];
$tests['\'2abc\' <=> 0'] = [1, null, '2abc', 0];
$tests['\'2abc\' <=> 1'] = [1, null, '2abc', 1];
$tests['\'2abc\' <=> -1'] = [1, null, '2abc', -1];
$tests['\'2abc\' <=> 0.0'] = [1, null, '2abc', 0.0];
$tests['\'2abc\' <=> -1.0'] = [1, null, '2abc', -1.0];
$tests['\'2abc\' <=> 1.0'] = [1, null, '2abc', 1.0];
$tests['\'2abc\' <=> \'\''] = [1, null, '2abc', ''];
$tests['\'2abc\' <=> \'0\''] = [1, null, '2abc', '0'];
$tests['\'2abc\' <=> \'-0\''] = [1, null, '2abc', '-0'];
$tests['\'2abc\' <=> \'+0\''] = [1, null, '2abc', '+0'];
$tests['\'2abc\' <=> \'0.0\''] = [1, null, '2abc', '0.0'];
$tests['\'2abc\' <=> \'-0.0\''] = [1, null, '2abc', '-0.0'];
$tests['\'2abc\' <=> \'+0.0\''] = [1, null, '2abc', '+0.0'];
$tests['\'2abc\' <=> \'1.0\''] = [1, null, '2abc', '1.0'];
$tests['\'2abc\' <=> \'-1.0\''] = [1, null, '2abc', '-1.0'];
$tests['\'2abc\' <=> \'+1.0\''] = [1, null, '2abc', '+1.0'];
$tests['\'2abc\' <=> \'-1\''] = [1, null, '2abc', '-1'];
$tests['\'2abc\' <=> \'+1\''] = [1, null, '2abc', '+1'];
$tests['\'2abc\' <=> \'1\''] = [1, null, '2abc', '1'];
$tests['\'2abc\' <=> \' 0\''] = [1, null, '2abc', ' 0'];
$tests['\'2abc\' <=> \' -0\''] = [1, null, '2abc', ' -0'];
$tests['\'2abc\' <=> \' +0\''] = [1, null, '2abc', ' +0'];
$tests['\'2abc\' <=> \' 0\' '] = [1, null, '2abc', ' 0 '];
$tests['\'2abc\' <=> \' -0\''] = [1, null, '2abc', ' -0 '];
$tests['\'2abc\' <=> \' +0\''] = [1, null, '2abc', ' +0 '];
$tests['\'2abc\' <=> \'0\' '] = [1, null, '2abc', '0 '];
$tests['\'2abc\' <=> \'-0\''] = [1, null, '2abc', '-0 '];
$tests['\'2abc\' <=> \'+0\''] = [1, null, '2abc', '+0 '];
$tests['\'2abc\' <=> \' 0.0\''] = [1, null, '2abc', ' 0.0'];
$tests['\'2abc\' <=> \' -0.0\''] = [1, null, '2abc', ' -0.0'];
$tests['\'2abc\' <=> \' +0.0\''] = [1, null, '2abc', ' +0.0'];
$tests['\'2abc\' <=> \' 0.0\' '] = [1, null, '2abc', ' 0.0 '];
$tests['\'2abc\' <=> \' -0.0\''] = [1, null, '2abc', ' -0.0 '];
$tests['\'2abc\' <=> \' +0.0\''] = [1, null, '2abc', ' +0.0 '];
$tests['\'2abc\' <=> \'0.0\' '] = [1, null, '2abc', '0.0 '];
$tests['\'2abc\' <=> \'-0.0\''] = [1, null, '2abc', '-0.0 '];
$tests['\'2abc\' <=> \'+0.0\''] = [1, null, '2abc', '+0.0 '];
$tests['\'2abc\' <=> \'03\''] = [1, null, '2abc', '03'];
$tests['\'2abc\' <=> \'2abc\''] = [0, null, '2abc', '2abc'];
$tests['\'2abc\' <=> \'2.5abc\''] = [1, null, '2abc', '2.5abc'];
$tests['\'2abc\' <=> \'abc2abc\''] = [-1, null, '2abc', 'abc2abc'];
$tests['\'2abc\' <=> \'abc2.5abc\''] = [-1, null, '2abc', 'abc2.5abc'];
$tests['\'2abc\' <=> \'\\0\''] = [1, null, '2abc', hex2bin('00')];
$tests['\'2abc\' <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [1, null, '2abc', hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['\'2abc\' <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [1, null, '2abc', hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['\'2abc\' <=> 12.0000000000001'] = [1, null, '2abc', 12.0000000000001];
$tests['\'2abc\' <=> 12.000000000000002'] = [1, null, '2abc', 12.000000000000002];
$tests['\'2abc\' <=> pi'] = [-1, null, '2abc', M_PI];
$tests['\'2abc\' <=> int(max)'] = [-1, null, '2abc', PHP_INT_MAX];
$tests['\'2abc\' <=> int(min)'] = [1, null, '2abc', PHP_INT_MIN];
$tests['\'2abc\' <=> float(epsilon)'] = [1, null, '2abc', PHP_FLOAT_EPSILON];
$tests['\'2abc\' <=> float(min)'] = [1, null, '2abc', PHP_FLOAT_MIN];
$tests['\'2abc\' <=> float(max)'] = [1, null, '2abc', PHP_FLOAT_MAX];
$tests['\'2abc\' <=> float(inf)'] = [-1, null, '2abc', INF];
$tests['\'2abc\' <=> float(-inf)'] = [1, null, '2abc', -INF];
$tests['\'2abc\' <=> float(nan)'] = [1, null, '2abc', NAN];
$tests['\'2abc\' <=> $closure1'] = [-1, null, '2abc', $closure1];
$tests['\'2abc\' <=> $closure2'] = [-1, null, '2abc', $closure2];
$tests['\'2abc\' <=> $fh1'] = [-1, null, '2abc', $fh1];
$tests['\'2abc\' <=> $fh2'] = [-1, null, '2abc', $fh2];
$tests['\'2abc\' <=> $proc'] = [-1, null, '2abc', $proc];
$tests['\'2abc\' <=> DateTime(2024-01-01T12:00:00Z)'] = [-1, null, '2abc', unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'2abc\' <=> DateTime(2024-01-01T12:00:01Z)'] = [-1, null, '2abc', unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'2abc\' <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [-1, null, '2abc', unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'2abc\' <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [-1, null, '2abc', unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'2abc\' <=> []'] = [-1, null, '2abc', []];
$tests['\'2abc\' <=> [[]]'] = [-1, null, '2abc', [[]]];
$tests['\'2abc\' <=> [1 => []]'] = [-1, null, '2abc', [1 => []]];
$tests['\'2abc\' <=> [1 => null]'] = [-1, null, '2abc', [1 => null]];
$tests['\'2abc\' <=> [0]'] = [-1, null, '2abc', [0]];
$tests['\'2abc\' <=> [0.0]'] = [-1, null, '2abc', [0.0]];
$tests['\'2abc\' <=> [null]'] = [-1, null, '2abc', [null]];
$tests['\'2abc\' <=> [false]'] = [-1, null, '2abc', [false]];
$tests['\'2abc\' <=> [true]'] = [-1, null, '2abc', [true]];
$tests['\'2abc\' <=> [\'\']'] = [-1, null, '2abc', ['']];
$tests['\'2abc\' <=> [a, b, c]'] = [-1, null, '2abc', ['a','b','c']];
$tests['\'2abc\' <=> [$fh1]'] = [-1, null, '2abc', [$fh1]];
$tests['\'2abc\' <=> [foo => bar]'] = [-1, null, '2abc', ['foo' => 'bar']];
$tests['\'2abc\' <=> object[]'] = [-1, null, '2abc', (object) []];
$tests['\'2abc\' <=> object[[]]'] = [-1, null, '2abc', (object) [[]]];
$tests['\'2abc\' <=> object[1 => []]'] = [-1, null, '2abc', (object) [1 => []]];
$tests['\'2abc\' <=> object[1 => null]'] = [-1, null, '2abc', (object) [1 => null]];
$tests['\'2abc\' <=> object[0]'] = [-1, null, '2abc', (object) [0]];
$tests['\'2abc\' <=> object[0.0]'] = [-1, null, '2abc', (object) [0.0]];
$tests['\'2abc\' <=> object[null]'] = [-1, null, '2abc', (object) [null]];
$tests['\'2abc\' <=> object[false]'] = [-1, null, '2abc', (object) [false]];
$tests['\'2abc\' <=> object[true]'] = [-1, null, '2abc', (object) [true]];
$tests['\'2abc\' <=> object[\'\']'] = [-1, null, '2abc', (object) ['']];
$tests['\'2abc\' <=> object[a, b, c]'] = [-1, null, '2abc', (object) ['a','b','c']];
$tests['\'2abc\' <=> object[$fh1]'] = [-1, null, '2abc', (object) [$fh1]];
$tests['\'2abc\' <=> object[foo => bar]'] = [-1, null, '2abc', (object) ['foo' => 'bar']];
$tests['\'2.5abc\' <=> false'] = [1, null, '2.5abc', false];
$tests['\'2.5abc\' <=> true'] = [0, null, '2.5abc', true];
$tests['\'2.5abc\' <=> null'] = [1, null, '2.5abc', null];
$tests['\'2.5abc\' <=> 0'] = [1, null, '2.5abc', 0];
$tests['\'2.5abc\' <=> 1'] = [1, null, '2.5abc', 1];
$tests['\'2.5abc\' <=> -1'] = [1, null, '2.5abc', -1];
$tests['\'2.5abc\' <=> 0.0'] = [1, null, '2.5abc', 0.0];
$tests['\'2.5abc\' <=> -1.0'] = [1, null, '2.5abc', -1.0];
$tests['\'2.5abc\' <=> 1.0'] = [1, null, '2.5abc', 1.0];
$tests['\'2.5abc\' <=> \'\''] = [1, null, '2.5abc', ''];
$tests['\'2.5abc\' <=> \'0\''] = [1, null, '2.5abc', '0'];
$tests['\'2.5abc\' <=> \'-0\''] = [1, null, '2.5abc', '-0'];
$tests['\'2.5abc\' <=> \'+0\''] = [1, null, '2.5abc', '+0'];
$tests['\'2.5abc\' <=> \'0.0\''] = [1, null, '2.5abc', '0.0'];
$tests['\'2.5abc\' <=> \'-0.0\''] = [1, null, '2.5abc', '-0.0'];
$tests['\'2.5abc\' <=> \'+0.0\''] = [1, null, '2.5abc', '+0.0'];
$tests['\'2.5abc\' <=> \'1.0\''] = [1, null, '2.5abc', '1.0'];
$tests['\'2.5abc\' <=> \'-1.0\''] = [1, null, '2.5abc', '-1.0'];
$tests['\'2.5abc\' <=> \'+1.0\''] = [1, null, '2.5abc', '+1.0'];
$tests['\'2.5abc\' <=> \'-1\''] = [1, null, '2.5abc', '-1'];
$tests['\'2.5abc\' <=> \'+1\''] = [1, null, '2.5abc', '+1'];
$tests['\'2.5abc\' <=> \'1\''] = [1, null, '2.5abc', '1'];
$tests['\'2.5abc\' <=> \' 0\''] = [1, null, '2.5abc', ' 0'];
$tests['\'2.5abc\' <=> \' -0\''] = [1, null, '2.5abc', ' -0'];
$tests['\'2.5abc\' <=> \' +0\''] = [1, null, '2.5abc', ' +0'];
$tests['\'2.5abc\' <=> \' 0\' '] = [1, null, '2.5abc', ' 0 '];
$tests['\'2.5abc\' <=> \' -0\''] = [1, null, '2.5abc', ' -0 '];
$tests['\'2.5abc\' <=> \' +0\''] = [1, null, '2.5abc', ' +0 '];
$tests['\'2.5abc\' <=> \'0\' '] = [1, null, '2.5abc', '0 '];
$tests['\'2.5abc\' <=> \'-0\''] = [1, null, '2.5abc', '-0 '];
$tests['\'2.5abc\' <=> \'+0\''] = [1, null, '2.5abc', '+0 '];
$tests['\'2.5abc\' <=> \' 0.0\''] = [1, null, '2.5abc', ' 0.0'];
$tests['\'2.5abc\' <=> \' -0.0\''] = [1, null, '2.5abc', ' -0.0'];
$tests['\'2.5abc\' <=> \' +0.0\''] = [1, null, '2.5abc', ' +0.0'];
$tests['\'2.5abc\' <=> \' 0.0\' '] = [1, null, '2.5abc', ' 0.0 '];
$tests['\'2.5abc\' <=> \' -0.0\''] = [1, null, '2.5abc', ' -0.0 '];
$tests['\'2.5abc\' <=> \' +0.0\''] = [1, null, '2.5abc', ' +0.0 '];
$tests['\'2.5abc\' <=> \'0.0\' '] = [1, null, '2.5abc', '0.0 '];
$tests['\'2.5abc\' <=> \'-0.0\''] = [1, null, '2.5abc', '-0.0 '];
$tests['\'2.5abc\' <=> \'+0.0\''] = [1, null, '2.5abc', '+0.0 '];
$tests['\'2.5abc\' <=> \'03\''] = [1, null, '2.5abc', '03'];
$tests['\'2.5abc\' <=> \'2abc\''] = [-1, null, '2.5abc', '2abc'];
$tests['\'2.5abc\' <=> \'2.5abc\''] = [0, null, '2.5abc', '2.5abc'];
$tests['\'2.5abc\' <=> \'abc2abc\''] = [-1, null, '2.5abc', 'abc2abc'];
$tests['\'2.5abc\' <=> \'abc2.5abc\''] = [-1, null, '2.5abc', 'abc2.5abc'];
$tests['\'2.5abc\' <=> \'\\0\''] = [1, null, '2.5abc', hex2bin('00')];
$tests['\'2.5abc\' <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [1, null, '2.5abc', hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['\'2.5abc\' <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [1, null, '2.5abc', hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['\'2.5abc\' <=> 12.0000000000001'] = [1, null, '2.5abc', 12.0000000000001];
$tests['\'2.5abc\' <=> 12.000000000000002'] = [1, null, '2.5abc', 12.000000000000002];
$tests['\'2.5abc\' <=> pi'] = [-1, null, '2.5abc', M_PI];
$tests['\'2.5abc\' <=> int(max)'] = [-1, null, '2.5abc', PHP_INT_MAX];
$tests['\'2.5abc\' <=> int(min)'] = [1, null, '2.5abc', PHP_INT_MIN];
$tests['\'2.5abc\' <=> float(epsilon)'] = [1, null, '2.5abc', PHP_FLOAT_EPSILON];
$tests['\'2.5abc\' <=> float(min)'] = [1, null, '2.5abc', PHP_FLOAT_MIN];
$tests['\'2.5abc\' <=> float(max)'] = [1, null, '2.5abc', PHP_FLOAT_MAX];
$tests['\'2.5abc\' <=> float(inf)'] = [-1, null, '2.5abc', INF];
$tests['\'2.5abc\' <=> float(-inf)'] = [1, null, '2.5abc', -INF];
$tests['\'2.5abc\' <=> float(nan)'] = [1, null, '2.5abc', NAN];
$tests['\'2.5abc\' <=> $closure1'] = [-1, null, '2.5abc', $closure1];
$tests['\'2.5abc\' <=> $closure2'] = [-1, null, '2.5abc', $closure2];
$tests['\'2.5abc\' <=> $fh1'] = [-1, null, '2.5abc', $fh1];
$tests['\'2.5abc\' <=> $fh2'] = [-1, null, '2.5abc', $fh2];
$tests['\'2.5abc\' <=> $proc'] = [-1, null, '2.5abc', $proc];
$tests['\'2.5abc\' <=> DateTime(2024-01-01T12:00:00Z)'] = [-1, null, '2.5abc', unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'2.5abc\' <=> DateTime(2024-01-01T12:00:01Z)'] = [-1, null, '2.5abc', unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'2.5abc\' <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [-1, null, '2.5abc', unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'2.5abc\' <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [-1, null, '2.5abc', unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'2.5abc\' <=> []'] = [-1, null, '2.5abc', []];
$tests['\'2.5abc\' <=> [[]]'] = [-1, null, '2.5abc', [[]]];
$tests['\'2.5abc\' <=> [1 => []]'] = [-1, null, '2.5abc', [1 => []]];
$tests['\'2.5abc\' <=> [1 => null]'] = [-1, null, '2.5abc', [1 => null]];
$tests['\'2.5abc\' <=> [0]'] = [-1, null, '2.5abc', [0]];
$tests['\'2.5abc\' <=> [0.0]'] = [-1, null, '2.5abc', [0.0]];
$tests['\'2.5abc\' <=> [null]'] = [-1, null, '2.5abc', [null]];
$tests['\'2.5abc\' <=> [false]'] = [-1, null, '2.5abc', [false]];
$tests['\'2.5abc\' <=> [true]'] = [-1, null, '2.5abc', [true]];
$tests['\'2.5abc\' <=> [\'\']'] = [-1, null, '2.5abc', ['']];
$tests['\'2.5abc\' <=> [a, b, c]'] = [-1, null, '2.5abc', ['a','b','c']];
$tests['\'2.5abc\' <=> [$fh1]'] = [-1, null, '2.5abc', [$fh1]];
$tests['\'2.5abc\' <=> [foo => bar]'] = [-1, null, '2.5abc', ['foo' => 'bar']];
$tests['\'2.5abc\' <=> object[]'] = [-1, null, '2.5abc', (object) []];
$tests['\'2.5abc\' <=> object[[]]'] = [-1, null, '2.5abc', (object) [[]]];
$tests['\'2.5abc\' <=> object[1 => []]'] = [-1, null, '2.5abc', (object) [1 => []]];
$tests['\'2.5abc\' <=> object[1 => null]'] = [-1, null, '2.5abc', (object) [1 => null]];
$tests['\'2.5abc\' <=> object[0]'] = [-1, null, '2.5abc', (object) [0]];
$tests['\'2.5abc\' <=> object[0.0]'] = [-1, null, '2.5abc', (object) [0.0]];
$tests['\'2.5abc\' <=> object[null]'] = [-1, null, '2.5abc', (object) [null]];
$tests['\'2.5abc\' <=> object[false]'] = [-1, null, '2.5abc', (object) [false]];
$tests['\'2.5abc\' <=> object[true]'] = [-1, null, '2.5abc', (object) [true]];
$tests['\'2.5abc\' <=> object[\'\']'] = [-1, null, '2.5abc', (object) ['']];
$tests['\'2.5abc\' <=> object[a, b, c]'] = [-1, null, '2.5abc', (object) ['a','b','c']];
$tests['\'2.5abc\' <=> object[$fh1]'] = [-1, null, '2.5abc', (object) [$fh1]];
$tests['\'2.5abc\' <=> object[foo => bar]'] = [-1, null, '2.5abc', (object) ['foo' => 'bar']];
$tests['\'abc2abc\' <=> false'] = [1, null, 'abc2abc', false];
$tests['\'abc2abc\' <=> true'] = [0, null, 'abc2abc', true];
$tests['\'abc2abc\' <=> null'] = [1, null, 'abc2abc', null];
$tests['\'abc2abc\' <=> 0'] = [1, null, 'abc2abc', 0];
$tests['\'abc2abc\' <=> 1'] = [1, null, 'abc2abc', 1];
$tests['\'abc2abc\' <=> -1'] = [1, null, 'abc2abc', -1];
$tests['\'abc2abc\' <=> 0.0'] = [1, null, 'abc2abc', 0.0];
$tests['\'abc2abc\' <=> -1.0'] = [1, null, 'abc2abc', -1.0];
$tests['\'abc2abc\' <=> 1.0'] = [1, null, 'abc2abc', 1.0];
$tests['\'abc2abc\' <=> \'\''] = [1, null, 'abc2abc', ''];
$tests['\'abc2abc\' <=> \'0\''] = [1, null, 'abc2abc', '0'];
$tests['\'abc2abc\' <=> \'-0\''] = [1, null, 'abc2abc', '-0'];
$tests['\'abc2abc\' <=> \'+0\''] = [1, null, 'abc2abc', '+0'];
$tests['\'abc2abc\' <=> \'0.0\''] = [1, null, 'abc2abc', '0.0'];
$tests['\'abc2abc\' <=> \'-0.0\''] = [1, null, 'abc2abc', '-0.0'];
$tests['\'abc2abc\' <=> \'+0.0\''] = [1, null, 'abc2abc', '+0.0'];
$tests['\'abc2abc\' <=> \'1.0\''] = [1, null, 'abc2abc', '1.0'];
$tests['\'abc2abc\' <=> \'-1.0\''] = [1, null, 'abc2abc', '-1.0'];
$tests['\'abc2abc\' <=> \'+1.0\''] = [1, null, 'abc2abc', '+1.0'];
$tests['\'abc2abc\' <=> \'-1\''] = [1, null, 'abc2abc', '-1'];
$tests['\'abc2abc\' <=> \'+1\''] = [1, null, 'abc2abc', '+1'];
$tests['\'abc2abc\' <=> \'1\''] = [1, null, 'abc2abc', '1'];
$tests['\'abc2abc\' <=> \' 0\''] = [1, null, 'abc2abc', ' 0'];
$tests['\'abc2abc\' <=> \' -0\''] = [1, null, 'abc2abc', ' -0'];
$tests['\'abc2abc\' <=> \' +0\''] = [1, null, 'abc2abc', ' +0'];
$tests['\'abc2abc\' <=> \' 0\' '] = [1, null, 'abc2abc', ' 0 '];
$tests['\'abc2abc\' <=> \' -0\''] = [1, null, 'abc2abc', ' -0 '];
$tests['\'abc2abc\' <=> \' +0\''] = [1, null, 'abc2abc', ' +0 '];
$tests['\'abc2abc\' <=> \'0\' '] = [1, null, 'abc2abc', '0 '];
$tests['\'abc2abc\' <=> \'-0\''] = [1, null, 'abc2abc', '-0 '];
$tests['\'abc2abc\' <=> \'+0\''] = [1, null, 'abc2abc', '+0 '];
$tests['\'abc2abc\' <=> \' 0.0\''] = [1, null, 'abc2abc', ' 0.0'];
$tests['\'abc2abc\' <=> \' -0.0\''] = [1, null, 'abc2abc', ' -0.0'];
$tests['\'abc2abc\' <=> \' +0.0\''] = [1, null, 'abc2abc', ' +0.0'];
$tests['\'abc2abc\' <=> \' 0.0\' '] = [1, null, 'abc2abc', ' 0.0 '];
$tests['\'abc2abc\' <=> \' -0.0\''] = [1, null, 'abc2abc', ' -0.0 '];
$tests['\'abc2abc\' <=> \' +0.0\''] = [1, null, 'abc2abc', ' +0.0 '];
$tests['\'abc2abc\' <=> \'0.0\' '] = [1, null, 'abc2abc', '0.0 '];
$tests['\'abc2abc\' <=> \'-0.0\''] = [1, null, 'abc2abc', '-0.0 '];
$tests['\'abc2abc\' <=> \'+0.0\''] = [1, null, 'abc2abc', '+0.0 '];
$tests['\'abc2abc\' <=> \'03\''] = [1, null, 'abc2abc', '03'];
$tests['\'abc2abc\' <=> \'2abc\''] = [1, null, 'abc2abc', '2abc'];
$tests['\'abc2abc\' <=> \'2.5abc\''] = [1, null, 'abc2abc', '2.5abc'];
$tests['\'abc2abc\' <=> \'abc2abc\''] = [0, null, 'abc2abc', 'abc2abc'];
$tests['\'abc2abc\' <=> \'abc2.5abc\''] = [1, null, 'abc2abc', 'abc2.5abc'];
$tests['\'abc2abc\' <=> \'\\0\''] = [1, null, 'abc2abc', hex2bin('00')];
$tests['\'abc2abc\' <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [1, null, 'abc2abc', hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['\'abc2abc\' <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [1, null, 'abc2abc', hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['\'abc2abc\' <=> 12.0000000000001'] = [1, null, 'abc2abc', 12.0000000000001];
$tests['\'abc2abc\' <=> 12.000000000000002'] = [1, null, 'abc2abc', 12.000000000000002];
$tests['\'abc2abc\' <=> pi'] = [1, null, 'abc2abc', M_PI];
$tests['\'abc2abc\' <=> int(max)'] = [1, null, 'abc2abc', PHP_INT_MAX];
$tests['\'abc2abc\' <=> int(min)'] = [1, null, 'abc2abc', PHP_INT_MIN];
$tests['\'abc2abc\' <=> float(epsilon)'] = [1, null, 'abc2abc', PHP_FLOAT_EPSILON];
$tests['\'abc2abc\' <=> float(min)'] = [1, null, 'abc2abc', PHP_FLOAT_MIN];
$tests['\'abc2abc\' <=> float(max)'] = [1, null, 'abc2abc', PHP_FLOAT_MAX];
$tests['\'abc2abc\' <=> float(inf)'] = [1, null, 'abc2abc', INF];
$tests['\'abc2abc\' <=> float(-inf)'] = [1, null, 'abc2abc', -INF];
$tests['\'abc2abc\' <=> float(nan)'] = [1, null, 'abc2abc', NAN];
$tests['\'abc2abc\' <=> $closure1'] = [-1, null, 'abc2abc', $closure1];
$tests['\'abc2abc\' <=> $closure2'] = [-1, null, 'abc2abc', $closure2];
$tests['\'abc2abc\' <=> $fh1'] = [-1, null, 'abc2abc', $fh1];
$tests['\'abc2abc\' <=> $fh2'] = [-1, null, 'abc2abc', $fh2];
$tests['\'abc2abc\' <=> $proc'] = [-1, null, 'abc2abc', $proc];
$tests['\'abc2abc\' <=> DateTime(2024-01-01T12:00:00Z)'] = [-1, null, 'abc2abc', unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'abc2abc\' <=> DateTime(2024-01-01T12:00:01Z)'] = [-1, null, 'abc2abc', unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'abc2abc\' <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [-1, null, 'abc2abc', unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'abc2abc\' <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [-1, null, 'abc2abc', unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'abc2abc\' <=> []'] = [-1, null, 'abc2abc', []];
$tests['\'abc2abc\' <=> [[]]'] = [-1, null, 'abc2abc', [[]]];
$tests['\'abc2abc\' <=> [1 => []]'] = [-1, null, 'abc2abc', [1 => []]];
$tests['\'abc2abc\' <=> [1 => null]'] = [-1, null, 'abc2abc', [1 => null]];
$tests['\'abc2abc\' <=> [0]'] = [-1, null, 'abc2abc', [0]];
$tests['\'abc2abc\' <=> [0.0]'] = [-1, null, 'abc2abc', [0.0]];
$tests['\'abc2abc\' <=> [null]'] = [-1, null, 'abc2abc', [null]];
$tests['\'abc2abc\' <=> [false]'] = [-1, null, 'abc2abc', [false]];
$tests['\'abc2abc\' <=> [true]'] = [-1, null, 'abc2abc', [true]];
$tests['\'abc2abc\' <=> [\'\']'] = [-1, null, 'abc2abc', ['']];
$tests['\'abc2abc\' <=> [a, b, c]'] = [-1, null, 'abc2abc', ['a','b','c']];
$tests['\'abc2abc\' <=> [$fh1]'] = [-1, null, 'abc2abc', [$fh1]];
$tests['\'abc2abc\' <=> [foo => bar]'] = [-1, null, 'abc2abc', ['foo' => 'bar']];
$tests['\'abc2abc\' <=> object[]'] = [-1, null, 'abc2abc', (object) []];
$tests['\'abc2abc\' <=> object[[]]'] = [-1, null, 'abc2abc', (object) [[]]];
$tests['\'abc2abc\' <=> object[1 => []]'] = [-1, null, 'abc2abc', (object) [1 => []]];
$tests['\'abc2abc\' <=> object[1 => null]'] = [-1, null, 'abc2abc', (object) [1 => null]];
$tests['\'abc2abc\' <=> object[0]'] = [-1, null, 'abc2abc', (object) [0]];
$tests['\'abc2abc\' <=> object[0.0]'] = [-1, null, 'abc2abc', (object) [0.0]];
$tests['\'abc2abc\' <=> object[null]'] = [-1, null, 'abc2abc', (object) [null]];
$tests['\'abc2abc\' <=> object[false]'] = [-1, null, 'abc2abc', (object) [false]];
$tests['\'abc2abc\' <=> object[true]'] = [-1, null, 'abc2abc', (object) [true]];
$tests['\'abc2abc\' <=> object[\'\']'] = [-1, null, 'abc2abc', (object) ['']];
$tests['\'abc2abc\' <=> object[a, b, c]'] = [-1, null, 'abc2abc', (object) ['a','b','c']];
$tests['\'abc2abc\' <=> object[$fh1]'] = [-1, null, 'abc2abc', (object) [$fh1]];
$tests['\'abc2abc\' <=> object[foo => bar]'] = [-1, null, 'abc2abc', (object) ['foo' => 'bar']];
$tests['\'abc2.5abc\' <=> false'] = [1, null, 'abc2.5abc', false];
$tests['\'abc2.5abc\' <=> true'] = [0, null, 'abc2.5abc', true];
$tests['\'abc2.5abc\' <=> null'] = [1, null, 'abc2.5abc', null];
$tests['\'abc2.5abc\' <=> 0'] = [1, null, 'abc2.5abc', 0];
$tests['\'abc2.5abc\' <=> 1'] = [1, null, 'abc2.5abc', 1];
$tests['\'abc2.5abc\' <=> -1'] = [1, null, 'abc2.5abc', -1];
$tests['\'abc2.5abc\' <=> 0.0'] = [1, null, 'abc2.5abc', 0.0];
$tests['\'abc2.5abc\' <=> -1.0'] = [1, null, 'abc2.5abc', -1.0];
$tests['\'abc2.5abc\' <=> 1.0'] = [1, null, 'abc2.5abc', 1.0];
$tests['\'abc2.5abc\' <=> \'\''] = [1, null, 'abc2.5abc', ''];
$tests['\'abc2.5abc\' <=> \'0\''] = [1, null, 'abc2.5abc', '0'];
$tests['\'abc2.5abc\' <=> \'-0\''] = [1, null, 'abc2.5abc', '-0'];
$tests['\'abc2.5abc\' <=> \'+0\''] = [1, null, 'abc2.5abc', '+0'];
$tests['\'abc2.5abc\' <=> \'0.0\''] = [1, null, 'abc2.5abc', '0.0'];
$tests['\'abc2.5abc\' <=> \'-0.0\''] = [1, null, 'abc2.5abc', '-0.0'];
$tests['\'abc2.5abc\' <=> \'+0.0\''] = [1, null, 'abc2.5abc', '+0.0'];
$tests['\'abc2.5abc\' <=> \'1.0\''] = [1, null, 'abc2.5abc', '1.0'];
$tests['\'abc2.5abc\' <=> \'-1.0\''] = [1, null, 'abc2.5abc', '-1.0'];
$tests['\'abc2.5abc\' <=> \'+1.0\''] = [1, null, 'abc2.5abc', '+1.0'];
$tests['\'abc2.5abc\' <=> \'-1\''] = [1, null, 'abc2.5abc', '-1'];
$tests['\'abc2.5abc\' <=> \'+1\''] = [1, null, 'abc2.5abc', '+1'];
$tests['\'abc2.5abc\' <=> \'1\''] = [1, null, 'abc2.5abc', '1'];
$tests['\'abc2.5abc\' <=> \' 0\''] = [1, null, 'abc2.5abc', ' 0'];
$tests['\'abc2.5abc\' <=> \' -0\''] = [1, null, 'abc2.5abc', ' -0'];
$tests['\'abc2.5abc\' <=> \' +0\''] = [1, null, 'abc2.5abc', ' +0'];
$tests['\'abc2.5abc\' <=> \' 0\' '] = [1, null, 'abc2.5abc', ' 0 '];
$tests['\'abc2.5abc\' <=> \' -0\''] = [1, null, 'abc2.5abc', ' -0 '];
$tests['\'abc2.5abc\' <=> \' +0\''] = [1, null, 'abc2.5abc', ' +0 '];
$tests['\'abc2.5abc\' <=> \'0\' '] = [1, null, 'abc2.5abc', '0 '];
$tests['\'abc2.5abc\' <=> \'-0\''] = [1, null, 'abc2.5abc', '-0 '];
$tests['\'abc2.5abc\' <=> \'+0\''] = [1, null, 'abc2.5abc', '+0 '];
$tests['\'abc2.5abc\' <=> \' 0.0\''] = [1, null, 'abc2.5abc', ' 0.0'];
$tests['\'abc2.5abc\' <=> \' -0.0\''] = [1, null, 'abc2.5abc', ' -0.0'];
$tests['\'abc2.5abc\' <=> \' +0.0\''] = [1, null, 'abc2.5abc', ' +0.0'];
$tests['\'abc2.5abc\' <=> \' 0.0\' '] = [1, null, 'abc2.5abc', ' 0.0 '];
$tests['\'abc2.5abc\' <=> \' -0.0\''] = [1, null, 'abc2.5abc', ' -0.0 '];
$tests['\'abc2.5abc\' <=> \' +0.0\''] = [1, null, 'abc2.5abc', ' +0.0 '];
$tests['\'abc2.5abc\' <=> \'0.0\' '] = [1, null, 'abc2.5abc', '0.0 '];
$tests['\'abc2.5abc\' <=> \'-0.0\''] = [1, null, 'abc2.5abc', '-0.0 '];
$tests['\'abc2.5abc\' <=> \'+0.0\''] = [1, null, 'abc2.5abc', '+0.0 '];
$tests['\'abc2.5abc\' <=> \'03\''] = [1, null, 'abc2.5abc', '03'];
$tests['\'abc2.5abc\' <=> \'2abc\''] = [1, null, 'abc2.5abc', '2abc'];
$tests['\'abc2.5abc\' <=> \'2.5abc\''] = [1, null, 'abc2.5abc', '2.5abc'];
$tests['\'abc2.5abc\' <=> \'abc2abc\''] = [-1, null, 'abc2.5abc', 'abc2abc'];
$tests['\'abc2.5abc\' <=> \'abc2.5abc\''] = [0, null, 'abc2.5abc', 'abc2.5abc'];
$tests['\'abc2.5abc\' <=> \'\\0\''] = [1, null, 'abc2.5abc', hex2bin('00')];
$tests['\'abc2.5abc\' <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [1, null, 'abc2.5abc', hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['\'abc2.5abc\' <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [1, null, 'abc2.5abc', hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['\'abc2.5abc\' <=> 12.0000000000001'] = [1, null, 'abc2.5abc', 12.0000000000001];
$tests['\'abc2.5abc\' <=> 12.000000000000002'] = [1, null, 'abc2.5abc', 12.000000000000002];
$tests['\'abc2.5abc\' <=> pi'] = [1, null, 'abc2.5abc', M_PI];
$tests['\'abc2.5abc\' <=> int(max)'] = [1, null, 'abc2.5abc', PHP_INT_MAX];
$tests['\'abc2.5abc\' <=> int(min)'] = [1, null, 'abc2.5abc', PHP_INT_MIN];
$tests['\'abc2.5abc\' <=> float(epsilon)'] = [1, null, 'abc2.5abc', PHP_FLOAT_EPSILON];
$tests['\'abc2.5abc\' <=> float(min)'] = [1, null, 'abc2.5abc', PHP_FLOAT_MIN];
$tests['\'abc2.5abc\' <=> float(max)'] = [1, null, 'abc2.5abc', PHP_FLOAT_MAX];
$tests['\'abc2.5abc\' <=> float(inf)'] = [1, null, 'abc2.5abc', INF];
$tests['\'abc2.5abc\' <=> float(-inf)'] = [1, null, 'abc2.5abc', -INF];
$tests['\'abc2.5abc\' <=> float(nan)'] = [1, null, 'abc2.5abc', NAN];
$tests['\'abc2.5abc\' <=> $closure1'] = [-1, null, 'abc2.5abc', $closure1];
$tests['\'abc2.5abc\' <=> $closure2'] = [-1, null, 'abc2.5abc', $closure2];
$tests['\'abc2.5abc\' <=> $fh1'] = [-1, null, 'abc2.5abc', $fh1];
$tests['\'abc2.5abc\' <=> $fh2'] = [-1, null, 'abc2.5abc', $fh2];
$tests['\'abc2.5abc\' <=> $proc'] = [-1, null, 'abc2.5abc', $proc];
$tests['\'abc2.5abc\' <=> DateTime(2024-01-01T12:00:00Z)'] = [-1, null, 'abc2.5abc', unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'abc2.5abc\' <=> DateTime(2024-01-01T12:00:01Z)'] = [-1, null, 'abc2.5abc', unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'abc2.5abc\' <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [-1, null, 'abc2.5abc', unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'abc2.5abc\' <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [-1, null, 'abc2.5abc', unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'abc2.5abc\' <=> []'] = [-1, null, 'abc2.5abc', []];
$tests['\'abc2.5abc\' <=> [[]]'] = [-1, null, 'abc2.5abc', [[]]];
$tests['\'abc2.5abc\' <=> [1 => []]'] = [-1, null, 'abc2.5abc', [1 => []]];
$tests['\'abc2.5abc\' <=> [1 => null]'] = [-1, null, 'abc2.5abc', [1 => null]];
$tests['\'abc2.5abc\' <=> [0]'] = [-1, null, 'abc2.5abc', [0]];
$tests['\'abc2.5abc\' <=> [0.0]'] = [-1, null, 'abc2.5abc', [0.0]];
$tests['\'abc2.5abc\' <=> [null]'] = [-1, null, 'abc2.5abc', [null]];
$tests['\'abc2.5abc\' <=> [false]'] = [-1, null, 'abc2.5abc', [false]];
$tests['\'abc2.5abc\' <=> [true]'] = [-1, null, 'abc2.5abc', [true]];
$tests['\'abc2.5abc\' <=> [\'\']'] = [-1, null, 'abc2.5abc', ['']];
$tests['\'abc2.5abc\' <=> [a, b, c]'] = [-1, null, 'abc2.5abc', ['a','b','c']];
$tests['\'abc2.5abc\' <=> [$fh1]'] = [-1, null, 'abc2.5abc', [$fh1]];
$tests['\'abc2.5abc\' <=> [foo => bar]'] = [-1, null, 'abc2.5abc', ['foo' => 'bar']];
$tests['\'abc2.5abc\' <=> object[]'] = [-1, null, 'abc2.5abc', (object) []];
$tests['\'abc2.5abc\' <=> object[[]]'] = [-1, null, 'abc2.5abc', (object) [[]]];
$tests['\'abc2.5abc\' <=> object[1 => []]'] = [-1, null, 'abc2.5abc', (object) [1 => []]];
$tests['\'abc2.5abc\' <=> object[1 => null]'] = [-1, null, 'abc2.5abc', (object) [1 => null]];
$tests['\'abc2.5abc\' <=> object[0]'] = [-1, null, 'abc2.5abc', (object) [0]];
$tests['\'abc2.5abc\' <=> object[0.0]'] = [-1, null, 'abc2.5abc', (object) [0.0]];
$tests['\'abc2.5abc\' <=> object[null]'] = [-1, null, 'abc2.5abc', (object) [null]];
$tests['\'abc2.5abc\' <=> object[false]'] = [-1, null, 'abc2.5abc', (object) [false]];
$tests['\'abc2.5abc\' <=> object[true]'] = [-1, null, 'abc2.5abc', (object) [true]];
$tests['\'abc2.5abc\' <=> object[\'\']'] = [-1, null, 'abc2.5abc', (object) ['']];
$tests['\'abc2.5abc\' <=> object[a, b, c]'] = [-1, null, 'abc2.5abc', (object) ['a','b','c']];
$tests['\'abc2.5abc\' <=> object[$fh1]'] = [-1, null, 'abc2.5abc', (object) [$fh1]];
$tests['\'abc2.5abc\' <=> object[foo => bar]'] = [-1, null, 'abc2.5abc', (object) ['foo' => 'bar']];
$tests['\'\\0\' <=> false'] = [1, null, hex2bin('00'), false];
$tests['\'\\0\' <=> true'] = [0, null, hex2bin('00'), true];
$tests['\'\\0\' <=> null'] = [1, null, hex2bin('00'), null];
$tests['\'\\0\' <=> 0'] = [-1, null, hex2bin('00'), 0];
$tests['\'\\0\' <=> 1'] = [-1, null, hex2bin('00'), 1];
$tests['\'\\0\' <=> -1'] = [-1, null, hex2bin('00'), -1];
$tests['\'\\0\' <=> 0.0'] = [-1, null, hex2bin('00'), 0.0];
$tests['\'\\0\' <=> -1.0'] = [-1, null, hex2bin('00'), -1.0];
$tests['\'\\0\' <=> 1.0'] = [-1, null, hex2bin('00'), 1.0];
$tests['\'\\0\' <=> \'\''] = [1, null, hex2bin('00'), ''];
$tests['\'\\0\' <=> \'0\''] = [-1, null, hex2bin('00'), '0'];
$tests['\'\\0\' <=> \'-0\''] = [-1, null, hex2bin('00'), '-0'];
$tests['\'\\0\' <=> \'+0\''] = [-1, null, hex2bin('00'), '+0'];
$tests['\'\\0\' <=> \'0.0\''] = [-1, null, hex2bin('00'), '0.0'];
$tests['\'\\0\' <=> \'-0.0\''] = [-1, null, hex2bin('00'), '-0.0'];
$tests['\'\\0\' <=> \'+0.0\''] = [-1, null, hex2bin('00'), '+0.0'];
$tests['\'\\0\' <=> \'1.0\''] = [-1, null, hex2bin('00'), '1.0'];
$tests['\'\\0\' <=> \'-1.0\''] = [-1, null, hex2bin('00'), '-1.0'];
$tests['\'\\0\' <=> \'+1.0\''] = [-1, null, hex2bin('00'), '+1.0'];
$tests['\'\\0\' <=> \'-1\''] = [-1, null, hex2bin('00'), '-1'];
$tests['\'\\0\' <=> \'+1\''] = [-1, null, hex2bin('00'), '+1'];
$tests['\'\\0\' <=> \'1\''] = [-1, null, hex2bin('00'), '1'];
$tests['\'\\0\' <=> \' 0\''] = [-1, null, hex2bin('00'), ' 0'];
$tests['\'\\0\' <=> \' -0\''] = [-1, null, hex2bin('00'), ' -0'];
$tests['\'\\0\' <=> \' +0\''] = [-1, null, hex2bin('00'), ' +0'];
$tests['\'\\0\' <=> \' 0\' '] = [-1, null, hex2bin('00'), ' 0 '];
$tests['\'\\0\' <=> \' -0\''] = [-1, null, hex2bin('00'), ' -0 '];
$tests['\'\\0\' <=> \' +0\''] = [-1, null, hex2bin('00'), ' +0 '];
$tests['\'\\0\' <=> \'0\' '] = [-1, null, hex2bin('00'), '0 '];
$tests['\'\\0\' <=> \'-0\''] = [-1, null, hex2bin('00'), '-0 '];
$tests['\'\\0\' <=> \'+0\''] = [-1, null, hex2bin('00'), '+0 '];
$tests['\'\\0\' <=> \' 0.0\''] = [-1, null, hex2bin('00'), ' 0.0'];
$tests['\'\\0\' <=> \' -0.0\''] = [-1, null, hex2bin('00'), ' -0.0'];
$tests['\'\\0\' <=> \' +0.0\''] = [-1, null, hex2bin('00'), ' +0.0'];
$tests['\'\\0\' <=> \' 0.0\' '] = [-1, null, hex2bin('00'), ' 0.0 '];
$tests['\'\\0\' <=> \' -0.0\''] = [-1, null, hex2bin('00'), ' -0.0 '];
$tests['\'\\0\' <=> \' +0.0\''] = [-1, null, hex2bin('00'), ' +0.0 '];
$tests['\'\\0\' <=> \'0.0\' '] = [-1, null, hex2bin('00'), '0.0 '];
$tests['\'\\0\' <=> \'-0.0\''] = [-1, null, hex2bin('00'), '-0.0 '];
$tests['\'\\0\' <=> \'+0.0\''] = [-1, null, hex2bin('00'), '+0.0 '];
$tests['\'\\0\' <=> \'03\''] = [-1, null, hex2bin('00'), '03'];
$tests['\'\\0\' <=> \'2abc\''] = [-1, null, hex2bin('00'), '2abc'];
$tests['\'\\0\' <=> \'2.5abc\''] = [-1, null, hex2bin('00'), '2.5abc'];
$tests['\'\\0\' <=> \'abc2abc\''] = [-1, null, hex2bin('00'), 'abc2abc'];
$tests['\'\\0\' <=> \'abc2.5abc\''] = [-1, null, hex2bin('00'), 'abc2.5abc'];
$tests['\'\\0\' <=> \'\\0\''] = [0, null, hex2bin('00'), hex2bin('00')];
$tests['\'\\0\' <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [-1, null, hex2bin('00'), hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['\'\\0\' <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [-1, null, hex2bin('00'), hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['\'\\0\' <=> 12.0000000000001'] = [-1, null, hex2bin('00'), 12.0000000000001];
$tests['\'\\0\' <=> 12.000000000000002'] = [-1, null, hex2bin('00'), 12.000000000000002];
$tests['\'\\0\' <=> pi'] = [-1, null, hex2bin('00'), M_PI];
$tests['\'\\0\' <=> int(max)'] = [-1, null, hex2bin('00'), PHP_INT_MAX];
$tests['\'\\0\' <=> int(min)'] = [-1, null, hex2bin('00'), PHP_INT_MIN];
$tests['\'\\0\' <=> float(epsilon)'] = [-1, null, hex2bin('00'), PHP_FLOAT_EPSILON];
$tests['\'\\0\' <=> float(min)'] = [-1, null, hex2bin('00'), PHP_FLOAT_MIN];
$tests['\'\\0\' <=> float(max)'] = [-1, null, hex2bin('00'), PHP_FLOAT_MAX];
$tests['\'\\0\' <=> float(inf)'] = [-1, null, hex2bin('00'), INF];
$tests['\'\\0\' <=> float(-inf)'] = [-1, null, hex2bin('00'), -INF];
$tests['\'\\0\' <=> float(nan)'] = [1, null, hex2bin('00'), NAN];
$tests['\'\\0\' <=> $closure1'] = [-1, null, hex2bin('00'), $closure1];
$tests['\'\\0\' <=> $closure2'] = [-1, null, hex2bin('00'), $closure2];
$tests['\'\\0\' <=> $fh1'] = [-1, null, hex2bin('00'), $fh1];
$tests['\'\\0\' <=> $fh2'] = [-1, null, hex2bin('00'), $fh2];
$tests['\'\\0\' <=> $proc'] = [-1, null, hex2bin('00'), $proc];
$tests['\'\\0\' <=> DateTime(2024-01-01T12:00:00Z)'] = [-1, null, hex2bin('00'), unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'\\0\' <=> DateTime(2024-01-01T12:00:01Z)'] = [-1, null, hex2bin('00'), unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'\\0\' <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [-1, null, hex2bin('00'), unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'\\0\' <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [-1, null, hex2bin('00'), unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'\\0\' <=> []'] = [-1, null, hex2bin('00'), []];
$tests['\'\\0\' <=> [[]]'] = [-1, null, hex2bin('00'), [[]]];
$tests['\'\\0\' <=> [1 => []]'] = [-1, null, hex2bin('00'), [1 => []]];
$tests['\'\\0\' <=> [1 => null]'] = [-1, null, hex2bin('00'), [1 => null]];
$tests['\'\\0\' <=> [0]'] = [-1, null, hex2bin('00'), [0]];
$tests['\'\\0\' <=> [0.0]'] = [-1, null, hex2bin('00'), [0.0]];
$tests['\'\\0\' <=> [null]'] = [-1, null, hex2bin('00'), [null]];
$tests['\'\\0\' <=> [false]'] = [-1, null, hex2bin('00'), [false]];
$tests['\'\\0\' <=> [true]'] = [-1, null, hex2bin('00'), [true]];
$tests['\'\\0\' <=> [\'\']'] = [-1, null, hex2bin('00'), ['']];
$tests['\'\\0\' <=> [a, b, c]'] = [-1, null, hex2bin('00'), ['a','b','c']];
$tests['\'\\0\' <=> [$fh1]'] = [-1, null, hex2bin('00'), [$fh1]];
$tests['\'\\0\' <=> [foo => bar]'] = [-1, null, hex2bin('00'), ['foo' => 'bar']];
$tests['\'\\0\' <=> object[]'] = [-1, null, hex2bin('00'), (object) []];
$tests['\'\\0\' <=> object[[]]'] = [-1, null, hex2bin('00'), (object) [[]]];
$tests['\'\\0\' <=> object[1 => []]'] = [-1, null, hex2bin('00'), (object) [1 => []]];
$tests['\'\\0\' <=> object[1 => null]'] = [-1, null, hex2bin('00'), (object) [1 => null]];
$tests['\'\\0\' <=> object[0]'] = [-1, null, hex2bin('00'), (object) [0]];
$tests['\'\\0\' <=> object[0.0]'] = [-1, null, hex2bin('00'), (object) [0.0]];
$tests['\'\\0\' <=> object[null]'] = [-1, null, hex2bin('00'), (object) [null]];
$tests['\'\\0\' <=> object[false]'] = [-1, null, hex2bin('00'), (object) [false]];
$tests['\'\\0\' <=> object[true]'] = [-1, null, hex2bin('00'), (object) [true]];
$tests['\'\\0\' <=> object[\'\']'] = [-1, null, hex2bin('00'), (object) ['']];
$tests['\'\\0\' <=> object[a, b, c]'] = [-1, null, hex2bin('00'), (object) ['a','b','c']];
$tests['\'\\0\' <=> object[$fh1]'] = [-1, null, hex2bin('00'), (object) [$fh1]];
$tests['\'\\0\' <=> object[foo => bar]'] = [-1, null, hex2bin('00'), (object) ['foo' => 'bar']];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> false'] = [1, null, hex2bin('090a0d0b0c35090a0d0b0c'), false];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> true'] = [0, null, hex2bin('090a0d0b0c35090a0d0b0c'), true];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> null'] = [1, null, hex2bin('090a0d0b0c35090a0d0b0c'), null];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> 0'] = [1, null, hex2bin('090a0d0b0c35090a0d0b0c'), 0];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> 1'] = [1, null, hex2bin('090a0d0b0c35090a0d0b0c'), 1];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> -1'] = [1, null, hex2bin('090a0d0b0c35090a0d0b0c'), -1];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> 0.0'] = [1, null, hex2bin('090a0d0b0c35090a0d0b0c'), 0.0];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> -1.0'] = [1, null, hex2bin('090a0d0b0c35090a0d0b0c'), -1.0];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> 1.0'] = [1, null, hex2bin('090a0d0b0c35090a0d0b0c'), 1.0];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> \'\''] = [1, null, hex2bin('090a0d0b0c35090a0d0b0c'), ''];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> \'0\''] = [1, null, hex2bin('090a0d0b0c35090a0d0b0c'), '0'];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> \'-0\''] = [1, null, hex2bin('090a0d0b0c35090a0d0b0c'), '-0'];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> \'+0\''] = [1, null, hex2bin('090a0d0b0c35090a0d0b0c'), '+0'];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> \'0.0\''] = [1, null, hex2bin('090a0d0b0c35090a0d0b0c'), '0.0'];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> \'-0.0\''] = [1, null, hex2bin('090a0d0b0c35090a0d0b0c'), '-0.0'];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> \'+0.0\''] = [1, null, hex2bin('090a0d0b0c35090a0d0b0c'), '+0.0'];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> \'1.0\''] = [1, null, hex2bin('090a0d0b0c35090a0d0b0c'), '1.0'];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> \'-1.0\''] = [1, null, hex2bin('090a0d0b0c35090a0d0b0c'), '-1.0'];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> \'+1.0\''] = [1, null, hex2bin('090a0d0b0c35090a0d0b0c'), '+1.0'];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> \'-1\''] = [1, null, hex2bin('090a0d0b0c35090a0d0b0c'), '-1'];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> \'+1\''] = [1, null, hex2bin('090a0d0b0c35090a0d0b0c'), '+1'];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> \'1\''] = [1, null, hex2bin('090a0d0b0c35090a0d0b0c'), '1'];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> \' 0\''] = [1, null, hex2bin('090a0d0b0c35090a0d0b0c'), ' 0'];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> \' -0\''] = [1, null, hex2bin('090a0d0b0c35090a0d0b0c'), ' -0'];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> \' +0\''] = [1, null, hex2bin('090a0d0b0c35090a0d0b0c'), ' +0'];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> \' 0\' '] = [1, null, hex2bin('090a0d0b0c35090a0d0b0c'), ' 0 '];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> \' -0\''] = [1, null, hex2bin('090a0d0b0c35090a0d0b0c'), ' -0 '];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> \' +0\''] = [1, null, hex2bin('090a0d0b0c35090a0d0b0c'), ' +0 '];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> \'0\' '] = [1, null, hex2bin('090a0d0b0c35090a0d0b0c'), '0 '];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> \'-0\''] = [1, null, hex2bin('090a0d0b0c35090a0d0b0c'), '-0 '];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> \'+0\''] = [1, null, hex2bin('090a0d0b0c35090a0d0b0c'), '+0 '];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> \' 0.0\''] = [1, null, hex2bin('090a0d0b0c35090a0d0b0c'), ' 0.0'];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> \' -0.0\''] = [1, null, hex2bin('090a0d0b0c35090a0d0b0c'), ' -0.0'];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> \' +0.0\''] = [1, null, hex2bin('090a0d0b0c35090a0d0b0c'), ' +0.0'];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> \' 0.0\' '] = [1, null, hex2bin('090a0d0b0c35090a0d0b0c'), ' 0.0 '];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> \' -0.0\''] = [1, null, hex2bin('090a0d0b0c35090a0d0b0c'), ' -0.0 '];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> \' +0.0\''] = [1, null, hex2bin('090a0d0b0c35090a0d0b0c'), ' +0.0 '];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> \'0.0\' '] = [1, null, hex2bin('090a0d0b0c35090a0d0b0c'), '0.0 '];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> \'-0.0\''] = [1, null, hex2bin('090a0d0b0c35090a0d0b0c'), '-0.0 '];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> \'+0.0\''] = [1, null, hex2bin('090a0d0b0c35090a0d0b0c'), '+0.0 '];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> \'03\''] = [1, null, hex2bin('090a0d0b0c35090a0d0b0c'), '03'];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> \'2abc\''] = [-1, null, hex2bin('090a0d0b0c35090a0d0b0c'), '2abc'];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> \'2.5abc\''] = [-1, null, hex2bin('090a0d0b0c35090a0d0b0c'), '2.5abc'];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> \'abc2abc\''] = [-1, null, hex2bin('090a0d0b0c35090a0d0b0c'), 'abc2abc'];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> \'abc2.5abc\''] = [-1, null, hex2bin('090a0d0b0c35090a0d0b0c'), 'abc2.5abc'];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> \'\\0\''] = [1, null, hex2bin('090a0d0b0c35090a0d0b0c'), hex2bin('00')];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [0, null, hex2bin('090a0d0b0c35090a0d0b0c'), hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [1, null, hex2bin('090a0d0b0c35090a0d0b0c'), hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> 12.0000000000001'] = [-1, null, hex2bin('090a0d0b0c35090a0d0b0c'), 12.0000000000001];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> 12.000000000000002'] = [-1, null, hex2bin('090a0d0b0c35090a0d0b0c'), 12.000000000000002];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> pi'] = [1, null, hex2bin('090a0d0b0c35090a0d0b0c'), M_PI];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> int(max)'] = [-1, null, hex2bin('090a0d0b0c35090a0d0b0c'), PHP_INT_MAX];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> int(min)'] = [1, null, hex2bin('090a0d0b0c35090a0d0b0c'), PHP_INT_MIN];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> float(epsilon)'] = [1, null, hex2bin('090a0d0b0c35090a0d0b0c'), PHP_FLOAT_EPSILON];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> float(min)'] = [1, null, hex2bin('090a0d0b0c35090a0d0b0c'), PHP_FLOAT_MIN];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> float(max)'] = [-1, null, hex2bin('090a0d0b0c35090a0d0b0c'), PHP_FLOAT_MAX];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> float(inf)'] = [-1, null, hex2bin('090a0d0b0c35090a0d0b0c'), INF];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> float(-inf)'] = [1, null, hex2bin('090a0d0b0c35090a0d0b0c'), -INF];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> float(nan)'] = [1, null, hex2bin('090a0d0b0c35090a0d0b0c'), NAN];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> $closure1'] = [-1, null, hex2bin('090a0d0b0c35090a0d0b0c'), $closure1];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> $closure2'] = [-1, null, hex2bin('090a0d0b0c35090a0d0b0c'), $closure2];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> $fh1'] = [-1, null, hex2bin('090a0d0b0c35090a0d0b0c'), $fh1];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> $fh2'] = [-1, null, hex2bin('090a0d0b0c35090a0d0b0c'), $fh2];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> $proc'] = [-1, null, hex2bin('090a0d0b0c35090a0d0b0c'), $proc];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> DateTime(2024-01-01T12:00:00Z)'] = [-1, null, hex2bin('090a0d0b0c35090a0d0b0c'), unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> DateTime(2024-01-01T12:00:01Z)'] = [-1, null, hex2bin('090a0d0b0c35090a0d0b0c'), unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [-1, null, hex2bin('090a0d0b0c35090a0d0b0c'), unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [-1, null, hex2bin('090a0d0b0c35090a0d0b0c'), unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> []'] = [-1, null, hex2bin('090a0d0b0c35090a0d0b0c'), []];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> [[]]'] = [-1, null, hex2bin('090a0d0b0c35090a0d0b0c'), [[]]];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> [1 => []]'] = [-1, null, hex2bin('090a0d0b0c35090a0d0b0c'), [1 => []]];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> [1 => null]'] = [-1, null, hex2bin('090a0d0b0c35090a0d0b0c'), [1 => null]];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> [0]'] = [-1, null, hex2bin('090a0d0b0c35090a0d0b0c'), [0]];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> [0.0]'] = [-1, null, hex2bin('090a0d0b0c35090a0d0b0c'), [0.0]];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> [null]'] = [-1, null, hex2bin('090a0d0b0c35090a0d0b0c'), [null]];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> [false]'] = [-1, null, hex2bin('090a0d0b0c35090a0d0b0c'), [false]];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> [true]'] = [-1, null, hex2bin('090a0d0b0c35090a0d0b0c'), [true]];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> [\'\']'] = [-1, null, hex2bin('090a0d0b0c35090a0d0b0c'), ['']];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> [a, b, c]'] = [-1, null, hex2bin('090a0d0b0c35090a0d0b0c'), ['a','b','c']];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> [$fh1]'] = [-1, null, hex2bin('090a0d0b0c35090a0d0b0c'), [$fh1]];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> [foo => bar]'] = [-1, null, hex2bin('090a0d0b0c35090a0d0b0c'), ['foo' => 'bar']];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> object[]'] = [-1, null, hex2bin('090a0d0b0c35090a0d0b0c'), (object) []];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> object[[]]'] = [-1, null, hex2bin('090a0d0b0c35090a0d0b0c'), (object) [[]]];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> object[1 => []]'] = [-1, null, hex2bin('090a0d0b0c35090a0d0b0c'), (object) [1 => []]];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> object[1 => null]'] = [-1, null, hex2bin('090a0d0b0c35090a0d0b0c'), (object) [1 => null]];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> object[0]'] = [-1, null, hex2bin('090a0d0b0c35090a0d0b0c'), (object) [0]];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> object[0.0]'] = [-1, null, hex2bin('090a0d0b0c35090a0d0b0c'), (object) [0.0]];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> object[null]'] = [-1, null, hex2bin('090a0d0b0c35090a0d0b0c'), (object) [null]];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> object[false]'] = [-1, null, hex2bin('090a0d0b0c35090a0d0b0c'), (object) [false]];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> object[true]'] = [-1, null, hex2bin('090a0d0b0c35090a0d0b0c'), (object) [true]];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> object[\'\']'] = [-1, null, hex2bin('090a0d0b0c35090a0d0b0c'), (object) ['']];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> object[a, b, c]'] = [-1, null, hex2bin('090a0d0b0c35090a0d0b0c'), (object) ['a','b','c']];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> object[$fh1]'] = [-1, null, hex2bin('090a0d0b0c35090a0d0b0c'), (object) [$fh1]];
$tests['\'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\' <=> object[foo => bar]'] = [-1, null, hex2bin('090a0d0b0c35090a0d0b0c'), (object) ['foo' => 'bar']];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> false'] = [1, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), false];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> true'] = [0, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), true];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> null'] = [1, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), null];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> 0'] = [-1, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), 0];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> 1'] = [-1, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), 1];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> -1'] = [-1, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), -1];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> 0.0'] = [-1, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), 0.0];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> -1.0'] = [-1, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), -1.0];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> 1.0'] = [-1, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), 1.0];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> \'\''] = [1, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), ''];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> \'0\''] = [-1, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), '0'];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> \'-0\''] = [-1, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), '-0'];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> \'+0\''] = [-1, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), '+0'];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> \'0.0\''] = [-1, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), '0.0'];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> \'-0.0\''] = [-1, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), '-0.0'];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> \'+0.0\''] = [-1, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), '+0.0'];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> \'1.0\''] = [-1, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), '1.0'];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> \'-1.0\''] = [-1, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), '-1.0'];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> \'+1.0\''] = [-1, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), '+1.0'];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> \'-1\''] = [-1, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), '-1'];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> \'+1\''] = [-1, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), '+1'];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> \'1\''] = [-1, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), '1'];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> \' 0\''] = [-1, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), ' 0'];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> \' -0\''] = [-1, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), ' -0'];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> \' +0\''] = [-1, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), ' +0'];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> \' 0\' '] = [-1, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), ' 0 '];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> \' -0\''] = [-1, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), ' -0 '];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> \' +0\''] = [-1, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), ' +0 '];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> \'0\' '] = [-1, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), '0 '];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> \'-0\''] = [-1, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), '-0 '];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> \'+0\''] = [-1, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), '+0 '];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> \' 0.0\''] = [-1, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), ' 0.0'];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> \' -0.0\''] = [-1, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), ' -0.0'];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> \' +0.0\''] = [-1, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), ' +0.0'];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> \' 0.0\' '] = [-1, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), ' 0.0 '];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> \' -0.0\''] = [-1, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), ' -0.0 '];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> \' +0.0\''] = [-1, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), ' +0.0 '];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> \'0.0\' '] = [-1, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), '0.0 '];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> \'-0.0\''] = [-1, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), '-0.0 '];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> \'+0.0\''] = [-1, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), '+0.0 '];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> \'03\''] = [-1, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), '03'];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> \'2abc\''] = [-1, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), '2abc'];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> \'2.5abc\''] = [-1, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), '2.5abc'];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> \'abc2abc\''] = [-1, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), 'abc2abc'];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> \'abc2.5abc\''] = [-1, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), 'abc2.5abc'];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> \'\\0\''] = [1, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), hex2bin('00')];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [-1, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [0, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> 12.0000000000001'] = [-1, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), 12.0000000000001];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> 12.000000000000002'] = [-1, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), 12.000000000000002];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> pi'] = [-1, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), M_PI];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> int(max)'] = [-1, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), PHP_INT_MAX];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> int(min)'] = [-1, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), PHP_INT_MIN];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> float(epsilon)'] = [-1, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), PHP_FLOAT_EPSILON];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> float(min)'] = [-1, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), PHP_FLOAT_MIN];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> float(max)'] = [-1, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), PHP_FLOAT_MAX];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> float(inf)'] = [-1, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), INF];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> float(-inf)'] = [-1, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), -INF];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> float(nan)'] = [1, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), NAN];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> $closure1'] = [-1, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), $closure1];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> $closure2'] = [-1, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), $closure2];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> $fh1'] = [-1, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), $fh1];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> $fh2'] = [-1, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), $fh2];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> $proc'] = [-1, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), $proc];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> DateTime(2024-01-01T12:00:00Z)'] = [-1, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> DateTime(2024-01-01T12:00:01Z)'] = [-1, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [-1, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [-1, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> []'] = [-1, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), []];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> [[]]'] = [-1, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), [[]]];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> [1 => []]'] = [-1, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), [1 => []]];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> [1 => null]'] = [-1, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), [1 => null]];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> [0]'] = [-1, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), [0]];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> [0.0]'] = [-1, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), [0.0]];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> [null]'] = [-1, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), [null]];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> [false]'] = [-1, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), [false]];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> [true]'] = [-1, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), [true]];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> [\'\']'] = [-1, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), ['']];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> [a, b, c]'] = [-1, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), ['a','b','c']];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> [$fh1]'] = [-1, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), [$fh1]];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> [foo => bar]'] = [-1, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), ['foo' => 'bar']];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> object[]'] = [-1, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), (object) []];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> object[[]]'] = [-1, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), (object) [[]]];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> object[1 => []]'] = [-1, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), (object) [1 => []]];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> object[1 => null]'] = [-1, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), (object) [1 => null]];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> object[0]'] = [-1, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), (object) [0]];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> object[0.0]'] = [-1, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), (object) [0.0]];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> object[null]'] = [-1, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), (object) [null]];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> object[false]'] = [-1, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), (object) [false]];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> object[true]'] = [-1, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), (object) [true]];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> object[\'\']'] = [-1, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), (object) ['']];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> object[a, b, c]'] = [-1, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), (object) ['a','b','c']];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> object[$fh1]'] = [-1, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), (object) [$fh1]];
$tests['\'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\' <=> object[foo => bar]'] = [-1, null, hex2bin('00090a0d0b0c3500090a0d0b0c'), (object) ['foo' => 'bar']];
$tests['12.0000000000001 <=> false'] = [1, null, 12.0000000000001, false];
$tests['12.0000000000001 <=> true'] = [0, null, 12.0000000000001, true];
$tests['12.0000000000001 <=> null'] = [1, null, 12.0000000000001, null];
$tests['12.0000000000001 <=> 0'] = [1, null, 12.0000000000001, 0];
$tests['12.0000000000001 <=> 1'] = [1, null, 12.0000000000001, 1];
$tests['12.0000000000001 <=> -1'] = [1, null, 12.0000000000001, -1];
$tests['12.0000000000001 <=> 0.0'] = [1, null, 12.0000000000001, 0.0];
$tests['12.0000000000001 <=> -1.0'] = [1, null, 12.0000000000001, -1.0];
$tests['12.0000000000001 <=> 1.0'] = [1, null, 12.0000000000001, 1.0];
$tests['12.0000000000001 <=> \'\''] = [1, null, 12.0000000000001, ''];
$tests['12.0000000000001 <=> \'0\''] = [1, null, 12.0000000000001, '0'];
$tests['12.0000000000001 <=> \'-0\''] = [1, null, 12.0000000000001, '-0'];
$tests['12.0000000000001 <=> \'+0\''] = [1, null, 12.0000000000001, '+0'];
$tests['12.0000000000001 <=> \'0.0\''] = [1, null, 12.0000000000001, '0.0'];
$tests['12.0000000000001 <=> \'-0.0\''] = [1, null, 12.0000000000001, '-0.0'];
$tests['12.0000000000001 <=> \'+0.0\''] = [1, null, 12.0000000000001, '+0.0'];
$tests['12.0000000000001 <=> \'1.0\''] = [1, null, 12.0000000000001, '1.0'];
$tests['12.0000000000001 <=> \'-1.0\''] = [1, null, 12.0000000000001, '-1.0'];
$tests['12.0000000000001 <=> \'+1.0\''] = [1, null, 12.0000000000001, '+1.0'];
$tests['12.0000000000001 <=> \'-1\''] = [1, null, 12.0000000000001, '-1'];
$tests['12.0000000000001 <=> \'+1\''] = [1, null, 12.0000000000001, '+1'];
$tests['12.0000000000001 <=> \'1\''] = [1, null, 12.0000000000001, '1'];
$tests['12.0000000000001 <=> \' 0\''] = [1, null, 12.0000000000001, ' 0'];
$tests['12.0000000000001 <=> \' -0\''] = [1, null, 12.0000000000001, ' -0'];
$tests['12.0000000000001 <=> \' +0\''] = [1, null, 12.0000000000001, ' +0'];
$tests['12.0000000000001 <=> \' 0\' '] = [1, null, 12.0000000000001, ' 0 '];
$tests['12.0000000000001 <=> \' -0\''] = [1, null, 12.0000000000001, ' -0 '];
$tests['12.0000000000001 <=> \' +0\''] = [1, null, 12.0000000000001, ' +0 '];
$tests['12.0000000000001 <=> \'0\' '] = [1, null, 12.0000000000001, '0 '];
$tests['12.0000000000001 <=> \'-0\''] = [1, null, 12.0000000000001, '-0 '];
$tests['12.0000000000001 <=> \'+0\''] = [1, null, 12.0000000000001, '+0 '];
$tests['12.0000000000001 <=> \' 0.0\''] = [1, null, 12.0000000000001, ' 0.0'];
$tests['12.0000000000001 <=> \' -0.0\''] = [1, null, 12.0000000000001, ' -0.0'];
$tests['12.0000000000001 <=> \' +0.0\''] = [1, null, 12.0000000000001, ' +0.0'];
$tests['12.0000000000001 <=> \' 0.0\' '] = [1, null, 12.0000000000001, ' 0.0 '];
$tests['12.0000000000001 <=> \' -0.0\''] = [1, null, 12.0000000000001, ' -0.0 '];
$tests['12.0000000000001 <=> \' +0.0\''] = [1, null, 12.0000000000001, ' +0.0 '];
$tests['12.0000000000001 <=> \'0.0\' '] = [1, null, 12.0000000000001, '0.0 '];
$tests['12.0000000000001 <=> \'-0.0\''] = [1, null, 12.0000000000001, '-0.0 '];
$tests['12.0000000000001 <=> \'+0.0\''] = [1, null, 12.0000000000001, '+0.0 '];
$tests['12.0000000000001 <=> \'03\''] = [1, null, 12.0000000000001, '03'];
$tests['12.0000000000001 <=> \'2abc\''] = [-1, null, 12.0000000000001, '2abc'];
$tests['12.0000000000001 <=> \'2.5abc\''] = [-1, null, 12.0000000000001, '2.5abc'];
$tests['12.0000000000001 <=> \'abc2abc\''] = [-1, null, 12.0000000000001, 'abc2abc'];
$tests['12.0000000000001 <=> \'abc2.5abc\''] = [-1, null, 12.0000000000001, 'abc2.5abc'];
$tests['12.0000000000001 <=> \'\\0\''] = [1, null, 12.0000000000001, hex2bin('00')];
$tests['12.0000000000001 <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [1, null, 12.0000000000001, hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['12.0000000000001 <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [1, null, 12.0000000000001, hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['12.0000000000001 <=> 12.0000000000001'] = [0, null, 12.0000000000001, 12.0000000000001];
$tests['12.0000000000001 <=> 12.000000000000002'] = [1, null, 12.0000000000001, 12.000000000000002];
$tests['12.0000000000001 <=> pi'] = [1, null, 12.0000000000001, M_PI];
$tests['12.0000000000001 <=> int(max)'] = [-1, null, 12.0000000000001, PHP_INT_MAX];
$tests['12.0000000000001 <=> int(min)'] = [1, null, 12.0000000000001, PHP_INT_MIN];
$tests['12.0000000000001 <=> float(epsilon)'] = [1, null, 12.0000000000001, PHP_FLOAT_EPSILON];
$tests['12.0000000000001 <=> float(min)'] = [1, null, 12.0000000000001, PHP_FLOAT_MIN];
$tests['12.0000000000001 <=> float(max)'] = [-1, null, 12.0000000000001, PHP_FLOAT_MAX];
$tests['12.0000000000001 <=> float(inf)'] = [-1, null, 12.0000000000001, INF];
$tests['12.0000000000001 <=> float(-inf)'] = [1, null, 12.0000000000001, -INF];
$tests['12.0000000000001 <=> float(nan)'] = [1, null, 12.0000000000001, NAN];
$tests['12.0000000000001 <=> $closure1'] = [1, ['type' => 8,'message' => 'Object of class Closure could not be converted to float'], 12.0000000000001, $closure1];
$tests['12.0000000000001 <=> $closure2'] = [1, ['type' => 8,'message' => 'Object of class Closure could not be converted to float'], 12.0000000000001, $closure2];
$tests['12.0000000000001 <=> $fh1'] = [-1, null, 12.0000000000001, $fh1];
$tests['12.0000000000001 <=> $fh2'] = [-1, null, 12.0000000000001, $fh2];
$tests['12.0000000000001 <=> $proc'] = [-1, null, 12.0000000000001, $proc];
$tests['12.0000000000001 <=> DateTime(2024-01-01T12:00:00Z)'] = [1, ['type' => 8,'message' => 'Object of class DateTime could not be converted to float'], 12.0000000000001, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['12.0000000000001 <=> DateTime(2024-01-01T12:00:01Z)'] = [1, ['type' => 8,'message' => 'Object of class DateTime could not be converted to float'], 12.0000000000001, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['12.0000000000001 <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [1, ['type' => 8,'message' => 'Object of class DateTimeImmutable could not be converted to float'], 12.0000000000001, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['12.0000000000001 <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [1, ['type' => 8,'message' => 'Object of class DateTimeImmutable could not be converted to float'], 12.0000000000001, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['12.0000000000001 <=> []'] = [-1, null, 12.0000000000001, []];
$tests['12.0000000000001 <=> [[]]'] = [-1, null, 12.0000000000001, [[]]];
$tests['12.0000000000001 <=> [1 => []]'] = [-1, null, 12.0000000000001, [1 => []]];
$tests['12.0000000000001 <=> [1 => null]'] = [-1, null, 12.0000000000001, [1 => null]];
$tests['12.0000000000001 <=> [0]'] = [-1, null, 12.0000000000001, [0]];
$tests['12.0000000000001 <=> [0.0]'] = [-1, null, 12.0000000000001, [0.0]];
$tests['12.0000000000001 <=> [null]'] = [-1, null, 12.0000000000001, [null]];
$tests['12.0000000000001 <=> [false]'] = [-1, null, 12.0000000000001, [false]];
$tests['12.0000000000001 <=> [true]'] = [-1, null, 12.0000000000001, [true]];
$tests['12.0000000000001 <=> [\'\']'] = [-1, null, 12.0000000000001, ['']];
$tests['12.0000000000001 <=> [a, b, c]'] = [-1, null, 12.0000000000001, ['a','b','c']];
$tests['12.0000000000001 <=> [$fh1]'] = [-1, null, 12.0000000000001, [$fh1]];
$tests['12.0000000000001 <=> [foo => bar]'] = [-1, null, 12.0000000000001, ['foo' => 'bar']];
$tests['12.0000000000001 <=> object[]'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], 12.0000000000001, (object) []];
$tests['12.0000000000001 <=> object[[]]'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], 12.0000000000001, (object) [[]]];
$tests['12.0000000000001 <=> object[1 => []]'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], 12.0000000000001, (object) [1 => []]];
$tests['12.0000000000001 <=> object[1 => null]'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], 12.0000000000001, (object) [1 => null]];
$tests['12.0000000000001 <=> object[0]'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], 12.0000000000001, (object) [0]];
$tests['12.0000000000001 <=> object[0.0]'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], 12.0000000000001, (object) [0.0]];
$tests['12.0000000000001 <=> object[null]'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], 12.0000000000001, (object) [null]];
$tests['12.0000000000001 <=> object[false]'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], 12.0000000000001, (object) [false]];
$tests['12.0000000000001 <=> object[true]'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], 12.0000000000001, (object) [true]];
$tests['12.0000000000001 <=> object[\'\']'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], 12.0000000000001, (object) ['']];
$tests['12.0000000000001 <=> object[a, b, c]'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], 12.0000000000001, (object) ['a','b','c']];
$tests['12.0000000000001 <=> object[$fh1]'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], 12.0000000000001, (object) [$fh1]];
$tests['12.0000000000001 <=> object[foo => bar]'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], 12.0000000000001, (object) ['foo' => 'bar']];
$tests['12.000000000000002 <=> false'] = [1, null, 12.000000000000002, false];
$tests['12.000000000000002 <=> true'] = [0, null, 12.000000000000002, true];
$tests['12.000000000000002 <=> null'] = [1, null, 12.000000000000002, null];
$tests['12.000000000000002 <=> 0'] = [1, null, 12.000000000000002, 0];
$tests['12.000000000000002 <=> 1'] = [1, null, 12.000000000000002, 1];
$tests['12.000000000000002 <=> -1'] = [1, null, 12.000000000000002, -1];
$tests['12.000000000000002 <=> 0.0'] = [1, null, 12.000000000000002, 0.0];
$tests['12.000000000000002 <=> -1.0'] = [1, null, 12.000000000000002, -1.0];
$tests['12.000000000000002 <=> 1.0'] = [1, null, 12.000000000000002, 1.0];
$tests['12.000000000000002 <=> \'\''] = [1, null, 12.000000000000002, ''];
$tests['12.000000000000002 <=> \'0\''] = [1, null, 12.000000000000002, '0'];
$tests['12.000000000000002 <=> \'-0\''] = [1, null, 12.000000000000002, '-0'];
$tests['12.000000000000002 <=> \'+0\''] = [1, null, 12.000000000000002, '+0'];
$tests['12.000000000000002 <=> \'0.0\''] = [1, null, 12.000000000000002, '0.0'];
$tests['12.000000000000002 <=> \'-0.0\''] = [1, null, 12.000000000000002, '-0.0'];
$tests['12.000000000000002 <=> \'+0.0\''] = [1, null, 12.000000000000002, '+0.0'];
$tests['12.000000000000002 <=> \'1.0\''] = [1, null, 12.000000000000002, '1.0'];
$tests['12.000000000000002 <=> \'-1.0\''] = [1, null, 12.000000000000002, '-1.0'];
$tests['12.000000000000002 <=> \'+1.0\''] = [1, null, 12.000000000000002, '+1.0'];
$tests['12.000000000000002 <=> \'-1\''] = [1, null, 12.000000000000002, '-1'];
$tests['12.000000000000002 <=> \'+1\''] = [1, null, 12.000000000000002, '+1'];
$tests['12.000000000000002 <=> \'1\''] = [1, null, 12.000000000000002, '1'];
$tests['12.000000000000002 <=> \' 0\''] = [1, null, 12.000000000000002, ' 0'];
$tests['12.000000000000002 <=> \' -0\''] = [1, null, 12.000000000000002, ' -0'];
$tests['12.000000000000002 <=> \' +0\''] = [1, null, 12.000000000000002, ' +0'];
$tests['12.000000000000002 <=> \' 0\' '] = [1, null, 12.000000000000002, ' 0 '];
$tests['12.000000000000002 <=> \' -0\''] = [1, null, 12.000000000000002, ' -0 '];
$tests['12.000000000000002 <=> \' +0\''] = [1, null, 12.000000000000002, ' +0 '];
$tests['12.000000000000002 <=> \'0\' '] = [1, null, 12.000000000000002, '0 '];
$tests['12.000000000000002 <=> \'-0\''] = [1, null, 12.000000000000002, '-0 '];
$tests['12.000000000000002 <=> \'+0\''] = [1, null, 12.000000000000002, '+0 '];
$tests['12.000000000000002 <=> \' 0.0\''] = [1, null, 12.000000000000002, ' 0.0'];
$tests['12.000000000000002 <=> \' -0.0\''] = [1, null, 12.000000000000002, ' -0.0'];
$tests['12.000000000000002 <=> \' +0.0\''] = [1, null, 12.000000000000002, ' +0.0'];
$tests['12.000000000000002 <=> \' 0.0\' '] = [1, null, 12.000000000000002, ' 0.0 '];
$tests['12.000000000000002 <=> \' -0.0\''] = [1, null, 12.000000000000002, ' -0.0 '];
$tests['12.000000000000002 <=> \' +0.0\''] = [1, null, 12.000000000000002, ' +0.0 '];
$tests['12.000000000000002 <=> \'0.0\' '] = [1, null, 12.000000000000002, '0.0 '];
$tests['12.000000000000002 <=> \'-0.0\''] = [1, null, 12.000000000000002, '-0.0 '];
$tests['12.000000000000002 <=> \'+0.0\''] = [1, null, 12.000000000000002, '+0.0 '];
$tests['12.000000000000002 <=> \'03\''] = [1, null, 12.000000000000002, '03'];
$tests['12.000000000000002 <=> \'2abc\''] = [-1, null, 12.000000000000002, '2abc'];
$tests['12.000000000000002 <=> \'2.5abc\''] = [-1, null, 12.000000000000002, '2.5abc'];
$tests['12.000000000000002 <=> \'abc2abc\''] = [-1, null, 12.000000000000002, 'abc2abc'];
$tests['12.000000000000002 <=> \'abc2.5abc\''] = [-1, null, 12.000000000000002, 'abc2.5abc'];
$tests['12.000000000000002 <=> \'\\0\''] = [1, null, 12.000000000000002, hex2bin('00')];
$tests['12.000000000000002 <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [1, null, 12.000000000000002, hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['12.000000000000002 <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [1, null, 12.000000000000002, hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['12.000000000000002 <=> 12.0000000000001'] = [-1, null, 12.000000000000002, 12.0000000000001];
$tests['12.000000000000002 <=> 12.000000000000002'] = [0, null, 12.000000000000002, 12.000000000000002];
$tests['12.000000000000002 <=> pi'] = [1, null, 12.000000000000002, M_PI];
$tests['12.000000000000002 <=> int(max)'] = [-1, null, 12.000000000000002, PHP_INT_MAX];
$tests['12.000000000000002 <=> int(min)'] = [1, null, 12.000000000000002, PHP_INT_MIN];
$tests['12.000000000000002 <=> float(epsilon)'] = [1, null, 12.000000000000002, PHP_FLOAT_EPSILON];
$tests['12.000000000000002 <=> float(min)'] = [1, null, 12.000000000000002, PHP_FLOAT_MIN];
$tests['12.000000000000002 <=> float(max)'] = [-1, null, 12.000000000000002, PHP_FLOAT_MAX];
$tests['12.000000000000002 <=> float(inf)'] = [-1, null, 12.000000000000002, INF];
$tests['12.000000000000002 <=> float(-inf)'] = [1, null, 12.000000000000002, -INF];
$tests['12.000000000000002 <=> float(nan)'] = [1, null, 12.000000000000002, NAN];
$tests['12.000000000000002 <=> $closure1'] = [1, ['type' => 8,'message' => 'Object of class Closure could not be converted to float'], 12.000000000000002, $closure1];
$tests['12.000000000000002 <=> $closure2'] = [1, ['type' => 8,'message' => 'Object of class Closure could not be converted to float'], 12.000000000000002, $closure2];
$tests['12.000000000000002 <=> $fh1'] = [-1, null, 12.000000000000002, $fh1];
$tests['12.000000000000002 <=> $fh2'] = [-1, null, 12.000000000000002, $fh2];
$tests['12.000000000000002 <=> $proc'] = [-1, null, 12.000000000000002, $proc];
$tests['12.000000000000002 <=> DateTime(2024-01-01T12:00:00Z)'] = [1, ['type' => 8,'message' => 'Object of class DateTime could not be converted to float'], 12.000000000000002, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['12.000000000000002 <=> DateTime(2024-01-01T12:00:01Z)'] = [1, ['type' => 8,'message' => 'Object of class DateTime could not be converted to float'], 12.000000000000002, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['12.000000000000002 <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [1, ['type' => 8,'message' => 'Object of class DateTimeImmutable could not be converted to float'], 12.000000000000002, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['12.000000000000002 <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [1, ['type' => 8,'message' => 'Object of class DateTimeImmutable could not be converted to float'], 12.000000000000002, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['12.000000000000002 <=> []'] = [-1, null, 12.000000000000002, []];
$tests['12.000000000000002 <=> [[]]'] = [-1, null, 12.000000000000002, [[]]];
$tests['12.000000000000002 <=> [1 => []]'] = [-1, null, 12.000000000000002, [1 => []]];
$tests['12.000000000000002 <=> [1 => null]'] = [-1, null, 12.000000000000002, [1 => null]];
$tests['12.000000000000002 <=> [0]'] = [-1, null, 12.000000000000002, [0]];
$tests['12.000000000000002 <=> [0.0]'] = [-1, null, 12.000000000000002, [0.0]];
$tests['12.000000000000002 <=> [null]'] = [-1, null, 12.000000000000002, [null]];
$tests['12.000000000000002 <=> [false]'] = [-1, null, 12.000000000000002, [false]];
$tests['12.000000000000002 <=> [true]'] = [-1, null, 12.000000000000002, [true]];
$tests['12.000000000000002 <=> [\'\']'] = [-1, null, 12.000000000000002, ['']];
$tests['12.000000000000002 <=> [a, b, c]'] = [-1, null, 12.000000000000002, ['a','b','c']];
$tests['12.000000000000002 <=> [$fh1]'] = [-1, null, 12.000000000000002, [$fh1]];
$tests['12.000000000000002 <=> [foo => bar]'] = [-1, null, 12.000000000000002, ['foo' => 'bar']];
$tests['12.000000000000002 <=> object[]'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], 12.000000000000002, (object) []];
$tests['12.000000000000002 <=> object[[]]'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], 12.000000000000002, (object) [[]]];
$tests['12.000000000000002 <=> object[1 => []]'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], 12.000000000000002, (object) [1 => []]];
$tests['12.000000000000002 <=> object[1 => null]'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], 12.000000000000002, (object) [1 => null]];
$tests['12.000000000000002 <=> object[0]'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], 12.000000000000002, (object) [0]];
$tests['12.000000000000002 <=> object[0.0]'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], 12.000000000000002, (object) [0.0]];
$tests['12.000000000000002 <=> object[null]'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], 12.000000000000002, (object) [null]];
$tests['12.000000000000002 <=> object[false]'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], 12.000000000000002, (object) [false]];
$tests['12.000000000000002 <=> object[true]'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], 12.000000000000002, (object) [true]];
$tests['12.000000000000002 <=> object[\'\']'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], 12.000000000000002, (object) ['']];
$tests['12.000000000000002 <=> object[a, b, c]'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], 12.000000000000002, (object) ['a','b','c']];
$tests['12.000000000000002 <=> object[$fh1]'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], 12.000000000000002, (object) [$fh1]];
$tests['12.000000000000002 <=> object[foo => bar]'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], 12.000000000000002, (object) ['foo' => 'bar']];
$tests['pi <=> false'] = [1, null, M_PI, false];
$tests['pi <=> true'] = [0, null, M_PI, true];
$tests['pi <=> null'] = [1, null, M_PI, null];
$tests['pi <=> 0'] = [1, null, M_PI, 0];
$tests['pi <=> 1'] = [1, null, M_PI, 1];
$tests['pi <=> -1'] = [1, null, M_PI, -1];
$tests['pi <=> 0.0'] = [1, null, M_PI, 0.0];
$tests['pi <=> -1.0'] = [1, null, M_PI, -1.0];
$tests['pi <=> 1.0'] = [1, null, M_PI, 1.0];
$tests['pi <=> \'\''] = [1, null, M_PI, ''];
$tests['pi <=> \'0\''] = [1, null, M_PI, '0'];
$tests['pi <=> \'-0\''] = [1, null, M_PI, '-0'];
$tests['pi <=> \'+0\''] = [1, null, M_PI, '+0'];
$tests['pi <=> \'0.0\''] = [1, null, M_PI, '0.0'];
$tests['pi <=> \'-0.0\''] = [1, null, M_PI, '-0.0'];
$tests['pi <=> \'+0.0\''] = [1, null, M_PI, '+0.0'];
$tests['pi <=> \'1.0\''] = [1, null, M_PI, '1.0'];
$tests['pi <=> \'-1.0\''] = [1, null, M_PI, '-1.0'];
$tests['pi <=> \'+1.0\''] = [1, null, M_PI, '+1.0'];
$tests['pi <=> \'-1\''] = [1, null, M_PI, '-1'];
$tests['pi <=> \'+1\''] = [1, null, M_PI, '+1'];
$tests['pi <=> \'1\''] = [1, null, M_PI, '1'];
$tests['pi <=> \' 0\''] = [1, null, M_PI, ' 0'];
$tests['pi <=> \' -0\''] = [1, null, M_PI, ' -0'];
$tests['pi <=> \' +0\''] = [1, null, M_PI, ' +0'];
$tests['pi <=> \' 0\' '] = [1, null, M_PI, ' 0 '];
$tests['pi <=> \' -0\''] = [1, null, M_PI, ' -0 '];
$tests['pi <=> \' +0\''] = [1, null, M_PI, ' +0 '];
$tests['pi <=> \'0\' '] = [1, null, M_PI, '0 '];
$tests['pi <=> \'-0\''] = [1, null, M_PI, '-0 '];
$tests['pi <=> \'+0\''] = [1, null, M_PI, '+0 '];
$tests['pi <=> \' 0.0\''] = [1, null, M_PI, ' 0.0'];
$tests['pi <=> \' -0.0\''] = [1, null, M_PI, ' -0.0'];
$tests['pi <=> \' +0.0\''] = [1, null, M_PI, ' +0.0'];
$tests['pi <=> \' 0.0\' '] = [1, null, M_PI, ' 0.0 '];
$tests['pi <=> \' -0.0\''] = [1, null, M_PI, ' -0.0 '];
$tests['pi <=> \' +0.0\''] = [1, null, M_PI, ' +0.0 '];
$tests['pi <=> \'0.0\' '] = [1, null, M_PI, '0.0 '];
$tests['pi <=> \'-0.0\''] = [1, null, M_PI, '-0.0 '];
$tests['pi <=> \'+0.0\''] = [1, null, M_PI, '+0.0 '];
$tests['pi <=> \'03\''] = [1, null, M_PI, '03'];
$tests['pi <=> \'2abc\''] = [1, null, M_PI, '2abc'];
$tests['pi <=> \'2.5abc\''] = [1, null, M_PI, '2.5abc'];
$tests['pi <=> \'abc2abc\''] = [-1, null, M_PI, 'abc2abc'];
$tests['pi <=> \'abc2.5abc\''] = [-1, null, M_PI, 'abc2.5abc'];
$tests['pi <=> \'\\0\''] = [1, null, M_PI, hex2bin('00')];
$tests['pi <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [-1, null, M_PI, hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['pi <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [1, null, M_PI, hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['pi <=> 12.0000000000001'] = [-1, null, M_PI, 12.0000000000001];
$tests['pi <=> 12.000000000000002'] = [-1, null, M_PI, 12.000000000000002];
$tests['pi <=> pi'] = [0, null, M_PI, M_PI];
$tests['pi <=> int(max)'] = [-1, null, M_PI, PHP_INT_MAX];
$tests['pi <=> int(min)'] = [1, null, M_PI, PHP_INT_MIN];
$tests['pi <=> float(epsilon)'] = [1, null, M_PI, PHP_FLOAT_EPSILON];
$tests['pi <=> float(min)'] = [1, null, M_PI, PHP_FLOAT_MIN];
$tests['pi <=> float(max)'] = [-1, null, M_PI, PHP_FLOAT_MAX];
$tests['pi <=> float(inf)'] = [-1, null, M_PI, INF];
$tests['pi <=> float(-inf)'] = [1, null, M_PI, -INF];
$tests['pi <=> float(nan)'] = [1, null, M_PI, NAN];
$tests['pi <=> $closure1'] = [1, ['type' => 8,'message' => 'Object of class Closure could not be converted to float'], M_PI, $closure1];
$tests['pi <=> $closure2'] = [1, ['type' => 8,'message' => 'Object of class Closure could not be converted to float'], M_PI, $closure2];
$tests['pi <=> $fh1'] = [-1, null, M_PI, $fh1];
$tests['pi <=> $fh2'] = [-1, null, M_PI, $fh2];
$tests['pi <=> $proc'] = [-1, null, M_PI, $proc];
$tests['pi <=> DateTime(2024-01-01T12:00:00Z)'] = [1, ['type' => 8,'message' => 'Object of class DateTime could not be converted to float'], M_PI, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['pi <=> DateTime(2024-01-01T12:00:01Z)'] = [1, ['type' => 8,'message' => 'Object of class DateTime could not be converted to float'], M_PI, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['pi <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [1, ['type' => 8,'message' => 'Object of class DateTimeImmutable could not be converted to float'], M_PI, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['pi <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [1, ['type' => 8,'message' => 'Object of class DateTimeImmutable could not be converted to float'], M_PI, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['pi <=> []'] = [-1, null, M_PI, []];
$tests['pi <=> [[]]'] = [-1, null, M_PI, [[]]];
$tests['pi <=> [1 => []]'] = [-1, null, M_PI, [1 => []]];
$tests['pi <=> [1 => null]'] = [-1, null, M_PI, [1 => null]];
$tests['pi <=> [0]'] = [-1, null, M_PI, [0]];
$tests['pi <=> [0.0]'] = [-1, null, M_PI, [0.0]];
$tests['pi <=> [null]'] = [-1, null, M_PI, [null]];
$tests['pi <=> [false]'] = [-1, null, M_PI, [false]];
$tests['pi <=> [true]'] = [-1, null, M_PI, [true]];
$tests['pi <=> [\'\']'] = [-1, null, M_PI, ['']];
$tests['pi <=> [a, b, c]'] = [-1, null, M_PI, ['a','b','c']];
$tests['pi <=> [$fh1]'] = [-1, null, M_PI, [$fh1]];
$tests['pi <=> [foo => bar]'] = [-1, null, M_PI, ['foo' => 'bar']];
$tests['pi <=> object[]'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], M_PI, (object) []];
$tests['pi <=> object[[]]'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], M_PI, (object) [[]]];
$tests['pi <=> object[1 => []]'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], M_PI, (object) [1 => []]];
$tests['pi <=> object[1 => null]'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], M_PI, (object) [1 => null]];
$tests['pi <=> object[0]'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], M_PI, (object) [0]];
$tests['pi <=> object[0.0]'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], M_PI, (object) [0.0]];
$tests['pi <=> object[null]'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], M_PI, (object) [null]];
$tests['pi <=> object[false]'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], M_PI, (object) [false]];
$tests['pi <=> object[true]'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], M_PI, (object) [true]];
$tests['pi <=> object[\'\']'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], M_PI, (object) ['']];
$tests['pi <=> object[a, b, c]'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], M_PI, (object) ['a','b','c']];
$tests['pi <=> object[$fh1]'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], M_PI, (object) [$fh1]];
$tests['pi <=> object[foo => bar]'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], M_PI, (object) ['foo' => 'bar']];
$tests['int(max) <=> false'] = [1, null, PHP_INT_MAX, false];
$tests['int(max) <=> true'] = [0, null, PHP_INT_MAX, true];
$tests['int(max) <=> null'] = [1, null, PHP_INT_MAX, null];
$tests['int(max) <=> 0'] = [1, null, PHP_INT_MAX, 0];
$tests['int(max) <=> 1'] = [1, null, PHP_INT_MAX, 1];
$tests['int(max) <=> -1'] = [1, null, PHP_INT_MAX, -1];
$tests['int(max) <=> 0.0'] = [1, null, PHP_INT_MAX, 0.0];
$tests['int(max) <=> -1.0'] = [1, null, PHP_INT_MAX, -1.0];
$tests['int(max) <=> 1.0'] = [1, null, PHP_INT_MAX, 1.0];
$tests['int(max) <=> \'\''] = [1, null, PHP_INT_MAX, ''];
$tests['int(max) <=> \'0\''] = [1, null, PHP_INT_MAX, '0'];
$tests['int(max) <=> \'-0\''] = [1, null, PHP_INT_MAX, '-0'];
$tests['int(max) <=> \'+0\''] = [1, null, PHP_INT_MAX, '+0'];
$tests['int(max) <=> \'0.0\''] = [1, null, PHP_INT_MAX, '0.0'];
$tests['int(max) <=> \'-0.0\''] = [1, null, PHP_INT_MAX, '-0.0'];
$tests['int(max) <=> \'+0.0\''] = [1, null, PHP_INT_MAX, '+0.0'];
$tests['int(max) <=> \'1.0\''] = [1, null, PHP_INT_MAX, '1.0'];
$tests['int(max) <=> \'-1.0\''] = [1, null, PHP_INT_MAX, '-1.0'];
$tests['int(max) <=> \'+1.0\''] = [1, null, PHP_INT_MAX, '+1.0'];
$tests['int(max) <=> \'-1\''] = [1, null, PHP_INT_MAX, '-1'];
$tests['int(max) <=> \'+1\''] = [1, null, PHP_INT_MAX, '+1'];
$tests['int(max) <=> \'1\''] = [1, null, PHP_INT_MAX, '1'];
$tests['int(max) <=> \' 0\''] = [1, null, PHP_INT_MAX, ' 0'];
$tests['int(max) <=> \' -0\''] = [1, null, PHP_INT_MAX, ' -0'];
$tests['int(max) <=> \' +0\''] = [1, null, PHP_INT_MAX, ' +0'];
$tests['int(max) <=> \' 0\' '] = [1, null, PHP_INT_MAX, ' 0 '];
$tests['int(max) <=> \' -0\''] = [1, null, PHP_INT_MAX, ' -0 '];
$tests['int(max) <=> \' +0\''] = [1, null, PHP_INT_MAX, ' +0 '];
$tests['int(max) <=> \'0\' '] = [1, null, PHP_INT_MAX, '0 '];
$tests['int(max) <=> \'-0\''] = [1, null, PHP_INT_MAX, '-0 '];
$tests['int(max) <=> \'+0\''] = [1, null, PHP_INT_MAX, '+0 '];
$tests['int(max) <=> \' 0.0\''] = [1, null, PHP_INT_MAX, ' 0.0'];
$tests['int(max) <=> \' -0.0\''] = [1, null, PHP_INT_MAX, ' -0.0'];
$tests['int(max) <=> \' +0.0\''] = [1, null, PHP_INT_MAX, ' +0.0'];
$tests['int(max) <=> \' 0.0\' '] = [1, null, PHP_INT_MAX, ' 0.0 '];
$tests['int(max) <=> \' -0.0\''] = [1, null, PHP_INT_MAX, ' -0.0 '];
$tests['int(max) <=> \' +0.0\''] = [1, null, PHP_INT_MAX, ' +0.0 '];
$tests['int(max) <=> \'0.0\' '] = [1, null, PHP_INT_MAX, '0.0 '];
$tests['int(max) <=> \'-0.0\''] = [1, null, PHP_INT_MAX, '-0.0 '];
$tests['int(max) <=> \'+0.0\''] = [1, null, PHP_INT_MAX, '+0.0 '];
$tests['int(max) <=> \'03\''] = [1, null, PHP_INT_MAX, '03'];
$tests['int(max) <=> \'2abc\''] = [1, null, PHP_INT_MAX, '2abc'];
$tests['int(max) <=> \'2.5abc\''] = [1, null, PHP_INT_MAX, '2.5abc'];
$tests['int(max) <=> \'abc2abc\''] = [-1, null, PHP_INT_MAX, 'abc2abc'];
$tests['int(max) <=> \'abc2.5abc\''] = [-1, null, PHP_INT_MAX, 'abc2.5abc'];
$tests['int(max) <=> \'\\0\''] = [1, null, PHP_INT_MAX, hex2bin('00')];
$tests['int(max) <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [1, null, PHP_INT_MAX, hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['int(max) <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [1, null, PHP_INT_MAX, hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['int(max) <=> 12.0000000000001'] = [1, null, PHP_INT_MAX, 12.0000000000001];
$tests['int(max) <=> 12.000000000000002'] = [1, null, PHP_INT_MAX, 12.000000000000002];
$tests['int(max) <=> pi'] = [1, null, PHP_INT_MAX, M_PI];
$tests['int(max) <=> int(max)'] = [0, null, PHP_INT_MAX, PHP_INT_MAX];
$tests['int(max) <=> int(min)'] = [1, null, PHP_INT_MAX, PHP_INT_MIN];
$tests['int(max) <=> float(epsilon)'] = [1, null, PHP_INT_MAX, PHP_FLOAT_EPSILON];
$tests['int(max) <=> float(min)'] = [1, null, PHP_INT_MAX, PHP_FLOAT_MIN];
$tests['int(max) <=> float(max)'] = [-1, null, PHP_INT_MAX, PHP_FLOAT_MAX];
$tests['int(max) <=> float(inf)'] = [-1, null, PHP_INT_MAX, INF];
$tests['int(max) <=> float(-inf)'] = [1, null, PHP_INT_MAX, -INF];
$tests['int(max) <=> float(nan)'] = [1, null, PHP_INT_MAX, NAN];
$tests['int(max) <=> $closure1'] = [1, ['type' => 8,'message' => 'Object of class Closure could not be converted to int'], PHP_INT_MAX, $closure1];
$tests['int(max) <=> $closure2'] = [1, ['type' => 8,'message' => 'Object of class Closure could not be converted to int'], PHP_INT_MAX, $closure2];
$tests['int(max) <=> $fh1'] = [1, null, PHP_INT_MAX, $fh1];
$tests['int(max) <=> $fh2'] = [1, null, PHP_INT_MAX, $fh2];
$tests['int(max) <=> $proc'] = [1, null, PHP_INT_MAX, $proc];
$tests['int(max) <=> DateTime(2024-01-01T12:00:00Z)'] = [1, ['type' => 8,'message' => 'Object of class DateTime could not be converted to int'], PHP_INT_MAX, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['int(max) <=> DateTime(2024-01-01T12:00:01Z)'] = [1, ['type' => 8,'message' => 'Object of class DateTime could not be converted to int'], PHP_INT_MAX, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['int(max) <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [1, ['type' => 8,'message' => 'Object of class DateTimeImmutable could not be converted to int'], PHP_INT_MAX, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['int(max) <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [1, ['type' => 8,'message' => 'Object of class DateTimeImmutable could not be converted to int'], PHP_INT_MAX, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['int(max) <=> []'] = [-1, null, PHP_INT_MAX, []];
$tests['int(max) <=> [[]]'] = [-1, null, PHP_INT_MAX, [[]]];
$tests['int(max) <=> [1 => []]'] = [-1, null, PHP_INT_MAX, [1 => []]];
$tests['int(max) <=> [1 => null]'] = [-1, null, PHP_INT_MAX, [1 => null]];
$tests['int(max) <=> [0]'] = [-1, null, PHP_INT_MAX, [0]];
$tests['int(max) <=> [0.0]'] = [-1, null, PHP_INT_MAX, [0.0]];
$tests['int(max) <=> [null]'] = [-1, null, PHP_INT_MAX, [null]];
$tests['int(max) <=> [false]'] = [-1, null, PHP_INT_MAX, [false]];
$tests['int(max) <=> [true]'] = [-1, null, PHP_INT_MAX, [true]];
$tests['int(max) <=> [\'\']'] = [-1, null, PHP_INT_MAX, ['']];
$tests['int(max) <=> [a, b, c]'] = [-1, null, PHP_INT_MAX, ['a','b','c']];
$tests['int(max) <=> [$fh1]'] = [-1, null, PHP_INT_MAX, [$fh1]];
$tests['int(max) <=> [foo => bar]'] = [-1, null, PHP_INT_MAX, ['foo' => 'bar']];
$tests['int(max) <=> object[]'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], PHP_INT_MAX, (object) []];
$tests['int(max) <=> object[[]]'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], PHP_INT_MAX, (object) [[]]];
$tests['int(max) <=> object[1 => []]'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], PHP_INT_MAX, (object) [1 => []]];
$tests['int(max) <=> object[1 => null]'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], PHP_INT_MAX, (object) [1 => null]];
$tests['int(max) <=> object[0]'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], PHP_INT_MAX, (object) [0]];
$tests['int(max) <=> object[0.0]'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], PHP_INT_MAX, (object) [0.0]];
$tests['int(max) <=> object[null]'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], PHP_INT_MAX, (object) [null]];
$tests['int(max) <=> object[false]'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], PHP_INT_MAX, (object) [false]];
$tests['int(max) <=> object[true]'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], PHP_INT_MAX, (object) [true]];
$tests['int(max) <=> object[\'\']'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], PHP_INT_MAX, (object) ['']];
$tests['int(max) <=> object[a, b, c]'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], PHP_INT_MAX, (object) ['a','b','c']];
$tests['int(max) <=> object[$fh1]'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], PHP_INT_MAX, (object) [$fh1]];
$tests['int(max) <=> object[foo => bar]'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], PHP_INT_MAX, (object) ['foo' => 'bar']];
$tests['int(min) <=> false'] = [1, null, PHP_INT_MIN, false];
$tests['int(min) <=> true'] = [0, null, PHP_INT_MIN, true];
$tests['int(min) <=> null'] = [1, null, PHP_INT_MIN, null];
$tests['int(min) <=> 0'] = [-1, null, PHP_INT_MIN, 0];
$tests['int(min) <=> 1'] = [-1, null, PHP_INT_MIN, 1];
$tests['int(min) <=> -1'] = [-1, null, PHP_INT_MIN, -1];
$tests['int(min) <=> 0.0'] = [-1, null, PHP_INT_MIN, 0.0];
$tests['int(min) <=> -1.0'] = [-1, null, PHP_INT_MIN, -1.0];
$tests['int(min) <=> 1.0'] = [-1, null, PHP_INT_MIN, 1.0];
$tests['int(min) <=> \'\''] = [1, null, PHP_INT_MIN, ''];
$tests['int(min) <=> \'0\''] = [-1, null, PHP_INT_MIN, '0'];
$tests['int(min) <=> \'-0\''] = [-1, null, PHP_INT_MIN, '-0'];
$tests['int(min) <=> \'+0\''] = [-1, null, PHP_INT_MIN, '+0'];
$tests['int(min) <=> \'0.0\''] = [-1, null, PHP_INT_MIN, '0.0'];
$tests['int(min) <=> \'-0.0\''] = [-1, null, PHP_INT_MIN, '-0.0'];
$tests['int(min) <=> \'+0.0\''] = [-1, null, PHP_INT_MIN, '+0.0'];
$tests['int(min) <=> \'1.0\''] = [-1, null, PHP_INT_MIN, '1.0'];
$tests['int(min) <=> \'-1.0\''] = [-1, null, PHP_INT_MIN, '-1.0'];
$tests['int(min) <=> \'+1.0\''] = [-1, null, PHP_INT_MIN, '+1.0'];
$tests['int(min) <=> \'-1\''] = [-1, null, PHP_INT_MIN, '-1'];
$tests['int(min) <=> \'+1\''] = [-1, null, PHP_INT_MIN, '+1'];
$tests['int(min) <=> \'1\''] = [-1, null, PHP_INT_MIN, '1'];
$tests['int(min) <=> \' 0\''] = [-1, null, PHP_INT_MIN, ' 0'];
$tests['int(min) <=> \' -0\''] = [-1, null, PHP_INT_MIN, ' -0'];
$tests['int(min) <=> \' +0\''] = [-1, null, PHP_INT_MIN, ' +0'];
$tests['int(min) <=> \' 0\' '] = [-1, null, PHP_INT_MIN, ' 0 '];
$tests['int(min) <=> \' -0\''] = [-1, null, PHP_INT_MIN, ' -0 '];
$tests['int(min) <=> \' +0\''] = [-1, null, PHP_INT_MIN, ' +0 '];
$tests['int(min) <=> \'0\' '] = [-1, null, PHP_INT_MIN, '0 '];
$tests['int(min) <=> \'-0\''] = [-1, null, PHP_INT_MIN, '-0 '];
$tests['int(min) <=> \'+0\''] = [-1, null, PHP_INT_MIN, '+0 '];
$tests['int(min) <=> \' 0.0\''] = [-1, null, PHP_INT_MIN, ' 0.0'];
$tests['int(min) <=> \' -0.0\''] = [-1, null, PHP_INT_MIN, ' -0.0'];
$tests['int(min) <=> \' +0.0\''] = [-1, null, PHP_INT_MIN, ' +0.0'];
$tests['int(min) <=> \' 0.0\' '] = [-1, null, PHP_INT_MIN, ' 0.0 '];
$tests['int(min) <=> \' -0.0\''] = [-1, null, PHP_INT_MIN, ' -0.0 '];
$tests['int(min) <=> \' +0.0\''] = [-1, null, PHP_INT_MIN, ' +0.0 '];
$tests['int(min) <=> \'0.0\' '] = [-1, null, PHP_INT_MIN, '0.0 '];
$tests['int(min) <=> \'-0.0\''] = [-1, null, PHP_INT_MIN, '-0.0 '];
$tests['int(min) <=> \'+0.0\''] = [-1, null, PHP_INT_MIN, '+0.0 '];
$tests['int(min) <=> \'03\''] = [-1, null, PHP_INT_MIN, '03'];
$tests['int(min) <=> \'2abc\''] = [-1, null, PHP_INT_MIN, '2abc'];
$tests['int(min) <=> \'2.5abc\''] = [-1, null, PHP_INT_MIN, '2.5abc'];
$tests['int(min) <=> \'abc2abc\''] = [-1, null, PHP_INT_MIN, 'abc2abc'];
$tests['int(min) <=> \'abc2.5abc\''] = [-1, null, PHP_INT_MIN, 'abc2.5abc'];
$tests['int(min) <=> \'\\0\''] = [1, null, PHP_INT_MIN, hex2bin('00')];
$tests['int(min) <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [-1, null, PHP_INT_MIN, hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['int(min) <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [1, null, PHP_INT_MIN, hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['int(min) <=> 12.0000000000001'] = [-1, null, PHP_INT_MIN, 12.0000000000001];
$tests['int(min) <=> 12.000000000000002'] = [-1, null, PHP_INT_MIN, 12.000000000000002];
$tests['int(min) <=> pi'] = [-1, null, PHP_INT_MIN, M_PI];
$tests['int(min) <=> int(max)'] = [-1, null, PHP_INT_MIN, PHP_INT_MAX];
$tests['int(min) <=> int(min)'] = [0, null, PHP_INT_MIN, PHP_INT_MIN];
$tests['int(min) <=> float(epsilon)'] = [-1, null, PHP_INT_MIN, PHP_FLOAT_EPSILON];
$tests['int(min) <=> float(min)'] = [-1, null, PHP_INT_MIN, PHP_FLOAT_MIN];
$tests['int(min) <=> float(max)'] = [-1, null, PHP_INT_MIN, PHP_FLOAT_MAX];
$tests['int(min) <=> float(inf)'] = [-1, null, PHP_INT_MIN, INF];
$tests['int(min) <=> float(-inf)'] = [1, null, PHP_INT_MIN, -INF];
$tests['int(min) <=> float(nan)'] = [1, null, PHP_INT_MIN, NAN];
$tests['int(min) <=> $closure1'] = [-1, ['type' => 8,'message' => 'Object of class Closure could not be converted to int'], PHP_INT_MIN, $closure1];
$tests['int(min) <=> $closure2'] = [-1, ['type' => 8,'message' => 'Object of class Closure could not be converted to int'], PHP_INT_MIN, $closure2];
$tests['int(min) <=> $fh1'] = [-1, null, PHP_INT_MIN, $fh1];
$tests['int(min) <=> $fh2'] = [-1, null, PHP_INT_MIN, $fh2];
$tests['int(min) <=> $proc'] = [-1, null, PHP_INT_MIN, $proc];
$tests['int(min) <=> DateTime(2024-01-01T12:00:00Z)'] = [-1, ['type' => 8,'message' => 'Object of class DateTime could not be converted to int'], PHP_INT_MIN, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['int(min) <=> DateTime(2024-01-01T12:00:01Z)'] = [-1, ['type' => 8,'message' => 'Object of class DateTime could not be converted to int'], PHP_INT_MIN, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['int(min) <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [-1, ['type' => 8,'message' => 'Object of class DateTimeImmutable could not be converted to int'], PHP_INT_MIN, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['int(min) <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [-1, ['type' => 8,'message' => 'Object of class DateTimeImmutable could not be converted to int'], PHP_INT_MIN, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['int(min) <=> []'] = [-1, null, PHP_INT_MIN, []];
$tests['int(min) <=> [[]]'] = [-1, null, PHP_INT_MIN, [[]]];
$tests['int(min) <=> [1 => []]'] = [-1, null, PHP_INT_MIN, [1 => []]];
$tests['int(min) <=> [1 => null]'] = [-1, null, PHP_INT_MIN, [1 => null]];
$tests['int(min) <=> [0]'] = [-1, null, PHP_INT_MIN, [0]];
$tests['int(min) <=> [0.0]'] = [-1, null, PHP_INT_MIN, [0.0]];
$tests['int(min) <=> [null]'] = [-1, null, PHP_INT_MIN, [null]];
$tests['int(min) <=> [false]'] = [-1, null, PHP_INT_MIN, [false]];
$tests['int(min) <=> [true]'] = [-1, null, PHP_INT_MIN, [true]];
$tests['int(min) <=> [\'\']'] = [-1, null, PHP_INT_MIN, ['']];
$tests['int(min) <=> [a, b, c]'] = [-1, null, PHP_INT_MIN, ['a','b','c']];
$tests['int(min) <=> [$fh1]'] = [-1, null, PHP_INT_MIN, [$fh1]];
$tests['int(min) <=> [foo => bar]'] = [-1, null, PHP_INT_MIN, ['foo' => 'bar']];
$tests['int(min) <=> object[]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], PHP_INT_MIN, (object) []];
$tests['int(min) <=> object[[]]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], PHP_INT_MIN, (object) [[]]];
$tests['int(min) <=> object[1 => []]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], PHP_INT_MIN, (object) [1 => []]];
$tests['int(min) <=> object[1 => null]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], PHP_INT_MIN, (object) [1 => null]];
$tests['int(min) <=> object[0]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], PHP_INT_MIN, (object) [0]];
$tests['int(min) <=> object[0.0]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], PHP_INT_MIN, (object) [0.0]];
$tests['int(min) <=> object[null]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], PHP_INT_MIN, (object) [null]];
$tests['int(min) <=> object[false]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], PHP_INT_MIN, (object) [false]];
$tests['int(min) <=> object[true]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], PHP_INT_MIN, (object) [true]];
$tests['int(min) <=> object[\'\']'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], PHP_INT_MIN, (object) ['']];
$tests['int(min) <=> object[a, b, c]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], PHP_INT_MIN, (object) ['a','b','c']];
$tests['int(min) <=> object[$fh1]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], PHP_INT_MIN, (object) [$fh1]];
$tests['int(min) <=> object[foo => bar]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], PHP_INT_MIN, (object) ['foo' => 'bar']];
$tests['float(epsilon) <=> false'] = [1, null, PHP_FLOAT_EPSILON, false];
$tests['float(epsilon) <=> true'] = [0, null, PHP_FLOAT_EPSILON, true];
$tests['float(epsilon) <=> null'] = [1, null, PHP_FLOAT_EPSILON, null];
$tests['float(epsilon) <=> 0'] = [1, null, PHP_FLOAT_EPSILON, 0];
$tests['float(epsilon) <=> 1'] = [-1, null, PHP_FLOAT_EPSILON, 1];
$tests['float(epsilon) <=> -1'] = [1, null, PHP_FLOAT_EPSILON, -1];
$tests['float(epsilon) <=> 0.0'] = [1, null, PHP_FLOAT_EPSILON, 0.0];
$tests['float(epsilon) <=> -1.0'] = [1, null, PHP_FLOAT_EPSILON, -1.0];
$tests['float(epsilon) <=> 1.0'] = [-1, null, PHP_FLOAT_EPSILON, 1.0];
$tests['float(epsilon) <=> \'\''] = [1, null, PHP_FLOAT_EPSILON, ''];
$tests['float(epsilon) <=> \'0\''] = [1, null, PHP_FLOAT_EPSILON, '0'];
$tests['float(epsilon) <=> \'-0\''] = [1, null, PHP_FLOAT_EPSILON, '-0'];
$tests['float(epsilon) <=> \'+0\''] = [1, null, PHP_FLOAT_EPSILON, '+0'];
$tests['float(epsilon) <=> \'0.0\''] = [1, null, PHP_FLOAT_EPSILON, '0.0'];
$tests['float(epsilon) <=> \'-0.0\''] = [1, null, PHP_FLOAT_EPSILON, '-0.0'];
$tests['float(epsilon) <=> \'+0.0\''] = [1, null, PHP_FLOAT_EPSILON, '+0.0'];
$tests['float(epsilon) <=> \'1.0\''] = [-1, null, PHP_FLOAT_EPSILON, '1.0'];
$tests['float(epsilon) <=> \'-1.0\''] = [1, null, PHP_FLOAT_EPSILON, '-1.0'];
$tests['float(epsilon) <=> \'+1.0\''] = [-1, null, PHP_FLOAT_EPSILON, '+1.0'];
$tests['float(epsilon) <=> \'-1\''] = [1, null, PHP_FLOAT_EPSILON, '-1'];
$tests['float(epsilon) <=> \'+1\''] = [-1, null, PHP_FLOAT_EPSILON, '+1'];
$tests['float(epsilon) <=> \'1\''] = [-1, null, PHP_FLOAT_EPSILON, '1'];
$tests['float(epsilon) <=> \' 0\''] = [1, null, PHP_FLOAT_EPSILON, ' 0'];
$tests['float(epsilon) <=> \' -0\''] = [1, null, PHP_FLOAT_EPSILON, ' -0'];
$tests['float(epsilon) <=> \' +0\''] = [1, null, PHP_FLOAT_EPSILON, ' +0'];
$tests['float(epsilon) <=> \' 0\' '] = [1, null, PHP_FLOAT_EPSILON, ' 0 '];
$tests['float(epsilon) <=> \' -0\''] = [1, null, PHP_FLOAT_EPSILON, ' -0 '];
$tests['float(epsilon) <=> \' +0\''] = [1, null, PHP_FLOAT_EPSILON, ' +0 '];
$tests['float(epsilon) <=> \'0\' '] = [1, null, PHP_FLOAT_EPSILON, '0 '];
$tests['float(epsilon) <=> \'-0\''] = [1, null, PHP_FLOAT_EPSILON, '-0 '];
$tests['float(epsilon) <=> \'+0\''] = [1, null, PHP_FLOAT_EPSILON, '+0 '];
$tests['float(epsilon) <=> \' 0.0\''] = [1, null, PHP_FLOAT_EPSILON, ' 0.0'];
$tests['float(epsilon) <=> \' -0.0\''] = [1, null, PHP_FLOAT_EPSILON, ' -0.0'];
$tests['float(epsilon) <=> \' +0.0\''] = [1, null, PHP_FLOAT_EPSILON, ' +0.0'];
$tests['float(epsilon) <=> \' 0.0\' '] = [1, null, PHP_FLOAT_EPSILON, ' 0.0 '];
$tests['float(epsilon) <=> \' -0.0\''] = [1, null, PHP_FLOAT_EPSILON, ' -0.0 '];
$tests['float(epsilon) <=> \' +0.0\''] = [1, null, PHP_FLOAT_EPSILON, ' +0.0 '];
$tests['float(epsilon) <=> \'0.0\' '] = [1, null, PHP_FLOAT_EPSILON, '0.0 '];
$tests['float(epsilon) <=> \'-0.0\''] = [1, null, PHP_FLOAT_EPSILON, '-0.0 '];
$tests['float(epsilon) <=> \'+0.0\''] = [1, null, PHP_FLOAT_EPSILON, '+0.0 '];
$tests['float(epsilon) <=> \'03\''] = [-1, null, PHP_FLOAT_EPSILON, '03'];
$tests['float(epsilon) <=> \'2abc\''] = [-1, null, PHP_FLOAT_EPSILON, '2abc'];
$tests['float(epsilon) <=> \'2.5abc\''] = [-1, null, PHP_FLOAT_EPSILON, '2.5abc'];
$tests['float(epsilon) <=> \'abc2abc\''] = [-1, null, PHP_FLOAT_EPSILON, 'abc2abc'];
$tests['float(epsilon) <=> \'abc2.5abc\''] = [-1, null, PHP_FLOAT_EPSILON, 'abc2.5abc'];
$tests['float(epsilon) <=> \'\\0\''] = [1, null, PHP_FLOAT_EPSILON, hex2bin('00')];
$tests['float(epsilon) <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [-1, null, PHP_FLOAT_EPSILON, hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['float(epsilon) <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [1, null, PHP_FLOAT_EPSILON, hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['float(epsilon) <=> 12.0000000000001'] = [-1, null, PHP_FLOAT_EPSILON, 12.0000000000001];
$tests['float(epsilon) <=> 12.000000000000002'] = [-1, null, PHP_FLOAT_EPSILON, 12.000000000000002];
$tests['float(epsilon) <=> pi'] = [-1, null, PHP_FLOAT_EPSILON, M_PI];
$tests['float(epsilon) <=> int(max)'] = [-1, null, PHP_FLOAT_EPSILON, PHP_INT_MAX];
$tests['float(epsilon) <=> int(min)'] = [1, null, PHP_FLOAT_EPSILON, PHP_INT_MIN];
$tests['float(epsilon) <=> float(epsilon)'] = [0, null, PHP_FLOAT_EPSILON, PHP_FLOAT_EPSILON];
$tests['float(epsilon) <=> float(min)'] = [1, null, PHP_FLOAT_EPSILON, PHP_FLOAT_MIN];
$tests['float(epsilon) <=> float(max)'] = [-1, null, PHP_FLOAT_EPSILON, PHP_FLOAT_MAX];
$tests['float(epsilon) <=> float(inf)'] = [-1, null, PHP_FLOAT_EPSILON, INF];
$tests['float(epsilon) <=> float(-inf)'] = [1, null, PHP_FLOAT_EPSILON, -INF];
$tests['float(epsilon) <=> float(nan)'] = [1, null, PHP_FLOAT_EPSILON, NAN];
$tests['float(epsilon) <=> $closure1'] = [-1, ['type' => 8,'message' => 'Object of class Closure could not be converted to float'], PHP_FLOAT_EPSILON, $closure1];
$tests['float(epsilon) <=> $closure2'] = [-1, ['type' => 8,'message' => 'Object of class Closure could not be converted to float'], PHP_FLOAT_EPSILON, $closure2];
$tests['float(epsilon) <=> $fh1'] = [-1, null, PHP_FLOAT_EPSILON, $fh1];
$tests['float(epsilon) <=> $fh2'] = [-1, null, PHP_FLOAT_EPSILON, $fh2];
$tests['float(epsilon) <=> $proc'] = [-1, null, PHP_FLOAT_EPSILON, $proc];
$tests['float(epsilon) <=> DateTime(2024-01-01T12:00:00Z)'] = [-1, ['type' => 8,'message' => 'Object of class DateTime could not be converted to float'], PHP_FLOAT_EPSILON, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['float(epsilon) <=> DateTime(2024-01-01T12:00:01Z)'] = [-1, ['type' => 8,'message' => 'Object of class DateTime could not be converted to float'], PHP_FLOAT_EPSILON, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['float(epsilon) <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [-1, ['type' => 8,'message' => 'Object of class DateTimeImmutable could not be converted to float'], PHP_FLOAT_EPSILON, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['float(epsilon) <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [-1, ['type' => 8,'message' => 'Object of class DateTimeImmutable could not be converted to float'], PHP_FLOAT_EPSILON, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['float(epsilon) <=> []'] = [-1, null, PHP_FLOAT_EPSILON, []];
$tests['float(epsilon) <=> [[]]'] = [-1, null, PHP_FLOAT_EPSILON, [[]]];
$tests['float(epsilon) <=> [1 => []]'] = [-1, null, PHP_FLOAT_EPSILON, [1 => []]];
$tests['float(epsilon) <=> [1 => null]'] = [-1, null, PHP_FLOAT_EPSILON, [1 => null]];
$tests['float(epsilon) <=> [0]'] = [-1, null, PHP_FLOAT_EPSILON, [0]];
$tests['float(epsilon) <=> [0.0]'] = [-1, null, PHP_FLOAT_EPSILON, [0.0]];
$tests['float(epsilon) <=> [null]'] = [-1, null, PHP_FLOAT_EPSILON, [null]];
$tests['float(epsilon) <=> [false]'] = [-1, null, PHP_FLOAT_EPSILON, [false]];
$tests['float(epsilon) <=> [true]'] = [-1, null, PHP_FLOAT_EPSILON, [true]];
$tests['float(epsilon) <=> [\'\']'] = [-1, null, PHP_FLOAT_EPSILON, ['']];
$tests['float(epsilon) <=> [a, b, c]'] = [-1, null, PHP_FLOAT_EPSILON, ['a','b','c']];
$tests['float(epsilon) <=> [$fh1]'] = [-1, null, PHP_FLOAT_EPSILON, [$fh1]];
$tests['float(epsilon) <=> [foo => bar]'] = [-1, null, PHP_FLOAT_EPSILON, ['foo' => 'bar']];
$tests['float(epsilon) <=> object[]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], PHP_FLOAT_EPSILON, (object) []];
$tests['float(epsilon) <=> object[[]]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], PHP_FLOAT_EPSILON, (object) [[]]];
$tests['float(epsilon) <=> object[1 => []]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], PHP_FLOAT_EPSILON, (object) [1 => []]];
$tests['float(epsilon) <=> object[1 => null]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], PHP_FLOAT_EPSILON, (object) [1 => null]];
$tests['float(epsilon) <=> object[0]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], PHP_FLOAT_EPSILON, (object) [0]];
$tests['float(epsilon) <=> object[0.0]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], PHP_FLOAT_EPSILON, (object) [0.0]];
$tests['float(epsilon) <=> object[null]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], PHP_FLOAT_EPSILON, (object) [null]];
$tests['float(epsilon) <=> object[false]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], PHP_FLOAT_EPSILON, (object) [false]];
$tests['float(epsilon) <=> object[true]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], PHP_FLOAT_EPSILON, (object) [true]];
$tests['float(epsilon) <=> object[\'\']'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], PHP_FLOAT_EPSILON, (object) ['']];
$tests['float(epsilon) <=> object[a, b, c]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], PHP_FLOAT_EPSILON, (object) ['a','b','c']];
$tests['float(epsilon) <=> object[$fh1]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], PHP_FLOAT_EPSILON, (object) [$fh1]];
$tests['float(epsilon) <=> object[foo => bar]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], PHP_FLOAT_EPSILON, (object) ['foo' => 'bar']];
$tests['float(min) <=> false'] = [1, null, PHP_FLOAT_MIN, false];
$tests['float(min) <=> true'] = [0, null, PHP_FLOAT_MIN, true];
$tests['float(min) <=> null'] = [1, null, PHP_FLOAT_MIN, null];
$tests['float(min) <=> 0'] = [1, null, PHP_FLOAT_MIN, 0];
$tests['float(min) <=> 1'] = [-1, null, PHP_FLOAT_MIN, 1];
$tests['float(min) <=> -1'] = [1, null, PHP_FLOAT_MIN, -1];
$tests['float(min) <=> 0.0'] = [1, null, PHP_FLOAT_MIN, 0.0];
$tests['float(min) <=> -1.0'] = [1, null, PHP_FLOAT_MIN, -1.0];
$tests['float(min) <=> 1.0'] = [-1, null, PHP_FLOAT_MIN, 1.0];
$tests['float(min) <=> \'\''] = [1, null, PHP_FLOAT_MIN, ''];
$tests['float(min) <=> \'0\''] = [1, null, PHP_FLOAT_MIN, '0'];
$tests['float(min) <=> \'-0\''] = [1, null, PHP_FLOAT_MIN, '-0'];
$tests['float(min) <=> \'+0\''] = [1, null, PHP_FLOAT_MIN, '+0'];
$tests['float(min) <=> \'0.0\''] = [1, null, PHP_FLOAT_MIN, '0.0'];
$tests['float(min) <=> \'-0.0\''] = [1, null, PHP_FLOAT_MIN, '-0.0'];
$tests['float(min) <=> \'+0.0\''] = [1, null, PHP_FLOAT_MIN, '+0.0'];
$tests['float(min) <=> \'1.0\''] = [-1, null, PHP_FLOAT_MIN, '1.0'];
$tests['float(min) <=> \'-1.0\''] = [1, null, PHP_FLOAT_MIN, '-1.0'];
$tests['float(min) <=> \'+1.0\''] = [-1, null, PHP_FLOAT_MIN, '+1.0'];
$tests['float(min) <=> \'-1\''] = [1, null, PHP_FLOAT_MIN, '-1'];
$tests['float(min) <=> \'+1\''] = [-1, null, PHP_FLOAT_MIN, '+1'];
$tests['float(min) <=> \'1\''] = [-1, null, PHP_FLOAT_MIN, '1'];
$tests['float(min) <=> \' 0\''] = [1, null, PHP_FLOAT_MIN, ' 0'];
$tests['float(min) <=> \' -0\''] = [1, null, PHP_FLOAT_MIN, ' -0'];
$tests['float(min) <=> \' +0\''] = [1, null, PHP_FLOAT_MIN, ' +0'];
$tests['float(min) <=> \' 0\' '] = [1, null, PHP_FLOAT_MIN, ' 0 '];
$tests['float(min) <=> \' -0\''] = [1, null, PHP_FLOAT_MIN, ' -0 '];
$tests['float(min) <=> \' +0\''] = [1, null, PHP_FLOAT_MIN, ' +0 '];
$tests['float(min) <=> \'0\' '] = [1, null, PHP_FLOAT_MIN, '0 '];
$tests['float(min) <=> \'-0\''] = [1, null, PHP_FLOAT_MIN, '-0 '];
$tests['float(min) <=> \'+0\''] = [1, null, PHP_FLOAT_MIN, '+0 '];
$tests['float(min) <=> \' 0.0\''] = [1, null, PHP_FLOAT_MIN, ' 0.0'];
$tests['float(min) <=> \' -0.0\''] = [1, null, PHP_FLOAT_MIN, ' -0.0'];
$tests['float(min) <=> \' +0.0\''] = [1, null, PHP_FLOAT_MIN, ' +0.0'];
$tests['float(min) <=> \' 0.0\' '] = [1, null, PHP_FLOAT_MIN, ' 0.0 '];
$tests['float(min) <=> \' -0.0\''] = [1, null, PHP_FLOAT_MIN, ' -0.0 '];
$tests['float(min) <=> \' +0.0\''] = [1, null, PHP_FLOAT_MIN, ' +0.0 '];
$tests['float(min) <=> \'0.0\' '] = [1, null, PHP_FLOAT_MIN, '0.0 '];
$tests['float(min) <=> \'-0.0\''] = [1, null, PHP_FLOAT_MIN, '-0.0 '];
$tests['float(min) <=> \'+0.0\''] = [1, null, PHP_FLOAT_MIN, '+0.0 '];
$tests['float(min) <=> \'03\''] = [-1, null, PHP_FLOAT_MIN, '03'];
$tests['float(min) <=> \'2abc\''] = [-1, null, PHP_FLOAT_MIN, '2abc'];
$tests['float(min) <=> \'2.5abc\''] = [-1, null, PHP_FLOAT_MIN, '2.5abc'];
$tests['float(min) <=> \'abc2abc\''] = [-1, null, PHP_FLOAT_MIN, 'abc2abc'];
$tests['float(min) <=> \'abc2.5abc\''] = [-1, null, PHP_FLOAT_MIN, 'abc2.5abc'];
$tests['float(min) <=> \'\\0\''] = [1, null, PHP_FLOAT_MIN, hex2bin('00')];
$tests['float(min) <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [-1, null, PHP_FLOAT_MIN, hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['float(min) <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [1, null, PHP_FLOAT_MIN, hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['float(min) <=> 12.0000000000001'] = [-1, null, PHP_FLOAT_MIN, 12.0000000000001];
$tests['float(min) <=> 12.000000000000002'] = [-1, null, PHP_FLOAT_MIN, 12.000000000000002];
$tests['float(min) <=> pi'] = [-1, null, PHP_FLOAT_MIN, M_PI];
$tests['float(min) <=> int(max)'] = [-1, null, PHP_FLOAT_MIN, PHP_INT_MAX];
$tests['float(min) <=> int(min)'] = [1, null, PHP_FLOAT_MIN, PHP_INT_MIN];
$tests['float(min) <=> float(epsilon)'] = [-1, null, PHP_FLOAT_MIN, PHP_FLOAT_EPSILON];
$tests['float(min) <=> float(min)'] = [0, null, PHP_FLOAT_MIN, PHP_FLOAT_MIN];
$tests['float(min) <=> float(max)'] = [-1, null, PHP_FLOAT_MIN, PHP_FLOAT_MAX];
$tests['float(min) <=> float(inf)'] = [-1, null, PHP_FLOAT_MIN, INF];
$tests['float(min) <=> float(-inf)'] = [1, null, PHP_FLOAT_MIN, -INF];
$tests['float(min) <=> float(nan)'] = [1, null, PHP_FLOAT_MIN, NAN];
$tests['float(min) <=> $closure1'] = [-1, ['type' => 8,'message' => 'Object of class Closure could not be converted to float'], PHP_FLOAT_MIN, $closure1];
$tests['float(min) <=> $closure2'] = [-1, ['type' => 8,'message' => 'Object of class Closure could not be converted to float'], PHP_FLOAT_MIN, $closure2];
$tests['float(min) <=> $fh1'] = [-1, null, PHP_FLOAT_MIN, $fh1];
$tests['float(min) <=> $fh2'] = [-1, null, PHP_FLOAT_MIN, $fh2];
$tests['float(min) <=> $proc'] = [-1, null, PHP_FLOAT_MIN, $proc];
$tests['float(min) <=> DateTime(2024-01-01T12:00:00Z)'] = [-1, ['type' => 8,'message' => 'Object of class DateTime could not be converted to float'], PHP_FLOAT_MIN, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['float(min) <=> DateTime(2024-01-01T12:00:01Z)'] = [-1, ['type' => 8,'message' => 'Object of class DateTime could not be converted to float'], PHP_FLOAT_MIN, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['float(min) <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [-1, ['type' => 8,'message' => 'Object of class DateTimeImmutable could not be converted to float'], PHP_FLOAT_MIN, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['float(min) <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [-1, ['type' => 8,'message' => 'Object of class DateTimeImmutable could not be converted to float'], PHP_FLOAT_MIN, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['float(min) <=> []'] = [-1, null, PHP_FLOAT_MIN, []];
$tests['float(min) <=> [[]]'] = [-1, null, PHP_FLOAT_MIN, [[]]];
$tests['float(min) <=> [1 => []]'] = [-1, null, PHP_FLOAT_MIN, [1 => []]];
$tests['float(min) <=> [1 => null]'] = [-1, null, PHP_FLOAT_MIN, [1 => null]];
$tests['float(min) <=> [0]'] = [-1, null, PHP_FLOAT_MIN, [0]];
$tests['float(min) <=> [0.0]'] = [-1, null, PHP_FLOAT_MIN, [0.0]];
$tests['float(min) <=> [null]'] = [-1, null, PHP_FLOAT_MIN, [null]];
$tests['float(min) <=> [false]'] = [-1, null, PHP_FLOAT_MIN, [false]];
$tests['float(min) <=> [true]'] = [-1, null, PHP_FLOAT_MIN, [true]];
$tests['float(min) <=> [\'\']'] = [-1, null, PHP_FLOAT_MIN, ['']];
$tests['float(min) <=> [a, b, c]'] = [-1, null, PHP_FLOAT_MIN, ['a','b','c']];
$tests['float(min) <=> [$fh1]'] = [-1, null, PHP_FLOAT_MIN, [$fh1]];
$tests['float(min) <=> [foo => bar]'] = [-1, null, PHP_FLOAT_MIN, ['foo' => 'bar']];
$tests['float(min) <=> object[]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], PHP_FLOAT_MIN, (object) []];
$tests['float(min) <=> object[[]]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], PHP_FLOAT_MIN, (object) [[]]];
$tests['float(min) <=> object[1 => []]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], PHP_FLOAT_MIN, (object) [1 => []]];
$tests['float(min) <=> object[1 => null]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], PHP_FLOAT_MIN, (object) [1 => null]];
$tests['float(min) <=> object[0]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], PHP_FLOAT_MIN, (object) [0]];
$tests['float(min) <=> object[0.0]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], PHP_FLOAT_MIN, (object) [0.0]];
$tests['float(min) <=> object[null]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], PHP_FLOAT_MIN, (object) [null]];
$tests['float(min) <=> object[false]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], PHP_FLOAT_MIN, (object) [false]];
$tests['float(min) <=> object[true]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], PHP_FLOAT_MIN, (object) [true]];
$tests['float(min) <=> object[\'\']'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], PHP_FLOAT_MIN, (object) ['']];
$tests['float(min) <=> object[a, b, c]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], PHP_FLOAT_MIN, (object) ['a','b','c']];
$tests['float(min) <=> object[$fh1]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], PHP_FLOAT_MIN, (object) [$fh1]];
$tests['float(min) <=> object[foo => bar]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], PHP_FLOAT_MIN, (object) ['foo' => 'bar']];
$tests['float(max) <=> false'] = [1, null, PHP_FLOAT_MAX, false];
$tests['float(max) <=> true'] = [0, null, PHP_FLOAT_MAX, true];
$tests['float(max) <=> null'] = [1, null, PHP_FLOAT_MAX, null];
$tests['float(max) <=> 0'] = [1, null, PHP_FLOAT_MAX, 0];
$tests['float(max) <=> 1'] = [1, null, PHP_FLOAT_MAX, 1];
$tests['float(max) <=> -1'] = [1, null, PHP_FLOAT_MAX, -1];
$tests['float(max) <=> 0.0'] = [1, null, PHP_FLOAT_MAX, 0.0];
$tests['float(max) <=> -1.0'] = [1, null, PHP_FLOAT_MAX, -1.0];
$tests['float(max) <=> 1.0'] = [1, null, PHP_FLOAT_MAX, 1.0];
$tests['float(max) <=> \'\''] = [1, null, PHP_FLOAT_MAX, ''];
$tests['float(max) <=> \'0\''] = [1, null, PHP_FLOAT_MAX, '0'];
$tests['float(max) <=> \'-0\''] = [1, null, PHP_FLOAT_MAX, '-0'];
$tests['float(max) <=> \'+0\''] = [1, null, PHP_FLOAT_MAX, '+0'];
$tests['float(max) <=> \'0.0\''] = [1, null, PHP_FLOAT_MAX, '0.0'];
$tests['float(max) <=> \'-0.0\''] = [1, null, PHP_FLOAT_MAX, '-0.0'];
$tests['float(max) <=> \'+0.0\''] = [1, null, PHP_FLOAT_MAX, '+0.0'];
$tests['float(max) <=> \'1.0\''] = [1, null, PHP_FLOAT_MAX, '1.0'];
$tests['float(max) <=> \'-1.0\''] = [1, null, PHP_FLOAT_MAX, '-1.0'];
$tests['float(max) <=> \'+1.0\''] = [1, null, PHP_FLOAT_MAX, '+1.0'];
$tests['float(max) <=> \'-1\''] = [1, null, PHP_FLOAT_MAX, '-1'];
$tests['float(max) <=> \'+1\''] = [1, null, PHP_FLOAT_MAX, '+1'];
$tests['float(max) <=> \'1\''] = [1, null, PHP_FLOAT_MAX, '1'];
$tests['float(max) <=> \' 0\''] = [1, null, PHP_FLOAT_MAX, ' 0'];
$tests['float(max) <=> \' -0\''] = [1, null, PHP_FLOAT_MAX, ' -0'];
$tests['float(max) <=> \' +0\''] = [1, null, PHP_FLOAT_MAX, ' +0'];
$tests['float(max) <=> \' 0\' '] = [1, null, PHP_FLOAT_MAX, ' 0 '];
$tests['float(max) <=> \' -0\''] = [1, null, PHP_FLOAT_MAX, ' -0 '];
$tests['float(max) <=> \' +0\''] = [1, null, PHP_FLOAT_MAX, ' +0 '];
$tests['float(max) <=> \'0\' '] = [1, null, PHP_FLOAT_MAX, '0 '];
$tests['float(max) <=> \'-0\''] = [1, null, PHP_FLOAT_MAX, '-0 '];
$tests['float(max) <=> \'+0\''] = [1, null, PHP_FLOAT_MAX, '+0 '];
$tests['float(max) <=> \' 0.0\''] = [1, null, PHP_FLOAT_MAX, ' 0.0'];
$tests['float(max) <=> \' -0.0\''] = [1, null, PHP_FLOAT_MAX, ' -0.0'];
$tests['float(max) <=> \' +0.0\''] = [1, null, PHP_FLOAT_MAX, ' +0.0'];
$tests['float(max) <=> \' 0.0\' '] = [1, null, PHP_FLOAT_MAX, ' 0.0 '];
$tests['float(max) <=> \' -0.0\''] = [1, null, PHP_FLOAT_MAX, ' -0.0 '];
$tests['float(max) <=> \' +0.0\''] = [1, null, PHP_FLOAT_MAX, ' +0.0 '];
$tests['float(max) <=> \'0.0\' '] = [1, null, PHP_FLOAT_MAX, '0.0 '];
$tests['float(max) <=> \'-0.0\''] = [1, null, PHP_FLOAT_MAX, '-0.0 '];
$tests['float(max) <=> \'+0.0\''] = [1, null, PHP_FLOAT_MAX, '+0.0 '];
$tests['float(max) <=> \'03\''] = [1, null, PHP_FLOAT_MAX, '03'];
$tests['float(max) <=> \'2abc\''] = [-1, null, PHP_FLOAT_MAX, '2abc'];
$tests['float(max) <=> \'2.5abc\''] = [-1, null, PHP_FLOAT_MAX, '2.5abc'];
$tests['float(max) <=> \'abc2abc\''] = [-1, null, PHP_FLOAT_MAX, 'abc2abc'];
$tests['float(max) <=> \'abc2.5abc\''] = [-1, null, PHP_FLOAT_MAX, 'abc2.5abc'];
$tests['float(max) <=> \'\\0\''] = [1, null, PHP_FLOAT_MAX, hex2bin('00')];
$tests['float(max) <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [1, null, PHP_FLOAT_MAX, hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['float(max) <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [1, null, PHP_FLOAT_MAX, hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['float(max) <=> 12.0000000000001'] = [1, null, PHP_FLOAT_MAX, 12.0000000000001];
$tests['float(max) <=> 12.000000000000002'] = [1, null, PHP_FLOAT_MAX, 12.000000000000002];
$tests['float(max) <=> pi'] = [1, null, PHP_FLOAT_MAX, M_PI];
$tests['float(max) <=> int(max)'] = [1, null, PHP_FLOAT_MAX, PHP_INT_MAX];
$tests['float(max) <=> int(min)'] = [1, null, PHP_FLOAT_MAX, PHP_INT_MIN];
$tests['float(max) <=> float(epsilon)'] = [1, null, PHP_FLOAT_MAX, PHP_FLOAT_EPSILON];
$tests['float(max) <=> float(min)'] = [1, null, PHP_FLOAT_MAX, PHP_FLOAT_MIN];
$tests['float(max) <=> float(max)'] = [0, null, PHP_FLOAT_MAX, PHP_FLOAT_MAX];
$tests['float(max) <=> float(inf)'] = [-1, null, PHP_FLOAT_MAX, INF];
$tests['float(max) <=> float(-inf)'] = [1, null, PHP_FLOAT_MAX, -INF];
$tests['float(max) <=> float(nan)'] = [1, null, PHP_FLOAT_MAX, NAN];
$tests['float(max) <=> $closure1'] = [1, ['type' => 8,'message' => 'Object of class Closure could not be converted to float'], PHP_FLOAT_MAX, $closure1];
$tests['float(max) <=> $closure2'] = [1, ['type' => 8,'message' => 'Object of class Closure could not be converted to float'], PHP_FLOAT_MAX, $closure2];
$tests['float(max) <=> $fh1'] = [1, null, PHP_FLOAT_MAX, $fh1];
$tests['float(max) <=> $fh2'] = [1, null, PHP_FLOAT_MAX, $fh2];
$tests['float(max) <=> $proc'] = [1, null, PHP_FLOAT_MAX, $proc];
$tests['float(max) <=> DateTime(2024-01-01T12:00:00Z)'] = [1, ['type' => 8,'message' => 'Object of class DateTime could not be converted to float'], PHP_FLOAT_MAX, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['float(max) <=> DateTime(2024-01-01T12:00:01Z)'] = [1, ['type' => 8,'message' => 'Object of class DateTime could not be converted to float'], PHP_FLOAT_MAX, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['float(max) <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [1, ['type' => 8,'message' => 'Object of class DateTimeImmutable could not be converted to float'], PHP_FLOAT_MAX, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['float(max) <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [1, ['type' => 8,'message' => 'Object of class DateTimeImmutable could not be converted to float'], PHP_FLOAT_MAX, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['float(max) <=> []'] = [-1, null, PHP_FLOAT_MAX, []];
$tests['float(max) <=> [[]]'] = [-1, null, PHP_FLOAT_MAX, [[]]];
$tests['float(max) <=> [1 => []]'] = [-1, null, PHP_FLOAT_MAX, [1 => []]];
$tests['float(max) <=> [1 => null]'] = [-1, null, PHP_FLOAT_MAX, [1 => null]];
$tests['float(max) <=> [0]'] = [-1, null, PHP_FLOAT_MAX, [0]];
$tests['float(max) <=> [0.0]'] = [-1, null, PHP_FLOAT_MAX, [0.0]];
$tests['float(max) <=> [null]'] = [-1, null, PHP_FLOAT_MAX, [null]];
$tests['float(max) <=> [false]'] = [-1, null, PHP_FLOAT_MAX, [false]];
$tests['float(max) <=> [true]'] = [-1, null, PHP_FLOAT_MAX, [true]];
$tests['float(max) <=> [\'\']'] = [-1, null, PHP_FLOAT_MAX, ['']];
$tests['float(max) <=> [a, b, c]'] = [-1, null, PHP_FLOAT_MAX, ['a','b','c']];
$tests['float(max) <=> [$fh1]'] = [-1, null, PHP_FLOAT_MAX, [$fh1]];
$tests['float(max) <=> [foo => bar]'] = [-1, null, PHP_FLOAT_MAX, ['foo' => 'bar']];
$tests['float(max) <=> object[]'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], PHP_FLOAT_MAX, (object) []];
$tests['float(max) <=> object[[]]'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], PHP_FLOAT_MAX, (object) [[]]];
$tests['float(max) <=> object[1 => []]'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], PHP_FLOAT_MAX, (object) [1 => []]];
$tests['float(max) <=> object[1 => null]'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], PHP_FLOAT_MAX, (object) [1 => null]];
$tests['float(max) <=> object[0]'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], PHP_FLOAT_MAX, (object) [0]];
$tests['float(max) <=> object[0.0]'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], PHP_FLOAT_MAX, (object) [0.0]];
$tests['float(max) <=> object[null]'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], PHP_FLOAT_MAX, (object) [null]];
$tests['float(max) <=> object[false]'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], PHP_FLOAT_MAX, (object) [false]];
$tests['float(max) <=> object[true]'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], PHP_FLOAT_MAX, (object) [true]];
$tests['float(max) <=> object[\'\']'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], PHP_FLOAT_MAX, (object) ['']];
$tests['float(max) <=> object[a, b, c]'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], PHP_FLOAT_MAX, (object) ['a','b','c']];
$tests['float(max) <=> object[$fh1]'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], PHP_FLOAT_MAX, (object) [$fh1]];
$tests['float(max) <=> object[foo => bar]'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], PHP_FLOAT_MAX, (object) ['foo' => 'bar']];
$tests['float(inf) <=> false'] = [1, null, INF, false];
$tests['float(inf) <=> true'] = [0, null, INF, true];
$tests['float(inf) <=> null'] = [1, null, INF, null];
$tests['float(inf) <=> 0'] = [1, null, INF, 0];
$tests['float(inf) <=> 1'] = [1, null, INF, 1];
$tests['float(inf) <=> -1'] = [1, null, INF, -1];
$tests['float(inf) <=> 0.0'] = [1, null, INF, 0.0];
$tests['float(inf) <=> -1.0'] = [1, null, INF, -1.0];
$tests['float(inf) <=> 1.0'] = [1, null, INF, 1.0];
$tests['float(inf) <=> \'\''] = [1, null, INF, ''];
$tests['float(inf) <=> \'0\''] = [1, null, INF, '0'];
$tests['float(inf) <=> \'-0\''] = [1, null, INF, '-0'];
$tests['float(inf) <=> \'+0\''] = [1, null, INF, '+0'];
$tests['float(inf) <=> \'0.0\''] = [1, null, INF, '0.0'];
$tests['float(inf) <=> \'-0.0\''] = [1, null, INF, '-0.0'];
$tests['float(inf) <=> \'+0.0\''] = [1, null, INF, '+0.0'];
$tests['float(inf) <=> \'1.0\''] = [1, null, INF, '1.0'];
$tests['float(inf) <=> \'-1.0\''] = [1, null, INF, '-1.0'];
$tests['float(inf) <=> \'+1.0\''] = [1, null, INF, '+1.0'];
$tests['float(inf) <=> \'-1\''] = [1, null, INF, '-1'];
$tests['float(inf) <=> \'+1\''] = [1, null, INF, '+1'];
$tests['float(inf) <=> \'1\''] = [1, null, INF, '1'];
$tests['float(inf) <=> \' 0\''] = [1, null, INF, ' 0'];
$tests['float(inf) <=> \' -0\''] = [1, null, INF, ' -0'];
$tests['float(inf) <=> \' +0\''] = [1, null, INF, ' +0'];
$tests['float(inf) <=> \' 0\' '] = [1, null, INF, ' 0 '];
$tests['float(inf) <=> \' -0\''] = [1, null, INF, ' -0 '];
$tests['float(inf) <=> \' +0\''] = [1, null, INF, ' +0 '];
$tests['float(inf) <=> \'0\' '] = [1, null, INF, '0 '];
$tests['float(inf) <=> \'-0\''] = [1, null, INF, '-0 '];
$tests['float(inf) <=> \'+0\''] = [1, null, INF, '+0 '];
$tests['float(inf) <=> \' 0.0\''] = [1, null, INF, ' 0.0'];
$tests['float(inf) <=> \' -0.0\''] = [1, null, INF, ' -0.0'];
$tests['float(inf) <=> \' +0.0\''] = [1, null, INF, ' +0.0'];
$tests['float(inf) <=> \' 0.0\' '] = [1, null, INF, ' 0.0 '];
$tests['float(inf) <=> \' -0.0\''] = [1, null, INF, ' -0.0 '];
$tests['float(inf) <=> \' +0.0\''] = [1, null, INF, ' +0.0 '];
$tests['float(inf) <=> \'0.0\' '] = [1, null, INF, '0.0 '];
$tests['float(inf) <=> \'-0.0\''] = [1, null, INF, '-0.0 '];
$tests['float(inf) <=> \'+0.0\''] = [1, null, INF, '+0.0 '];
$tests['float(inf) <=> \'03\''] = [1, null, INF, '03'];
$tests['float(inf) <=> \'2abc\''] = [1, null, INF, '2abc'];
$tests['float(inf) <=> \'2.5abc\''] = [1, null, INF, '2.5abc'];
$tests['float(inf) <=> \'abc2abc\''] = [-1, null, INF, 'abc2abc'];
$tests['float(inf) <=> \'abc2.5abc\''] = [-1, null, INF, 'abc2.5abc'];
$tests['float(inf) <=> \'\\0\''] = [1, null, INF, hex2bin('00')];
$tests['float(inf) <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [1, null, INF, hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['float(inf) <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [1, null, INF, hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['float(inf) <=> 12.0000000000001'] = [1, null, INF, 12.0000000000001];
$tests['float(inf) <=> 12.000000000000002'] = [1, null, INF, 12.000000000000002];
$tests['float(inf) <=> pi'] = [1, null, INF, M_PI];
$tests['float(inf) <=> int(max)'] = [1, null, INF, PHP_INT_MAX];
$tests['float(inf) <=> int(min)'] = [1, null, INF, PHP_INT_MIN];
$tests['float(inf) <=> float(epsilon)'] = [1, null, INF, PHP_FLOAT_EPSILON];
$tests['float(inf) <=> float(min)'] = [1, null, INF, PHP_FLOAT_MIN];
$tests['float(inf) <=> float(max)'] = [1, null, INF, PHP_FLOAT_MAX];
$tests['float(inf) <=> float(inf)'] = [0, null, INF, INF];
$tests['float(inf) <=> float(-inf)'] = [1, null, INF, -INF];
$tests['float(inf) <=> float(nan)'] = [1, null, INF, NAN];
$tests['float(inf) <=> $closure1'] = [1, ['type' => 8,'message' => 'Object of class Closure could not be converted to float'], INF, $closure1];
$tests['float(inf) <=> $closure2'] = [1, ['type' => 8,'message' => 'Object of class Closure could not be converted to float'], INF, $closure2];
$tests['float(inf) <=> $fh1'] = [1, null, INF, $fh1];
$tests['float(inf) <=> $fh2'] = [1, null, INF, $fh2];
$tests['float(inf) <=> $proc'] = [1, null, INF, $proc];
$tests['float(inf) <=> DateTime(2024-01-01T12:00:00Z)'] = [1, ['type' => 8,'message' => 'Object of class DateTime could not be converted to float'], INF, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['float(inf) <=> DateTime(2024-01-01T12:00:01Z)'] = [1, ['type' => 8,'message' => 'Object of class DateTime could not be converted to float'], INF, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['float(inf) <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [1, ['type' => 8,'message' => 'Object of class DateTimeImmutable could not be converted to float'], INF, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['float(inf) <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [1, ['type' => 8,'message' => 'Object of class DateTimeImmutable could not be converted to float'], INF, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['float(inf) <=> []'] = [-1, null, INF, []];
$tests['float(inf) <=> [[]]'] = [-1, null, INF, [[]]];
$tests['float(inf) <=> [1 => []]'] = [-1, null, INF, [1 => []]];
$tests['float(inf) <=> [1 => null]'] = [-1, null, INF, [1 => null]];
$tests['float(inf) <=> [0]'] = [-1, null, INF, [0]];
$tests['float(inf) <=> [0.0]'] = [-1, null, INF, [0.0]];
$tests['float(inf) <=> [null]'] = [-1, null, INF, [null]];
$tests['float(inf) <=> [false]'] = [-1, null, INF, [false]];
$tests['float(inf) <=> [true]'] = [-1, null, INF, [true]];
$tests['float(inf) <=> [\'\']'] = [-1, null, INF, ['']];
$tests['float(inf) <=> [a, b, c]'] = [-1, null, INF, ['a','b','c']];
$tests['float(inf) <=> [$fh1]'] = [-1, null, INF, [$fh1]];
$tests['float(inf) <=> [foo => bar]'] = [-1, null, INF, ['foo' => 'bar']];
$tests['float(inf) <=> object[]'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], INF, (object) []];
$tests['float(inf) <=> object[[]]'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], INF, (object) [[]]];
$tests['float(inf) <=> object[1 => []]'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], INF, (object) [1 => []]];
$tests['float(inf) <=> object[1 => null]'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], INF, (object) [1 => null]];
$tests['float(inf) <=> object[0]'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], INF, (object) [0]];
$tests['float(inf) <=> object[0.0]'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], INF, (object) [0.0]];
$tests['float(inf) <=> object[null]'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], INF, (object) [null]];
$tests['float(inf) <=> object[false]'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], INF, (object) [false]];
$tests['float(inf) <=> object[true]'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], INF, (object) [true]];
$tests['float(inf) <=> object[\'\']'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], INF, (object) ['']];
$tests['float(inf) <=> object[a, b, c]'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], INF, (object) ['a','b','c']];
$tests['float(inf) <=> object[$fh1]'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], INF, (object) [$fh1]];
$tests['float(inf) <=> object[foo => bar]'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], INF, (object) ['foo' => 'bar']];
$tests['float(-inf) <=> false'] = [1, null, -INF, false];
$tests['float(-inf) <=> true'] = [0, null, -INF, true];
$tests['float(-inf) <=> null'] = [1, null, -INF, null];
$tests['float(-inf) <=> 0'] = [-1, null, -INF, 0];
$tests['float(-inf) <=> 1'] = [-1, null, -INF, 1];
$tests['float(-inf) <=> -1'] = [-1, null, -INF, -1];
$tests['float(-inf) <=> 0.0'] = [-1, null, -INF, 0.0];
$tests['float(-inf) <=> -1.0'] = [-1, null, -INF, -1.0];
$tests['float(-inf) <=> 1.0'] = [-1, null, -INF, 1.0];
$tests['float(-inf) <=> \'\''] = [1, null, -INF, ''];
$tests['float(-inf) <=> \'0\''] = [-1, null, -INF, '0'];
$tests['float(-inf) <=> \'-0\''] = [-1, null, -INF, '-0'];
$tests['float(-inf) <=> \'+0\''] = [-1, null, -INF, '+0'];
$tests['float(-inf) <=> \'0.0\''] = [-1, null, -INF, '0.0'];
$tests['float(-inf) <=> \'-0.0\''] = [-1, null, -INF, '-0.0'];
$tests['float(-inf) <=> \'+0.0\''] = [-1, null, -INF, '+0.0'];
$tests['float(-inf) <=> \'1.0\''] = [-1, null, -INF, '1.0'];
$tests['float(-inf) <=> \'-1.0\''] = [-1, null, -INF, '-1.0'];
$tests['float(-inf) <=> \'+1.0\''] = [-1, null, -INF, '+1.0'];
$tests['float(-inf) <=> \'-1\''] = [-1, null, -INF, '-1'];
$tests['float(-inf) <=> \'+1\''] = [-1, null, -INF, '+1'];
$tests['float(-inf) <=> \'1\''] = [-1, null, -INF, '1'];
$tests['float(-inf) <=> \' 0\''] = [-1, null, -INF, ' 0'];
$tests['float(-inf) <=> \' -0\''] = [-1, null, -INF, ' -0'];
$tests['float(-inf) <=> \' +0\''] = [-1, null, -INF, ' +0'];
$tests['float(-inf) <=> \' 0\' '] = [-1, null, -INF, ' 0 '];
$tests['float(-inf) <=> \' -0\''] = [-1, null, -INF, ' -0 '];
$tests['float(-inf) <=> \' +0\''] = [-1, null, -INF, ' +0 '];
$tests['float(-inf) <=> \'0\' '] = [-1, null, -INF, '0 '];
$tests['float(-inf) <=> \'-0\''] = [-1, null, -INF, '-0 '];
$tests['float(-inf) <=> \'+0\''] = [-1, null, -INF, '+0 '];
$tests['float(-inf) <=> \' 0.0\''] = [-1, null, -INF, ' 0.0'];
$tests['float(-inf) <=> \' -0.0\''] = [-1, null, -INF, ' -0.0'];
$tests['float(-inf) <=> \' +0.0\''] = [-1, null, -INF, ' +0.0'];
$tests['float(-inf) <=> \' 0.0\' '] = [-1, null, -INF, ' 0.0 '];
$tests['float(-inf) <=> \' -0.0\''] = [-1, null, -INF, ' -0.0 '];
$tests['float(-inf) <=> \' +0.0\''] = [-1, null, -INF, ' +0.0 '];
$tests['float(-inf) <=> \'0.0\' '] = [-1, null, -INF, '0.0 '];
$tests['float(-inf) <=> \'-0.0\''] = [-1, null, -INF, '-0.0 '];
$tests['float(-inf) <=> \'+0.0\''] = [-1, null, -INF, '+0.0 '];
$tests['float(-inf) <=> \'03\''] = [-1, null, -INF, '03'];
$tests['float(-inf) <=> \'2abc\''] = [-1, null, -INF, '2abc'];
$tests['float(-inf) <=> \'2.5abc\''] = [-1, null, -INF, '2.5abc'];
$tests['float(-inf) <=> \'abc2abc\''] = [-1, null, -INF, 'abc2abc'];
$tests['float(-inf) <=> \'abc2.5abc\''] = [-1, null, -INF, 'abc2.5abc'];
$tests['float(-inf) <=> \'\\0\''] = [1, null, -INF, hex2bin('00')];
$tests['float(-inf) <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [-1, null, -INF, hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['float(-inf) <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [1, null, -INF, hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['float(-inf) <=> 12.0000000000001'] = [-1, null, -INF, 12.0000000000001];
$tests['float(-inf) <=> 12.000000000000002'] = [-1, null, -INF, 12.000000000000002];
$tests['float(-inf) <=> pi'] = [-1, null, -INF, M_PI];
$tests['float(-inf) <=> int(max)'] = [-1, null, -INF, PHP_INT_MAX];
$tests['float(-inf) <=> int(min)'] = [-1, null, -INF, PHP_INT_MIN];
$tests['float(-inf) <=> float(epsilon)'] = [-1, null, -INF, PHP_FLOAT_EPSILON];
$tests['float(-inf) <=> float(min)'] = [-1, null, -INF, PHP_FLOAT_MIN];
$tests['float(-inf) <=> float(max)'] = [-1, null, -INF, PHP_FLOAT_MAX];
$tests['float(-inf) <=> float(inf)'] = [-1, null, -INF, INF];
$tests['float(-inf) <=> float(-inf)'] = [0, null, -INF, -INF];
$tests['float(-inf) <=> float(nan)'] = [1, null, -INF, NAN];
$tests['float(-inf) <=> $closure1'] = [-1, ['type' => 8,'message' => 'Object of class Closure could not be converted to float'], -INF, $closure1];
$tests['float(-inf) <=> $closure2'] = [-1, ['type' => 8,'message' => 'Object of class Closure could not be converted to float'], -INF, $closure2];
$tests['float(-inf) <=> $fh1'] = [-1, null, -INF, $fh1];
$tests['float(-inf) <=> $fh2'] = [-1, null, -INF, $fh2];
$tests['float(-inf) <=> $proc'] = [-1, null, -INF, $proc];
$tests['float(-inf) <=> DateTime(2024-01-01T12:00:00Z)'] = [-1, ['type' => 8,'message' => 'Object of class DateTime could not be converted to float'], -INF, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['float(-inf) <=> DateTime(2024-01-01T12:00:01Z)'] = [-1, ['type' => 8,'message' => 'Object of class DateTime could not be converted to float'], -INF, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['float(-inf) <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [-1, ['type' => 8,'message' => 'Object of class DateTimeImmutable could not be converted to float'], -INF, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['float(-inf) <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [-1, ['type' => 8,'message' => 'Object of class DateTimeImmutable could not be converted to float'], -INF, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['float(-inf) <=> []'] = [-1, null, -INF, []];
$tests['float(-inf) <=> [[]]'] = [-1, null, -INF, [[]]];
$tests['float(-inf) <=> [1 => []]'] = [-1, null, -INF, [1 => []]];
$tests['float(-inf) <=> [1 => null]'] = [-1, null, -INF, [1 => null]];
$tests['float(-inf) <=> [0]'] = [-1, null, -INF, [0]];
$tests['float(-inf) <=> [0.0]'] = [-1, null, -INF, [0.0]];
$tests['float(-inf) <=> [null]'] = [-1, null, -INF, [null]];
$tests['float(-inf) <=> [false]'] = [-1, null, -INF, [false]];
$tests['float(-inf) <=> [true]'] = [-1, null, -INF, [true]];
$tests['float(-inf) <=> [\'\']'] = [-1, null, -INF, ['']];
$tests['float(-inf) <=> [a, b, c]'] = [-1, null, -INF, ['a','b','c']];
$tests['float(-inf) <=> [$fh1]'] = [-1, null, -INF, [$fh1]];
$tests['float(-inf) <=> [foo => bar]'] = [-1, null, -INF, ['foo' => 'bar']];
$tests['float(-inf) <=> object[]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], -INF, (object) []];
$tests['float(-inf) <=> object[[]]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], -INF, (object) [[]]];
$tests['float(-inf) <=> object[1 => []]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], -INF, (object) [1 => []]];
$tests['float(-inf) <=> object[1 => null]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], -INF, (object) [1 => null]];
$tests['float(-inf) <=> object[0]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], -INF, (object) [0]];
$tests['float(-inf) <=> object[0.0]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], -INF, (object) [0.0]];
$tests['float(-inf) <=> object[null]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], -INF, (object) [null]];
$tests['float(-inf) <=> object[false]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], -INF, (object) [false]];
$tests['float(-inf) <=> object[true]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], -INF, (object) [true]];
$tests['float(-inf) <=> object[\'\']'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], -INF, (object) ['']];
$tests['float(-inf) <=> object[a, b, c]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], -INF, (object) ['a','b','c']];
$tests['float(-inf) <=> object[$fh1]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], -INF, (object) [$fh1]];
$tests['float(-inf) <=> object[foo => bar]'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], -INF, (object) ['foo' => 'bar']];
$tests['float(nan) <=> false'] = [1, null, NAN, false];
$tests['float(nan) <=> true'] = [0, null, NAN, true];
$tests['float(nan) <=> null'] = [1, null, NAN, null];
$tests['float(nan) <=> 0'] = [1, null, NAN, 0];
$tests['float(nan) <=> 1'] = [1, null, NAN, 1];
$tests['float(nan) <=> -1'] = [1, null, NAN, -1];
$tests['float(nan) <=> 0.0'] = [1, null, NAN, 0.0];
$tests['float(nan) <=> -1.0'] = [1, null, NAN, -1.0];
$tests['float(nan) <=> 1.0'] = [1, null, NAN, 1.0];
$tests['float(nan) <=> \'\''] = [1, null, NAN, ''];
$tests['float(nan) <=> \'0\''] = [1, null, NAN, '0'];
$tests['float(nan) <=> \'-0\''] = [1, null, NAN, '-0'];
$tests['float(nan) <=> \'+0\''] = [1, null, NAN, '+0'];
$tests['float(nan) <=> \'0.0\''] = [1, null, NAN, '0.0'];
$tests['float(nan) <=> \'-0.0\''] = [1, null, NAN, '-0.0'];
$tests['float(nan) <=> \'+0.0\''] = [1, null, NAN, '+0.0'];
$tests['float(nan) <=> \'1.0\''] = [1, null, NAN, '1.0'];
$tests['float(nan) <=> \'-1.0\''] = [1, null, NAN, '-1.0'];
$tests['float(nan) <=> \'+1.0\''] = [1, null, NAN, '+1.0'];
$tests['float(nan) <=> \'-1\''] = [1, null, NAN, '-1'];
$tests['float(nan) <=> \'+1\''] = [1, null, NAN, '+1'];
$tests['float(nan) <=> \'1\''] = [1, null, NAN, '1'];
$tests['float(nan) <=> \' 0\''] = [1, null, NAN, ' 0'];
$tests['float(nan) <=> \' -0\''] = [1, null, NAN, ' -0'];
$tests['float(nan) <=> \' +0\''] = [1, null, NAN, ' +0'];
$tests['float(nan) <=> \' 0\' '] = [1, null, NAN, ' 0 '];
$tests['float(nan) <=> \' -0\''] = [1, null, NAN, ' -0 '];
$tests['float(nan) <=> \' +0\''] = [1, null, NAN, ' +0 '];
$tests['float(nan) <=> \'0\' '] = [1, null, NAN, '0 '];
$tests['float(nan) <=> \'-0\''] = [1, null, NAN, '-0 '];
$tests['float(nan) <=> \'+0\''] = [1, null, NAN, '+0 '];
$tests['float(nan) <=> \' 0.0\''] = [1, null, NAN, ' 0.0'];
$tests['float(nan) <=> \' -0.0\''] = [1, null, NAN, ' -0.0'];
$tests['float(nan) <=> \' +0.0\''] = [1, null, NAN, ' +0.0'];
$tests['float(nan) <=> \' 0.0\' '] = [1, null, NAN, ' 0.0 '];
$tests['float(nan) <=> \' -0.0\''] = [1, null, NAN, ' -0.0 '];
$tests['float(nan) <=> \' +0.0\''] = [1, null, NAN, ' +0.0 '];
$tests['float(nan) <=> \'0.0\' '] = [1, null, NAN, '0.0 '];
$tests['float(nan) <=> \'-0.0\''] = [1, null, NAN, '-0.0 '];
$tests['float(nan) <=> \'+0.0\''] = [1, null, NAN, '+0.0 '];
$tests['float(nan) <=> \'03\''] = [1, null, NAN, '03'];
$tests['float(nan) <=> \'2abc\''] = [1, null, NAN, '2abc'];
$tests['float(nan) <=> \'2.5abc\''] = [1, null, NAN, '2.5abc'];
$tests['float(nan) <=> \'abc2abc\''] = [1, null, NAN, 'abc2abc'];
$tests['float(nan) <=> \'abc2.5abc\''] = [1, null, NAN, 'abc2.5abc'];
$tests['float(nan) <=> \'\\0\''] = [1, null, NAN, hex2bin('00')];
$tests['float(nan) <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [1, null, NAN, hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['float(nan) <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [1, null, NAN, hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['float(nan) <=> 12.0000000000001'] = [1, null, NAN, 12.0000000000001];
$tests['float(nan) <=> 12.000000000000002'] = [1, null, NAN, 12.000000000000002];
$tests['float(nan) <=> pi'] = [1, null, NAN, M_PI];
$tests['float(nan) <=> int(max)'] = [1, null, NAN, PHP_INT_MAX];
$tests['float(nan) <=> int(min)'] = [1, null, NAN, PHP_INT_MIN];
$tests['float(nan) <=> float(epsilon)'] = [1, null, NAN, PHP_FLOAT_EPSILON];
$tests['float(nan) <=> float(min)'] = [1, null, NAN, PHP_FLOAT_MIN];
$tests['float(nan) <=> float(max)'] = [1, null, NAN, PHP_FLOAT_MAX];
$tests['float(nan) <=> float(inf)'] = [1, null, NAN, INF];
$tests['float(nan) <=> float(-inf)'] = [1, null, NAN, -INF];
$tests['float(nan) <=> float(nan)'] = [1, null, NAN, NAN];
$tests['float(nan) <=> $closure1'] = [1, ['type' => 8,'message' => 'Object of class Closure could not be converted to float'], NAN, $closure1];
$tests['float(nan) <=> $closure2'] = [1, ['type' => 8,'message' => 'Object of class Closure could not be converted to float'], NAN, $closure2];
$tests['float(nan) <=> $fh1'] = [1, null, NAN, $fh1];
$tests['float(nan) <=> $fh2'] = [1, null, NAN, $fh2];
$tests['float(nan) <=> $proc'] = [1, null, NAN, $proc];
$tests['float(nan) <=> DateTime(2024-01-01T12:00:00Z)'] = [1, ['type' => 8,'message' => 'Object of class DateTime could not be converted to float'], NAN, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['float(nan) <=> DateTime(2024-01-01T12:00:01Z)'] = [1, ['type' => 8,'message' => 'Object of class DateTime could not be converted to float'], NAN, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['float(nan) <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [1, ['type' => 8,'message' => 'Object of class DateTimeImmutable could not be converted to float'], NAN, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['float(nan) <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [1, ['type' => 8,'message' => 'Object of class DateTimeImmutable could not be converted to float'], NAN, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['float(nan) <=> []'] = [-1, null, NAN, []];
$tests['float(nan) <=> [[]]'] = [-1, null, NAN, [[]]];
$tests['float(nan) <=> [1 => []]'] = [-1, null, NAN, [1 => []]];
$tests['float(nan) <=> [1 => null]'] = [-1, null, NAN, [1 => null]];
$tests['float(nan) <=> [0]'] = [-1, null, NAN, [0]];
$tests['float(nan) <=> [0.0]'] = [-1, null, NAN, [0.0]];
$tests['float(nan) <=> [null]'] = [-1, null, NAN, [null]];
$tests['float(nan) <=> [false]'] = [-1, null, NAN, [false]];
$tests['float(nan) <=> [true]'] = [-1, null, NAN, [true]];
$tests['float(nan) <=> [\'\']'] = [-1, null, NAN, ['']];
$tests['float(nan) <=> [a, b, c]'] = [-1, null, NAN, ['a','b','c']];
$tests['float(nan) <=> [$fh1]'] = [-1, null, NAN, [$fh1]];
$tests['float(nan) <=> [foo => bar]'] = [-1, null, NAN, ['foo' => 'bar']];
$tests['float(nan) <=> object[]'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], NAN, (object) []];
$tests['float(nan) <=> object[[]]'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], NAN, (object) [[]]];
$tests['float(nan) <=> object[1 => []]'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], NAN, (object) [1 => []]];
$tests['float(nan) <=> object[1 => null]'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], NAN, (object) [1 => null]];
$tests['float(nan) <=> object[0]'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], NAN, (object) [0]];
$tests['float(nan) <=> object[0.0]'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], NAN, (object) [0.0]];
$tests['float(nan) <=> object[null]'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], NAN, (object) [null]];
$tests['float(nan) <=> object[false]'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], NAN, (object) [false]];
$tests['float(nan) <=> object[true]'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], NAN, (object) [true]];
$tests['float(nan) <=> object[\'\']'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], NAN, (object) ['']];
$tests['float(nan) <=> object[a, b, c]'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], NAN, (object) ['a','b','c']];
$tests['float(nan) <=> object[$fh1]'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], NAN, (object) [$fh1]];
$tests['float(nan) <=> object[foo => bar]'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], NAN, (object) ['foo' => 'bar']];
$tests['$closure1 <=> false'] = [1, null, $closure1, false];
$tests['$closure1 <=> true'] = [0, null, $closure1, true];
$tests['$closure1 <=> null'] = [1, null, $closure1, null];
$tests['$closure1 <=> 0'] = [1, ['type' => 8,'message' => 'Object of class Closure could not be converted to int'], $closure1, 0];
$tests['$closure1 <=> 1'] = [0, ['type' => 8,'message' => 'Object of class Closure could not be converted to int'], $closure1, 1];
$tests['$closure1 <=> -1'] = [1, ['type' => 8,'message' => 'Object of class Closure could not be converted to int'], $closure1, -1];
$tests['$closure1 <=> 0.0'] = [1, ['type' => 8,'message' => 'Object of class Closure could not be converted to float'], $closure1, 0.0];
$tests['$closure1 <=> -1.0'] = [1, ['type' => 8,'message' => 'Object of class Closure could not be converted to float'], $closure1, -1.0];
$tests['$closure1 <=> 1.0'] = [0, ['type' => 8,'message' => 'Object of class Closure could not be converted to float'], $closure1, 1.0];
$tests['$closure1 <=> \'\''] = [1, null, $closure1, ''];
$tests['$closure1 <=> \'0\''] = [1, null, $closure1, '0'];
$tests['$closure1 <=> \'-0\''] = [1, null, $closure1, '-0'];
$tests['$closure1 <=> \'+0\''] = [1, null, $closure1, '+0'];
$tests['$closure1 <=> \'0.0\''] = [1, null, $closure1, '0.0'];
$tests['$closure1 <=> \'-0.0\''] = [1, null, $closure1, '-0.0'];
$tests['$closure1 <=> \'+0.0\''] = [1, null, $closure1, '+0.0'];
$tests['$closure1 <=> \'1.0\''] = [1, null, $closure1, '1.0'];
$tests['$closure1 <=> \'-1.0\''] = [1, null, $closure1, '-1.0'];
$tests['$closure1 <=> \'+1.0\''] = [1, null, $closure1, '+1.0'];
$tests['$closure1 <=> \'-1\''] = [1, null, $closure1, '-1'];
$tests['$closure1 <=> \'+1\''] = [1, null, $closure1, '+1'];
$tests['$closure1 <=> \'1\''] = [1, null, $closure1, '1'];
$tests['$closure1 <=> \' 0\''] = [1, null, $closure1, ' 0'];
$tests['$closure1 <=> \' -0\''] = [1, null, $closure1, ' -0'];
$tests['$closure1 <=> \' +0\''] = [1, null, $closure1, ' +0'];
$tests['$closure1 <=> \' 0\' '] = [1, null, $closure1, ' 0 '];
$tests['$closure1 <=> \' -0\''] = [1, null, $closure1, ' -0 '];
$tests['$closure1 <=> \' +0\''] = [1, null, $closure1, ' +0 '];
$tests['$closure1 <=> \'0\' '] = [1, null, $closure1, '0 '];
$tests['$closure1 <=> \'-0\''] = [1, null, $closure1, '-0 '];
$tests['$closure1 <=> \'+0\''] = [1, null, $closure1, '+0 '];
$tests['$closure1 <=> \' 0.0\''] = [1, null, $closure1, ' 0.0'];
$tests['$closure1 <=> \' -0.0\''] = [1, null, $closure1, ' -0.0'];
$tests['$closure1 <=> \' +0.0\''] = [1, null, $closure1, ' +0.0'];
$tests['$closure1 <=> \' 0.0\' '] = [1, null, $closure1, ' 0.0 '];
$tests['$closure1 <=> \' -0.0\''] = [1, null, $closure1, ' -0.0 '];
$tests['$closure1 <=> \' +0.0\''] = [1, null, $closure1, ' +0.0 '];
$tests['$closure1 <=> \'0.0\' '] = [1, null, $closure1, '0.0 '];
$tests['$closure1 <=> \'-0.0\''] = [1, null, $closure1, '-0.0 '];
$tests['$closure1 <=> \'+0.0\''] = [1, null, $closure1, '+0.0 '];
$tests['$closure1 <=> \'03\''] = [1, null, $closure1, '03'];
$tests['$closure1 <=> \'2abc\''] = [1, null, $closure1, '2abc'];
$tests['$closure1 <=> \'2.5abc\''] = [1, null, $closure1, '2.5abc'];
$tests['$closure1 <=> \'abc2abc\''] = [1, null, $closure1, 'abc2abc'];
$tests['$closure1 <=> \'abc2.5abc\''] = [1, null, $closure1, 'abc2.5abc'];
$tests['$closure1 <=> \'\\0\''] = [1, null, $closure1, hex2bin('00')];
$tests['$closure1 <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [1, null, $closure1, hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['$closure1 <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [1, null, $closure1, hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['$closure1 <=> 12.0000000000001'] = [-1, ['type' => 8,'message' => 'Object of class Closure could not be converted to float'], $closure1, 12.0000000000001];
$tests['$closure1 <=> 12.000000000000002'] = [-1, ['type' => 8,'message' => 'Object of class Closure could not be converted to float'], $closure1, 12.000000000000002];
$tests['$closure1 <=> pi'] = [-1, ['type' => 8,'message' => 'Object of class Closure could not be converted to float'], $closure1, M_PI];
$tests['$closure1 <=> int(max)'] = [-1, ['type' => 8,'message' => 'Object of class Closure could not be converted to int'], $closure1, PHP_INT_MAX];
$tests['$closure1 <=> int(min)'] = [1, ['type' => 8,'message' => 'Object of class Closure could not be converted to int'], $closure1, PHP_INT_MIN];
$tests['$closure1 <=> float(epsilon)'] = [1, ['type' => 8,'message' => 'Object of class Closure could not be converted to float'], $closure1, PHP_FLOAT_EPSILON];
$tests['$closure1 <=> float(min)'] = [1, ['type' => 8,'message' => 'Object of class Closure could not be converted to float'], $closure1, PHP_FLOAT_MIN];
$tests['$closure1 <=> float(max)'] = [-1, ['type' => 8,'message' => 'Object of class Closure could not be converted to float'], $closure1, PHP_FLOAT_MAX];
$tests['$closure1 <=> float(inf)'] = [-1, ['type' => 8,'message' => 'Object of class Closure could not be converted to float'], $closure1, INF];
$tests['$closure1 <=> float(-inf)'] = [1, ['type' => 8,'message' => 'Object of class Closure could not be converted to float'], $closure1, -INF];
$tests['$closure1 <=> float(nan)'] = [1, ['type' => 8,'message' => 'Object of class Closure could not be converted to float'], $closure1, NAN];
$tests['$closure1 <=> $closure1'] = [0, null, $closure1, $closure1];
$tests['$closure1 <=> $closure2'] = [1, null, $closure1, $closure2];
$tests['$closure1 <=> $fh1'] = [1, null, $closure1, $fh1];
$tests['$closure1 <=> $fh2'] = [1, null, $closure1, $fh2];
$tests['$closure1 <=> $proc'] = [1, null, $closure1, $proc];
$tests['$closure1 <=> DateTime(2024-01-01T12:00:00Z)'] = [1, null, $closure1, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['$closure1 <=> DateTime(2024-01-01T12:00:01Z)'] = [1, null, $closure1, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['$closure1 <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [1, null, $closure1, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['$closure1 <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [1, null, $closure1, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['$closure1 <=> []'] = [1, null, $closure1, []];
$tests['$closure1 <=> [[]]'] = [1, null, $closure1, [[]]];
$tests['$closure1 <=> [1 => []]'] = [1, null, $closure1, [1 => []]];
$tests['$closure1 <=> [1 => null]'] = [1, null, $closure1, [1 => null]];
$tests['$closure1 <=> [0]'] = [1, null, $closure1, [0]];
$tests['$closure1 <=> [0.0]'] = [1, null, $closure1, [0.0]];
$tests['$closure1 <=> [null]'] = [1, null, $closure1, [null]];
$tests['$closure1 <=> [false]'] = [1, null, $closure1, [false]];
$tests['$closure1 <=> [true]'] = [1, null, $closure1, [true]];
$tests['$closure1 <=> [\'\']'] = [1, null, $closure1, ['']];
$tests['$closure1 <=> [a, b, c]'] = [1, null, $closure1, ['a','b','c']];
$tests['$closure1 <=> [$fh1]'] = [1, null, $closure1, [$fh1]];
$tests['$closure1 <=> [foo => bar]'] = [1, null, $closure1, ['foo' => 'bar']];
$tests['$closure1 <=> object[]'] = [1, null, $closure1, (object) []];
$tests['$closure1 <=> object[[]]'] = [1, null, $closure1, (object) [[]]];
$tests['$closure1 <=> object[1 => []]'] = [1, null, $closure1, (object) [1 => []]];
$tests['$closure1 <=> object[1 => null]'] = [1, null, $closure1, (object) [1 => null]];
$tests['$closure1 <=> object[0]'] = [1, null, $closure1, (object) [0]];
$tests['$closure1 <=> object[0.0]'] = [1, null, $closure1, (object) [0.0]];
$tests['$closure1 <=> object[null]'] = [1, null, $closure1, (object) [null]];
$tests['$closure1 <=> object[false]'] = [1, null, $closure1, (object) [false]];
$tests['$closure1 <=> object[true]'] = [1, null, $closure1, (object) [true]];
$tests['$closure1 <=> object[\'\']'] = [1, null, $closure1, (object) ['']];
$tests['$closure1 <=> object[a, b, c]'] = [1, null, $closure1, (object) ['a','b','c']];
$tests['$closure1 <=> object[$fh1]'] = [1, null, $closure1, (object) [$fh1]];
$tests['$closure1 <=> object[foo => bar]'] = [1, null, $closure1, (object) ['foo' => 'bar']];
$tests['$closure2 <=> false'] = [1, null, $closure2, false];
$tests['$closure2 <=> true'] = [0, null, $closure2, true];
$tests['$closure2 <=> null'] = [1, null, $closure2, null];
$tests['$closure2 <=> 0'] = [1, ['type' => 8,'message' => 'Object of class Closure could not be converted to int'], $closure2, 0];
$tests['$closure2 <=> 1'] = [0, ['type' => 8,'message' => 'Object of class Closure could not be converted to int'], $closure2, 1];
$tests['$closure2 <=> -1'] = [1, ['type' => 8,'message' => 'Object of class Closure could not be converted to int'], $closure2, -1];
$tests['$closure2 <=> 0.0'] = [1, ['type' => 8,'message' => 'Object of class Closure could not be converted to float'], $closure2, 0.0];
$tests['$closure2 <=> -1.0'] = [1, ['type' => 8,'message' => 'Object of class Closure could not be converted to float'], $closure2, -1.0];
$tests['$closure2 <=> 1.0'] = [0, ['type' => 8,'message' => 'Object of class Closure could not be converted to float'], $closure2, 1.0];
$tests['$closure2 <=> \'\''] = [1, null, $closure2, ''];
$tests['$closure2 <=> \'0\''] = [1, null, $closure2, '0'];
$tests['$closure2 <=> \'-0\''] = [1, null, $closure2, '-0'];
$tests['$closure2 <=> \'+0\''] = [1, null, $closure2, '+0'];
$tests['$closure2 <=> \'0.0\''] = [1, null, $closure2, '0.0'];
$tests['$closure2 <=> \'-0.0\''] = [1, null, $closure2, '-0.0'];
$tests['$closure2 <=> \'+0.0\''] = [1, null, $closure2, '+0.0'];
$tests['$closure2 <=> \'1.0\''] = [1, null, $closure2, '1.0'];
$tests['$closure2 <=> \'-1.0\''] = [1, null, $closure2, '-1.0'];
$tests['$closure2 <=> \'+1.0\''] = [1, null, $closure2, '+1.0'];
$tests['$closure2 <=> \'-1\''] = [1, null, $closure2, '-1'];
$tests['$closure2 <=> \'+1\''] = [1, null, $closure2, '+1'];
$tests['$closure2 <=> \'1\''] = [1, null, $closure2, '1'];
$tests['$closure2 <=> \' 0\''] = [1, null, $closure2, ' 0'];
$tests['$closure2 <=> \' -0\''] = [1, null, $closure2, ' -0'];
$tests['$closure2 <=> \' +0\''] = [1, null, $closure2, ' +0'];
$tests['$closure2 <=> \' 0\' '] = [1, null, $closure2, ' 0 '];
$tests['$closure2 <=> \' -0\''] = [1, null, $closure2, ' -0 '];
$tests['$closure2 <=> \' +0\''] = [1, null, $closure2, ' +0 '];
$tests['$closure2 <=> \'0\' '] = [1, null, $closure2, '0 '];
$tests['$closure2 <=> \'-0\''] = [1, null, $closure2, '-0 '];
$tests['$closure2 <=> \'+0\''] = [1, null, $closure2, '+0 '];
$tests['$closure2 <=> \' 0.0\''] = [1, null, $closure2, ' 0.0'];
$tests['$closure2 <=> \' -0.0\''] = [1, null, $closure2, ' -0.0'];
$tests['$closure2 <=> \' +0.0\''] = [1, null, $closure2, ' +0.0'];
$tests['$closure2 <=> \' 0.0\' '] = [1, null, $closure2, ' 0.0 '];
$tests['$closure2 <=> \' -0.0\''] = [1, null, $closure2, ' -0.0 '];
$tests['$closure2 <=> \' +0.0\''] = [1, null, $closure2, ' +0.0 '];
$tests['$closure2 <=> \'0.0\' '] = [1, null, $closure2, '0.0 '];
$tests['$closure2 <=> \'-0.0\''] = [1, null, $closure2, '-0.0 '];
$tests['$closure2 <=> \'+0.0\''] = [1, null, $closure2, '+0.0 '];
$tests['$closure2 <=> \'03\''] = [1, null, $closure2, '03'];
$tests['$closure2 <=> \'2abc\''] = [1, null, $closure2, '2abc'];
$tests['$closure2 <=> \'2.5abc\''] = [1, null, $closure2, '2.5abc'];
$tests['$closure2 <=> \'abc2abc\''] = [1, null, $closure2, 'abc2abc'];
$tests['$closure2 <=> \'abc2.5abc\''] = [1, null, $closure2, 'abc2.5abc'];
$tests['$closure2 <=> \'\\0\''] = [1, null, $closure2, hex2bin('00')];
$tests['$closure2 <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [1, null, $closure2, hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['$closure2 <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [1, null, $closure2, hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['$closure2 <=> 12.0000000000001'] = [-1, ['type' => 8,'message' => 'Object of class Closure could not be converted to float'], $closure2, 12.0000000000001];
$tests['$closure2 <=> 12.000000000000002'] = [-1, ['type' => 8,'message' => 'Object of class Closure could not be converted to float'], $closure2, 12.000000000000002];
$tests['$closure2 <=> pi'] = [-1, ['type' => 8,'message' => 'Object of class Closure could not be converted to float'], $closure2, M_PI];
$tests['$closure2 <=> int(max)'] = [-1, ['type' => 8,'message' => 'Object of class Closure could not be converted to int'], $closure2, PHP_INT_MAX];
$tests['$closure2 <=> int(min)'] = [1, ['type' => 8,'message' => 'Object of class Closure could not be converted to int'], $closure2, PHP_INT_MIN];
$tests['$closure2 <=> float(epsilon)'] = [1, ['type' => 8,'message' => 'Object of class Closure could not be converted to float'], $closure2, PHP_FLOAT_EPSILON];
$tests['$closure2 <=> float(min)'] = [1, ['type' => 8,'message' => 'Object of class Closure could not be converted to float'], $closure2, PHP_FLOAT_MIN];
$tests['$closure2 <=> float(max)'] = [-1, ['type' => 8,'message' => 'Object of class Closure could not be converted to float'], $closure2, PHP_FLOAT_MAX];
$tests['$closure2 <=> float(inf)'] = [-1, ['type' => 8,'message' => 'Object of class Closure could not be converted to float'], $closure2, INF];
$tests['$closure2 <=> float(-inf)'] = [1, ['type' => 8,'message' => 'Object of class Closure could not be converted to float'], $closure2, -INF];
$tests['$closure2 <=> float(nan)'] = [1, ['type' => 8,'message' => 'Object of class Closure could not be converted to float'], $closure2, NAN];
$tests['$closure2 <=> $closure1'] = [1, null, $closure2, $closure1];
$tests['$closure2 <=> $closure2'] = [0, null, $closure2, $closure2];
$tests['$closure2 <=> $fh1'] = [1, null, $closure2, $fh1];
$tests['$closure2 <=> $fh2'] = [1, null, $closure2, $fh2];
$tests['$closure2 <=> $proc'] = [1, null, $closure2, $proc];
$tests['$closure2 <=> DateTime(2024-01-01T12:00:00Z)'] = [1, null, $closure2, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['$closure2 <=> DateTime(2024-01-01T12:00:01Z)'] = [1, null, $closure2, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['$closure2 <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [1, null, $closure2, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['$closure2 <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [1, null, $closure2, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['$closure2 <=> []'] = [1, null, $closure2, []];
$tests['$closure2 <=> [[]]'] = [1, null, $closure2, [[]]];
$tests['$closure2 <=> [1 => []]'] = [1, null, $closure2, [1 => []]];
$tests['$closure2 <=> [1 => null]'] = [1, null, $closure2, [1 => null]];
$tests['$closure2 <=> [0]'] = [1, null, $closure2, [0]];
$tests['$closure2 <=> [0.0]'] = [1, null, $closure2, [0.0]];
$tests['$closure2 <=> [null]'] = [1, null, $closure2, [null]];
$tests['$closure2 <=> [false]'] = [1, null, $closure2, [false]];
$tests['$closure2 <=> [true]'] = [1, null, $closure2, [true]];
$tests['$closure2 <=> [\'\']'] = [1, null, $closure2, ['']];
$tests['$closure2 <=> [a, b, c]'] = [1, null, $closure2, ['a','b','c']];
$tests['$closure2 <=> [$fh1]'] = [1, null, $closure2, [$fh1]];
$tests['$closure2 <=> [foo => bar]'] = [1, null, $closure2, ['foo' => 'bar']];
$tests['$closure2 <=> object[]'] = [1, null, $closure2, (object) []];
$tests['$closure2 <=> object[[]]'] = [1, null, $closure2, (object) [[]]];
$tests['$closure2 <=> object[1 => []]'] = [1, null, $closure2, (object) [1 => []]];
$tests['$closure2 <=> object[1 => null]'] = [1, null, $closure2, (object) [1 => null]];
$tests['$closure2 <=> object[0]'] = [1, null, $closure2, (object) [0]];
$tests['$closure2 <=> object[0.0]'] = [1, null, $closure2, (object) [0.0]];
$tests['$closure2 <=> object[null]'] = [1, null, $closure2, (object) [null]];
$tests['$closure2 <=> object[false]'] = [1, null, $closure2, (object) [false]];
$tests['$closure2 <=> object[true]'] = [1, null, $closure2, (object) [true]];
$tests['$closure2 <=> object[\'\']'] = [1, null, $closure2, (object) ['']];
$tests['$closure2 <=> object[a, b, c]'] = [1, null, $closure2, (object) ['a','b','c']];
$tests['$closure2 <=> object[$fh1]'] = [1, null, $closure2, (object) [$fh1]];
$tests['$closure2 <=> object[foo => bar]'] = [1, null, $closure2, (object) ['foo' => 'bar']];
$tests['$fh1 <=> false'] = [1, null, $fh1, false];
$tests['$fh1 <=> true'] = [0, null, $fh1, true];
$tests['$fh1 <=> null'] = [1, null, $fh1, null];
$tests['$fh1 <=> 0'] = [1, null, $fh1, 0];
$tests['$fh1 <=> 1'] = [1, null, $fh1, 1];
$tests['$fh1 <=> -1'] = [1, null, $fh1, -1];
$tests['$fh1 <=> 0.0'] = [1, null, $fh1, 0.0];
$tests['$fh1 <=> -1.0'] = [1, null, $fh1, -1.0];
$tests['$fh1 <=> 1.0'] = [1, null, $fh1, 1.0];
$tests['$fh1 <=> \'\''] = [1, null, $fh1, ''];
$tests['$fh1 <=> \'0\''] = [1, null, $fh1, '0'];
$tests['$fh1 <=> \'-0\''] = [1, null, $fh1, '-0'];
$tests['$fh1 <=> \'+0\''] = [1, null, $fh1, '+0'];
$tests['$fh1 <=> \'0.0\''] = [1, null, $fh1, '0.0'];
$tests['$fh1 <=> \'-0.0\''] = [1, null, $fh1, '-0.0'];
$tests['$fh1 <=> \'+0.0\''] = [1, null, $fh1, '+0.0'];
$tests['$fh1 <=> \'1.0\''] = [1, null, $fh1, '1.0'];
$tests['$fh1 <=> \'-1.0\''] = [1, null, $fh1, '-1.0'];
$tests['$fh1 <=> \'+1.0\''] = [1, null, $fh1, '+1.0'];
$tests['$fh1 <=> \'-1\''] = [1, null, $fh1, '-1'];
$tests['$fh1 <=> \'+1\''] = [1, null, $fh1, '+1'];
$tests['$fh1 <=> \'1\''] = [1, null, $fh1, '1'];
$tests['$fh1 <=> \' 0\''] = [1, null, $fh1, ' 0'];
$tests['$fh1 <=> \' -0\''] = [1, null, $fh1, ' -0'];
$tests['$fh1 <=> \' +0\''] = [1, null, $fh1, ' +0'];
$tests['$fh1 <=> \' 0\' '] = [1, null, $fh1, ' 0 '];
$tests['$fh1 <=> \' -0\''] = [1, null, $fh1, ' -0 '];
$tests['$fh1 <=> \' +0\''] = [1, null, $fh1, ' +0 '];
$tests['$fh1 <=> \'0\' '] = [1, null, $fh1, '0 '];
$tests['$fh1 <=> \'-0\''] = [1, null, $fh1, '-0 '];
$tests['$fh1 <=> \'+0\''] = [1, null, $fh1, '+0 '];
$tests['$fh1 <=> \' 0.0\''] = [1, null, $fh1, ' 0.0'];
$tests['$fh1 <=> \' -0.0\''] = [1, null, $fh1, ' -0.0'];
$tests['$fh1 <=> \' +0.0\''] = [1, null, $fh1, ' +0.0'];
$tests['$fh1 <=> \' 0.0\' '] = [1, null, $fh1, ' 0.0 '];
$tests['$fh1 <=> \' -0.0\''] = [1, null, $fh1, ' -0.0 '];
$tests['$fh1 <=> \' +0.0\''] = [1, null, $fh1, ' +0.0 '];
$tests['$fh1 <=> \'0.0\' '] = [1, null, $fh1, '0.0 '];
$tests['$fh1 <=> \'-0.0\''] = [1, null, $fh1, '-0.0 '];
$tests['$fh1 <=> \'+0.0\''] = [1, null, $fh1, '+0.0 '];
$tests['$fh1 <=> \'03\''] = [1, null, $fh1, '03'];
$tests['$fh1 <=> \'2abc\''] = [1, null, $fh1, '2abc'];
$tests['$fh1 <=> \'2.5abc\''] = [1, null, $fh1, '2.5abc'];
$tests['$fh1 <=> \'abc2abc\''] = [1, null, $fh1, 'abc2abc'];
$tests['$fh1 <=> \'abc2.5abc\''] = [1, null, $fh1, 'abc2.5abc'];
$tests['$fh1 <=> \'\\0\''] = [1, null, $fh1, hex2bin('00')];
$tests['$fh1 <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [1, null, $fh1, hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['$fh1 <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [1, null, $fh1, hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['$fh1 <=> 12.0000000000001'] = [1, null, $fh1, 12.0000000000001];
$tests['$fh1 <=> 12.000000000000002'] = [1, null, $fh1, 12.000000000000002];
$tests['$fh1 <=> pi'] = [1, null, $fh1, M_PI];
$tests['$fh1 <=> int(max)'] = [-1, null, $fh1, PHP_INT_MAX];
$tests['$fh1 <=> int(min)'] = [1, null, $fh1, PHP_INT_MIN];
$tests['$fh1 <=> float(epsilon)'] = [1, null, $fh1, PHP_FLOAT_EPSILON];
$tests['$fh1 <=> float(min)'] = [1, null, $fh1, PHP_FLOAT_MIN];
$tests['$fh1 <=> float(max)'] = [-1, null, $fh1, PHP_FLOAT_MAX];
$tests['$fh1 <=> float(inf)'] = [-1, null, $fh1, INF];
$tests['$fh1 <=> float(-inf)'] = [1, null, $fh1, -INF];
$tests['$fh1 <=> float(nan)'] = [1, null, $fh1, NAN];
$tests['$fh1 <=> $closure1'] = [-1, null, $fh1, $closure1];
$tests['$fh1 <=> $closure2'] = [-1, null, $fh1, $closure2];
$tests['$fh1 <=> $fh1'] = [0, null, $fh1, $fh1];
$tests['$fh1 <=> $fh2'] = [-1, null, $fh1, $fh2];
$tests['$fh1 <=> $proc'] = [-1, null, $fh1, $proc];
$tests['$fh1 <=> DateTime(2024-01-01T12:00:00Z)'] = [-1, null, $fh1, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['$fh1 <=> DateTime(2024-01-01T12:00:01Z)'] = [-1, null, $fh1, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['$fh1 <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [-1, null, $fh1, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['$fh1 <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [-1, null, $fh1, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['$fh1 <=> []'] = [-1, null, $fh1, []];
$tests['$fh1 <=> [[]]'] = [-1, null, $fh1, [[]]];
$tests['$fh1 <=> [1 => []]'] = [-1, null, $fh1, [1 => []]];
$tests['$fh1 <=> [1 => null]'] = [-1, null, $fh1, [1 => null]];
$tests['$fh1 <=> [0]'] = [-1, null, $fh1, [0]];
$tests['$fh1 <=> [0.0]'] = [-1, null, $fh1, [0.0]];
$tests['$fh1 <=> [null]'] = [-1, null, $fh1, [null]];
$tests['$fh1 <=> [false]'] = [-1, null, $fh1, [false]];
$tests['$fh1 <=> [true]'] = [-1, null, $fh1, [true]];
$tests['$fh1 <=> [\'\']'] = [-1, null, $fh1, ['']];
$tests['$fh1 <=> [a, b, c]'] = [-1, null, $fh1, ['a','b','c']];
$tests['$fh1 <=> [$fh1]'] = [-1, null, $fh1, [$fh1]];
$tests['$fh1 <=> [foo => bar]'] = [-1, null, $fh1, ['foo' => 'bar']];
$tests['$fh1 <=> object[]'] = [-1, null, $fh1, (object) []];
$tests['$fh1 <=> object[[]]'] = [-1, null, $fh1, (object) [[]]];
$tests['$fh1 <=> object[1 => []]'] = [-1, null, $fh1, (object) [1 => []]];
$tests['$fh1 <=> object[1 => null]'] = [-1, null, $fh1, (object) [1 => null]];
$tests['$fh1 <=> object[0]'] = [-1, null, $fh1, (object) [0]];
$tests['$fh1 <=> object[0.0]'] = [-1, null, $fh1, (object) [0.0]];
$tests['$fh1 <=> object[null]'] = [-1, null, $fh1, (object) [null]];
$tests['$fh1 <=> object[false]'] = [-1, null, $fh1, (object) [false]];
$tests['$fh1 <=> object[true]'] = [-1, null, $fh1, (object) [true]];
$tests['$fh1 <=> object[\'\']'] = [-1, null, $fh1, (object) ['']];
$tests['$fh1 <=> object[a, b, c]'] = [-1, null, $fh1, (object) ['a','b','c']];
$tests['$fh1 <=> object[$fh1]'] = [-1, null, $fh1, (object) [$fh1]];
$tests['$fh1 <=> object[foo => bar]'] = [-1, null, $fh1, (object) ['foo' => 'bar']];
$tests['$fh2 <=> false'] = [1, null, $fh2, false];
$tests['$fh2 <=> true'] = [0, null, $fh2, true];
$tests['$fh2 <=> null'] = [1, null, $fh2, null];
$tests['$fh2 <=> 0'] = [1, null, $fh2, 0];
$tests['$fh2 <=> 1'] = [1, null, $fh2, 1];
$tests['$fh2 <=> -1'] = [1, null, $fh2, -1];
$tests['$fh2 <=> 0.0'] = [1, null, $fh2, 0.0];
$tests['$fh2 <=> -1.0'] = [1, null, $fh2, -1.0];
$tests['$fh2 <=> 1.0'] = [1, null, $fh2, 1.0];
$tests['$fh2 <=> \'\''] = [1, null, $fh2, ''];
$tests['$fh2 <=> \'0\''] = [1, null, $fh2, '0'];
$tests['$fh2 <=> \'-0\''] = [1, null, $fh2, '-0'];
$tests['$fh2 <=> \'+0\''] = [1, null, $fh2, '+0'];
$tests['$fh2 <=> \'0.0\''] = [1, null, $fh2, '0.0'];
$tests['$fh2 <=> \'-0.0\''] = [1, null, $fh2, '-0.0'];
$tests['$fh2 <=> \'+0.0\''] = [1, null, $fh2, '+0.0'];
$tests['$fh2 <=> \'1.0\''] = [1, null, $fh2, '1.0'];
$tests['$fh2 <=> \'-1.0\''] = [1, null, $fh2, '-1.0'];
$tests['$fh2 <=> \'+1.0\''] = [1, null, $fh2, '+1.0'];
$tests['$fh2 <=> \'-1\''] = [1, null, $fh2, '-1'];
$tests['$fh2 <=> \'+1\''] = [1, null, $fh2, '+1'];
$tests['$fh2 <=> \'1\''] = [1, null, $fh2, '1'];
$tests['$fh2 <=> \' 0\''] = [1, null, $fh2, ' 0'];
$tests['$fh2 <=> \' -0\''] = [1, null, $fh2, ' -0'];
$tests['$fh2 <=> \' +0\''] = [1, null, $fh2, ' +0'];
$tests['$fh2 <=> \' 0\' '] = [1, null, $fh2, ' 0 '];
$tests['$fh2 <=> \' -0\''] = [1, null, $fh2, ' -0 '];
$tests['$fh2 <=> \' +0\''] = [1, null, $fh2, ' +0 '];
$tests['$fh2 <=> \'0\' '] = [1, null, $fh2, '0 '];
$tests['$fh2 <=> \'-0\''] = [1, null, $fh2, '-0 '];
$tests['$fh2 <=> \'+0\''] = [1, null, $fh2, '+0 '];
$tests['$fh2 <=> \' 0.0\''] = [1, null, $fh2, ' 0.0'];
$tests['$fh2 <=> \' -0.0\''] = [1, null, $fh2, ' -0.0'];
$tests['$fh2 <=> \' +0.0\''] = [1, null, $fh2, ' +0.0'];
$tests['$fh2 <=> \' 0.0\' '] = [1, null, $fh2, ' 0.0 '];
$tests['$fh2 <=> \' -0.0\''] = [1, null, $fh2, ' -0.0 '];
$tests['$fh2 <=> \' +0.0\''] = [1, null, $fh2, ' +0.0 '];
$tests['$fh2 <=> \'0.0\' '] = [1, null, $fh2, '0.0 '];
$tests['$fh2 <=> \'-0.0\''] = [1, null, $fh2, '-0.0 '];
$tests['$fh2 <=> \'+0.0\''] = [1, null, $fh2, '+0.0 '];
$tests['$fh2 <=> \'03\''] = [1, null, $fh2, '03'];
$tests['$fh2 <=> \'2abc\''] = [1, null, $fh2, '2abc'];
$tests['$fh2 <=> \'2.5abc\''] = [1, null, $fh2, '2.5abc'];
$tests['$fh2 <=> \'abc2abc\''] = [1, null, $fh2, 'abc2abc'];
$tests['$fh2 <=> \'abc2.5abc\''] = [1, null, $fh2, 'abc2.5abc'];
$tests['$fh2 <=> \'\\0\''] = [1, null, $fh2, hex2bin('00')];
$tests['$fh2 <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [1, null, $fh2, hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['$fh2 <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [1, null, $fh2, hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['$fh2 <=> 12.0000000000001'] = [1, null, $fh2, 12.0000000000001];
$tests['$fh2 <=> 12.000000000000002'] = [1, null, $fh2, 12.000000000000002];
$tests['$fh2 <=> pi'] = [1, null, $fh2, M_PI];
$tests['$fh2 <=> int(max)'] = [-1, null, $fh2, PHP_INT_MAX];
$tests['$fh2 <=> int(min)'] = [1, null, $fh2, PHP_INT_MIN];
$tests['$fh2 <=> float(epsilon)'] = [1, null, $fh2, PHP_FLOAT_EPSILON];
$tests['$fh2 <=> float(min)'] = [1, null, $fh2, PHP_FLOAT_MIN];
$tests['$fh2 <=> float(max)'] = [-1, null, $fh2, PHP_FLOAT_MAX];
$tests['$fh2 <=> float(inf)'] = [-1, null, $fh2, INF];
$tests['$fh2 <=> float(-inf)'] = [1, null, $fh2, -INF];
$tests['$fh2 <=> float(nan)'] = [1, null, $fh2, NAN];
$tests['$fh2 <=> $closure1'] = [-1, null, $fh2, $closure1];
$tests['$fh2 <=> $closure2'] = [-1, null, $fh2, $closure2];
$tests['$fh2 <=> $fh1'] = [1, null, $fh2, $fh1];
$tests['$fh2 <=> $fh2'] = [0, null, $fh2, $fh2];
$tests['$fh2 <=> $proc'] = [-1, null, $fh2, $proc];
$tests['$fh2 <=> DateTime(2024-01-01T12:00:00Z)'] = [-1, null, $fh2, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['$fh2 <=> DateTime(2024-01-01T12:00:01Z)'] = [-1, null, $fh2, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['$fh2 <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [-1, null, $fh2, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['$fh2 <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [-1, null, $fh2, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['$fh2 <=> []'] = [-1, null, $fh2, []];
$tests['$fh2 <=> [[]]'] = [-1, null, $fh2, [[]]];
$tests['$fh2 <=> [1 => []]'] = [-1, null, $fh2, [1 => []]];
$tests['$fh2 <=> [1 => null]'] = [-1, null, $fh2, [1 => null]];
$tests['$fh2 <=> [0]'] = [-1, null, $fh2, [0]];
$tests['$fh2 <=> [0.0]'] = [-1, null, $fh2, [0.0]];
$tests['$fh2 <=> [null]'] = [-1, null, $fh2, [null]];
$tests['$fh2 <=> [false]'] = [-1, null, $fh2, [false]];
$tests['$fh2 <=> [true]'] = [-1, null, $fh2, [true]];
$tests['$fh2 <=> [\'\']'] = [-1, null, $fh2, ['']];
$tests['$fh2 <=> [a, b, c]'] = [-1, null, $fh2, ['a','b','c']];
$tests['$fh2 <=> [$fh1]'] = [-1, null, $fh2, [$fh1]];
$tests['$fh2 <=> [foo => bar]'] = [-1, null, $fh2, ['foo' => 'bar']];
$tests['$fh2 <=> object[]'] = [-1, null, $fh2, (object) []];
$tests['$fh2 <=> object[[]]'] = [-1, null, $fh2, (object) [[]]];
$tests['$fh2 <=> object[1 => []]'] = [-1, null, $fh2, (object) [1 => []]];
$tests['$fh2 <=> object[1 => null]'] = [-1, null, $fh2, (object) [1 => null]];
$tests['$fh2 <=> object[0]'] = [-1, null, $fh2, (object) [0]];
$tests['$fh2 <=> object[0.0]'] = [-1, null, $fh2, (object) [0.0]];
$tests['$fh2 <=> object[null]'] = [-1, null, $fh2, (object) [null]];
$tests['$fh2 <=> object[false]'] = [-1, null, $fh2, (object) [false]];
$tests['$fh2 <=> object[true]'] = [-1, null, $fh2, (object) [true]];
$tests['$fh2 <=> object[\'\']'] = [-1, null, $fh2, (object) ['']];
$tests['$fh2 <=> object[a, b, c]'] = [-1, null, $fh2, (object) ['a','b','c']];
$tests['$fh2 <=> object[$fh1]'] = [-1, null, $fh2, (object) [$fh1]];
$tests['$fh2 <=> object[foo => bar]'] = [-1, null, $fh2, (object) ['foo' => 'bar']];
$tests['$proc <=> false'] = [1, null, $proc, false];
$tests['$proc <=> true'] = [0, null, $proc, true];
$tests['$proc <=> null'] = [1, null, $proc, null];
$tests['$proc <=> 0'] = [1, null, $proc, 0];
$tests['$proc <=> 1'] = [1, null, $proc, 1];
$tests['$proc <=> -1'] = [1, null, $proc, -1];
$tests['$proc <=> 0.0'] = [1, null, $proc, 0.0];
$tests['$proc <=> -1.0'] = [1, null, $proc, -1.0];
$tests['$proc <=> 1.0'] = [1, null, $proc, 1.0];
$tests['$proc <=> \'\''] = [1, null, $proc, ''];
$tests['$proc <=> \'0\''] = [1, null, $proc, '0'];
$tests['$proc <=> \'-0\''] = [1, null, $proc, '-0'];
$tests['$proc <=> \'+0\''] = [1, null, $proc, '+0'];
$tests['$proc <=> \'0.0\''] = [1, null, $proc, '0.0'];
$tests['$proc <=> \'-0.0\''] = [1, null, $proc, '-0.0'];
$tests['$proc <=> \'+0.0\''] = [1, null, $proc, '+0.0'];
$tests['$proc <=> \'1.0\''] = [1, null, $proc, '1.0'];
$tests['$proc <=> \'-1.0\''] = [1, null, $proc, '-1.0'];
$tests['$proc <=> \'+1.0\''] = [1, null, $proc, '+1.0'];
$tests['$proc <=> \'-1\''] = [1, null, $proc, '-1'];
$tests['$proc <=> \'+1\''] = [1, null, $proc, '+1'];
$tests['$proc <=> \'1\''] = [1, null, $proc, '1'];
$tests['$proc <=> \' 0\''] = [1, null, $proc, ' 0'];
$tests['$proc <=> \' -0\''] = [1, null, $proc, ' -0'];
$tests['$proc <=> \' +0\''] = [1, null, $proc, ' +0'];
$tests['$proc <=> \' 0\' '] = [1, null, $proc, ' 0 '];
$tests['$proc <=> \' -0\''] = [1, null, $proc, ' -0 '];
$tests['$proc <=> \' +0\''] = [1, null, $proc, ' +0 '];
$tests['$proc <=> \'0\' '] = [1, null, $proc, '0 '];
$tests['$proc <=> \'-0\''] = [1, null, $proc, '-0 '];
$tests['$proc <=> \'+0\''] = [1, null, $proc, '+0 '];
$tests['$proc <=> \' 0.0\''] = [1, null, $proc, ' 0.0'];
$tests['$proc <=> \' -0.0\''] = [1, null, $proc, ' -0.0'];
$tests['$proc <=> \' +0.0\''] = [1, null, $proc, ' +0.0'];
$tests['$proc <=> \' 0.0\' '] = [1, null, $proc, ' 0.0 '];
$tests['$proc <=> \' -0.0\''] = [1, null, $proc, ' -0.0 '];
$tests['$proc <=> \' +0.0\''] = [1, null, $proc, ' +0.0 '];
$tests['$proc <=> \'0.0\' '] = [1, null, $proc, '0.0 '];
$tests['$proc <=> \'-0.0\''] = [1, null, $proc, '-0.0 '];
$tests['$proc <=> \'+0.0\''] = [1, null, $proc, '+0.0 '];
$tests['$proc <=> \'03\''] = [1, null, $proc, '03'];
$tests['$proc <=> \'2abc\''] = [1, null, $proc, '2abc'];
$tests['$proc <=> \'2.5abc\''] = [1, null, $proc, '2.5abc'];
$tests['$proc <=> \'abc2abc\''] = [1, null, $proc, 'abc2abc'];
$tests['$proc <=> \'abc2.5abc\''] = [1, null, $proc, 'abc2.5abc'];
$tests['$proc <=> \'\\0\''] = [1, null, $proc, hex2bin('00')];
$tests['$proc <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [1, null, $proc, hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['$proc <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [1, null, $proc, hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['$proc <=> 12.0000000000001'] = [1, null, $proc, 12.0000000000001];
$tests['$proc <=> 12.000000000000002'] = [1, null, $proc, 12.000000000000002];
$tests['$proc <=> pi'] = [1, null, $proc, M_PI];
$tests['$proc <=> int(max)'] = [-1, null, $proc, PHP_INT_MAX];
$tests['$proc <=> int(min)'] = [1, null, $proc, PHP_INT_MIN];
$tests['$proc <=> float(epsilon)'] = [1, null, $proc, PHP_FLOAT_EPSILON];
$tests['$proc <=> float(min)'] = [1, null, $proc, PHP_FLOAT_MIN];
$tests['$proc <=> float(max)'] = [-1, null, $proc, PHP_FLOAT_MAX];
$tests['$proc <=> float(inf)'] = [-1, null, $proc, INF];
$tests['$proc <=> float(-inf)'] = [1, null, $proc, -INF];
$tests['$proc <=> float(nan)'] = [1, null, $proc, NAN];
$tests['$proc <=> $closure1'] = [-1, null, $proc, $closure1];
$tests['$proc <=> $closure2'] = [-1, null, $proc, $closure2];
$tests['$proc <=> $fh1'] = [1, null, $proc, $fh1];
$tests['$proc <=> $fh2'] = [1, null, $proc, $fh2];
$tests['$proc <=> $proc'] = [0, null, $proc, $proc];
$tests['$proc <=> DateTime(2024-01-01T12:00:00Z)'] = [-1, null, $proc, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['$proc <=> DateTime(2024-01-01T12:00:01Z)'] = [-1, null, $proc, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['$proc <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [-1, null, $proc, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['$proc <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [-1, null, $proc, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['$proc <=> []'] = [-1, null, $proc, []];
$tests['$proc <=> [[]]'] = [-1, null, $proc, [[]]];
$tests['$proc <=> [1 => []]'] = [-1, null, $proc, [1 => []]];
$tests['$proc <=> [1 => null]'] = [-1, null, $proc, [1 => null]];
$tests['$proc <=> [0]'] = [-1, null, $proc, [0]];
$tests['$proc <=> [0.0]'] = [-1, null, $proc, [0.0]];
$tests['$proc <=> [null]'] = [-1, null, $proc, [null]];
$tests['$proc <=> [false]'] = [-1, null, $proc, [false]];
$tests['$proc <=> [true]'] = [-1, null, $proc, [true]];
$tests['$proc <=> [\'\']'] = [-1, null, $proc, ['']];
$tests['$proc <=> [a, b, c]'] = [-1, null, $proc, ['a','b','c']];
$tests['$proc <=> [$fh1]'] = [-1, null, $proc, [$fh1]];
$tests['$proc <=> [foo => bar]'] = [-1, null, $proc, ['foo' => 'bar']];
$tests['$proc <=> object[]'] = [-1, null, $proc, (object) []];
$tests['$proc <=> object[[]]'] = [-1, null, $proc, (object) [[]]];
$tests['$proc <=> object[1 => []]'] = [-1, null, $proc, (object) [1 => []]];
$tests['$proc <=> object[1 => null]'] = [-1, null, $proc, (object) [1 => null]];
$tests['$proc <=> object[0]'] = [-1, null, $proc, (object) [0]];
$tests['$proc <=> object[0.0]'] = [-1, null, $proc, (object) [0.0]];
$tests['$proc <=> object[null]'] = [-1, null, $proc, (object) [null]];
$tests['$proc <=> object[false]'] = [-1, null, $proc, (object) [false]];
$tests['$proc <=> object[true]'] = [-1, null, $proc, (object) [true]];
$tests['$proc <=> object[\'\']'] = [-1, null, $proc, (object) ['']];
$tests['$proc <=> object[a, b, c]'] = [-1, null, $proc, (object) ['a','b','c']];
$tests['$proc <=> object[$fh1]'] = [-1, null, $proc, (object) [$fh1]];
$tests['$proc <=> object[foo => bar]'] = [-1, null, $proc, (object) ['foo' => 'bar']];
$tests['DateTime(2024-01-01T12:00:00Z) <=> false'] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), false];
$tests['DateTime(2024-01-01T12:00:00Z) <=> true'] = [0, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), true];
$tests['DateTime(2024-01-01T12:00:00Z) <=> null'] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), null];
$tests['DateTime(2024-01-01T12:00:00Z) <=> 0'] = [1, ['type' => 8,'message' => 'Object of class DateTime could not be converted to int'], unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), 0];
$tests['DateTime(2024-01-01T12:00:00Z) <=> 1'] = [0, ['type' => 8,'message' => 'Object of class DateTime could not be converted to int'], unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), 1];
$tests['DateTime(2024-01-01T12:00:00Z) <=> -1'] = [1, ['type' => 8,'message' => 'Object of class DateTime could not be converted to int'], unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), -1];
$tests['DateTime(2024-01-01T12:00:00Z) <=> 0.0'] = [1, ['type' => 8,'message' => 'Object of class DateTime could not be converted to float'], unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), 0.0];
$tests['DateTime(2024-01-01T12:00:00Z) <=> -1.0'] = [1, ['type' => 8,'message' => 'Object of class DateTime could not be converted to float'], unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), -1.0];
$tests['DateTime(2024-01-01T12:00:00Z) <=> 1.0'] = [0, ['type' => 8,'message' => 'Object of class DateTime could not be converted to float'], unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), 1.0];
$tests['DateTime(2024-01-01T12:00:00Z) <=> \'\''] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), ''];
$tests['DateTime(2024-01-01T12:00:00Z) <=> \'0\''] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), '0'];
$tests['DateTime(2024-01-01T12:00:00Z) <=> \'-0\''] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), '-0'];
$tests['DateTime(2024-01-01T12:00:00Z) <=> \'+0\''] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), '+0'];
$tests['DateTime(2024-01-01T12:00:00Z) <=> \'0.0\''] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), '0.0'];
$tests['DateTime(2024-01-01T12:00:00Z) <=> \'-0.0\''] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), '-0.0'];
$tests['DateTime(2024-01-01T12:00:00Z) <=> \'+0.0\''] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), '+0.0'];
$tests['DateTime(2024-01-01T12:00:00Z) <=> \'1.0\''] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), '1.0'];
$tests['DateTime(2024-01-01T12:00:00Z) <=> \'-1.0\''] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), '-1.0'];
$tests['DateTime(2024-01-01T12:00:00Z) <=> \'+1.0\''] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), '+1.0'];
$tests['DateTime(2024-01-01T12:00:00Z) <=> \'-1\''] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), '-1'];
$tests['DateTime(2024-01-01T12:00:00Z) <=> \'+1\''] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), '+1'];
$tests['DateTime(2024-01-01T12:00:00Z) <=> \'1\''] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), '1'];
$tests['DateTime(2024-01-01T12:00:00Z) <=> \' 0\''] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), ' 0'];
$tests['DateTime(2024-01-01T12:00:00Z) <=> \' -0\''] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), ' -0'];
$tests['DateTime(2024-01-01T12:00:00Z) <=> \' +0\''] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), ' +0'];
$tests['DateTime(2024-01-01T12:00:00Z) <=> \' 0\' '] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), ' 0 '];
$tests['DateTime(2024-01-01T12:00:00Z) <=> \' -0\''] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), ' -0 '];
$tests['DateTime(2024-01-01T12:00:00Z) <=> \' +0\''] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), ' +0 '];
$tests['DateTime(2024-01-01T12:00:00Z) <=> \'0\' '] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), '0 '];
$tests['DateTime(2024-01-01T12:00:00Z) <=> \'-0\''] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), '-0 '];
$tests['DateTime(2024-01-01T12:00:00Z) <=> \'+0\''] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), '+0 '];
$tests['DateTime(2024-01-01T12:00:00Z) <=> \' 0.0\''] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), ' 0.0'];
$tests['DateTime(2024-01-01T12:00:00Z) <=> \' -0.0\''] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), ' -0.0'];
$tests['DateTime(2024-01-01T12:00:00Z) <=> \' +0.0\''] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), ' +0.0'];
$tests['DateTime(2024-01-01T12:00:00Z) <=> \' 0.0\' '] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), ' 0.0 '];
$tests['DateTime(2024-01-01T12:00:00Z) <=> \' -0.0\''] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), ' -0.0 '];
$tests['DateTime(2024-01-01T12:00:00Z) <=> \' +0.0\''] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), ' +0.0 '];
$tests['DateTime(2024-01-01T12:00:00Z) <=> \'0.0\' '] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), '0.0 '];
$tests['DateTime(2024-01-01T12:00:00Z) <=> \'-0.0\''] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), '-0.0 '];
$tests['DateTime(2024-01-01T12:00:00Z) <=> \'+0.0\''] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), '+0.0 '];
$tests['DateTime(2024-01-01T12:00:00Z) <=> \'03\''] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), '03'];
$tests['DateTime(2024-01-01T12:00:00Z) <=> \'2abc\''] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), '2abc'];
$tests['DateTime(2024-01-01T12:00:00Z) <=> \'2.5abc\''] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), '2.5abc'];
$tests['DateTime(2024-01-01T12:00:00Z) <=> \'abc2abc\''] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), 'abc2abc'];
$tests['DateTime(2024-01-01T12:00:00Z) <=> \'abc2.5abc\''] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), 'abc2.5abc'];
$tests['DateTime(2024-01-01T12:00:00Z) <=> \'\\0\''] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), hex2bin('00')];
$tests['DateTime(2024-01-01T12:00:00Z) <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['DateTime(2024-01-01T12:00:00Z) <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['DateTime(2024-01-01T12:00:00Z) <=> 12.0000000000001'] = [-1, ['type' => 8,'message' => 'Object of class DateTime could not be converted to float'], unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), 12.0000000000001];
$tests['DateTime(2024-01-01T12:00:00Z) <=> 12.000000000000002'] = [-1, ['type' => 8,'message' => 'Object of class DateTime could not be converted to float'], unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), 12.000000000000002];
$tests['DateTime(2024-01-01T12:00:00Z) <=> pi'] = [-1, ['type' => 8,'message' => 'Object of class DateTime could not be converted to float'], unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), M_PI];
$tests['DateTime(2024-01-01T12:00:00Z) <=> int(max)'] = [-1, ['type' => 8,'message' => 'Object of class DateTime could not be converted to int'], unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), PHP_INT_MAX];
$tests['DateTime(2024-01-01T12:00:00Z) <=> int(min)'] = [1, ['type' => 8,'message' => 'Object of class DateTime could not be converted to int'], unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), PHP_INT_MIN];
$tests['DateTime(2024-01-01T12:00:00Z) <=> float(epsilon)'] = [1, ['type' => 8,'message' => 'Object of class DateTime could not be converted to float'], unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), PHP_FLOAT_EPSILON];
$tests['DateTime(2024-01-01T12:00:00Z) <=> float(min)'] = [1, ['type' => 8,'message' => 'Object of class DateTime could not be converted to float'], unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), PHP_FLOAT_MIN];
$tests['DateTime(2024-01-01T12:00:00Z) <=> float(max)'] = [-1, ['type' => 8,'message' => 'Object of class DateTime could not be converted to float'], unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), PHP_FLOAT_MAX];
$tests['DateTime(2024-01-01T12:00:00Z) <=> float(inf)'] = [-1, ['type' => 8,'message' => 'Object of class DateTime could not be converted to float'], unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), INF];
$tests['DateTime(2024-01-01T12:00:00Z) <=> float(-inf)'] = [1, ['type' => 8,'message' => 'Object of class DateTime could not be converted to float'], unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), -INF];
$tests['DateTime(2024-01-01T12:00:00Z) <=> float(nan)'] = [1, ['type' => 8,'message' => 'Object of class DateTime could not be converted to float'], unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), NAN];
$tests['DateTime(2024-01-01T12:00:00Z) <=> $closure1'] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), $closure1];
$tests['DateTime(2024-01-01T12:00:00Z) <=> $closure2'] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), $closure2];
$tests['DateTime(2024-01-01T12:00:00Z) <=> $fh1'] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), $fh1];
$tests['DateTime(2024-01-01T12:00:00Z) <=> $fh2'] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), $fh2];
$tests['DateTime(2024-01-01T12:00:00Z) <=> $proc'] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), $proc];
$tests['DateTime(2024-01-01T12:00:00Z) <=> DateTime(2024-01-01T12:00:00Z)'] = [0, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['DateTime(2024-01-01T12:00:00Z) <=> DateTime(2024-01-01T12:00:01Z)'] = [-1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['DateTime(2024-01-01T12:00:00Z) <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [0, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['DateTime(2024-01-01T12:00:00Z) <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [-1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['DateTime(2024-01-01T12:00:00Z) <=> []'] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), []];
$tests['DateTime(2024-01-01T12:00:00Z) <=> [[]]'] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), [[]]];
$tests['DateTime(2024-01-01T12:00:00Z) <=> [1 => []]'] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), [1 => []]];
$tests['DateTime(2024-01-01T12:00:00Z) <=> [1 => null]'] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), [1 => null]];
$tests['DateTime(2024-01-01T12:00:00Z) <=> [0]'] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), [0]];
$tests['DateTime(2024-01-01T12:00:00Z) <=> [0.0]'] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), [0.0]];
$tests['DateTime(2024-01-01T12:00:00Z) <=> [null]'] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), [null]];
$tests['DateTime(2024-01-01T12:00:00Z) <=> [false]'] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), [false]];
$tests['DateTime(2024-01-01T12:00:00Z) <=> [true]'] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), [true]];
$tests['DateTime(2024-01-01T12:00:00Z) <=> [\'\']'] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), ['']];
$tests['DateTime(2024-01-01T12:00:00Z) <=> [a, b, c]'] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), ['a','b','c']];
$tests['DateTime(2024-01-01T12:00:00Z) <=> [$fh1]'] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), [$fh1]];
$tests['DateTime(2024-01-01T12:00:00Z) <=> [foo => bar]'] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), ['foo' => 'bar']];
$tests['DateTime(2024-01-01T12:00:00Z) <=> object[]'] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), (object) []];
$tests['DateTime(2024-01-01T12:00:00Z) <=> object[[]]'] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), (object) [[]]];
$tests['DateTime(2024-01-01T12:00:00Z) <=> object[1 => []]'] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), (object) [1 => []]];
$tests['DateTime(2024-01-01T12:00:00Z) <=> object[1 => null]'] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), (object) [1 => null]];
$tests['DateTime(2024-01-01T12:00:00Z) <=> object[0]'] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), (object) [0]];
$tests['DateTime(2024-01-01T12:00:00Z) <=> object[0.0]'] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), (object) [0.0]];
$tests['DateTime(2024-01-01T12:00:00Z) <=> object[null]'] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), (object) [null]];
$tests['DateTime(2024-01-01T12:00:00Z) <=> object[false]'] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), (object) [false]];
$tests['DateTime(2024-01-01T12:00:00Z) <=> object[true]'] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), (object) [true]];
$tests['DateTime(2024-01-01T12:00:00Z) <=> object[\'\']'] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), (object) ['']];
$tests['DateTime(2024-01-01T12:00:00Z) <=> object[a, b, c]'] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), (object) ['a','b','c']];
$tests['DateTime(2024-01-01T12:00:00Z) <=> object[$fh1]'] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), (object) [$fh1]];
$tests['DateTime(2024-01-01T12:00:00Z) <=> object[foo => bar]'] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), (object) ['foo' => 'bar']];
$tests['DateTime(2024-01-01T12:00:01Z) <=> false'] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), false];
$tests['DateTime(2024-01-01T12:00:01Z) <=> true'] = [0, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), true];
$tests['DateTime(2024-01-01T12:00:01Z) <=> null'] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), null];
$tests['DateTime(2024-01-01T12:00:01Z) <=> 0'] = [1, ['type' => 8,'message' => 'Object of class DateTime could not be converted to int'], unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), 0];
$tests['DateTime(2024-01-01T12:00:01Z) <=> 1'] = [0, ['type' => 8,'message' => 'Object of class DateTime could not be converted to int'], unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), 1];
$tests['DateTime(2024-01-01T12:00:01Z) <=> -1'] = [1, ['type' => 8,'message' => 'Object of class DateTime could not be converted to int'], unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), -1];
$tests['DateTime(2024-01-01T12:00:01Z) <=> 0.0'] = [1, ['type' => 8,'message' => 'Object of class DateTime could not be converted to float'], unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), 0.0];
$tests['DateTime(2024-01-01T12:00:01Z) <=> -1.0'] = [1, ['type' => 8,'message' => 'Object of class DateTime could not be converted to float'], unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), -1.0];
$tests['DateTime(2024-01-01T12:00:01Z) <=> 1.0'] = [0, ['type' => 8,'message' => 'Object of class DateTime could not be converted to float'], unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), 1.0];
$tests['DateTime(2024-01-01T12:00:01Z) <=> \'\''] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), ''];
$tests['DateTime(2024-01-01T12:00:01Z) <=> \'0\''] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), '0'];
$tests['DateTime(2024-01-01T12:00:01Z) <=> \'-0\''] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), '-0'];
$tests['DateTime(2024-01-01T12:00:01Z) <=> \'+0\''] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), '+0'];
$tests['DateTime(2024-01-01T12:00:01Z) <=> \'0.0\''] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), '0.0'];
$tests['DateTime(2024-01-01T12:00:01Z) <=> \'-0.0\''] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), '-0.0'];
$tests['DateTime(2024-01-01T12:00:01Z) <=> \'+0.0\''] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), '+0.0'];
$tests['DateTime(2024-01-01T12:00:01Z) <=> \'1.0\''] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), '1.0'];
$tests['DateTime(2024-01-01T12:00:01Z) <=> \'-1.0\''] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), '-1.0'];
$tests['DateTime(2024-01-01T12:00:01Z) <=> \'+1.0\''] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), '+1.0'];
$tests['DateTime(2024-01-01T12:00:01Z) <=> \'-1\''] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), '-1'];
$tests['DateTime(2024-01-01T12:00:01Z) <=> \'+1\''] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), '+1'];
$tests['DateTime(2024-01-01T12:00:01Z) <=> \'1\''] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), '1'];
$tests['DateTime(2024-01-01T12:00:01Z) <=> \' 0\''] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), ' 0'];
$tests['DateTime(2024-01-01T12:00:01Z) <=> \' -0\''] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), ' -0'];
$tests['DateTime(2024-01-01T12:00:01Z) <=> \' +0\''] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), ' +0'];
$tests['DateTime(2024-01-01T12:00:01Z) <=> \' 0\' '] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), ' 0 '];
$tests['DateTime(2024-01-01T12:00:01Z) <=> \' -0\''] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), ' -0 '];
$tests['DateTime(2024-01-01T12:00:01Z) <=> \' +0\''] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), ' +0 '];
$tests['DateTime(2024-01-01T12:00:01Z) <=> \'0\' '] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), '0 '];
$tests['DateTime(2024-01-01T12:00:01Z) <=> \'-0\''] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), '-0 '];
$tests['DateTime(2024-01-01T12:00:01Z) <=> \'+0\''] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), '+0 '];
$tests['DateTime(2024-01-01T12:00:01Z) <=> \' 0.0\''] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), ' 0.0'];
$tests['DateTime(2024-01-01T12:00:01Z) <=> \' -0.0\''] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), ' -0.0'];
$tests['DateTime(2024-01-01T12:00:01Z) <=> \' +0.0\''] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), ' +0.0'];
$tests['DateTime(2024-01-01T12:00:01Z) <=> \' 0.0\' '] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), ' 0.0 '];
$tests['DateTime(2024-01-01T12:00:01Z) <=> \' -0.0\''] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), ' -0.0 '];
$tests['DateTime(2024-01-01T12:00:01Z) <=> \' +0.0\''] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), ' +0.0 '];
$tests['DateTime(2024-01-01T12:00:01Z) <=> \'0.0\' '] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), '0.0 '];
$tests['DateTime(2024-01-01T12:00:01Z) <=> \'-0.0\''] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), '-0.0 '];
$tests['DateTime(2024-01-01T12:00:01Z) <=> \'+0.0\''] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), '+0.0 '];
$tests['DateTime(2024-01-01T12:00:01Z) <=> \'03\''] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), '03'];
$tests['DateTime(2024-01-01T12:00:01Z) <=> \'2abc\''] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), '2abc'];
$tests['DateTime(2024-01-01T12:00:01Z) <=> \'2.5abc\''] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), '2.5abc'];
$tests['DateTime(2024-01-01T12:00:01Z) <=> \'abc2abc\''] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), 'abc2abc'];
$tests['DateTime(2024-01-01T12:00:01Z) <=> \'abc2.5abc\''] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), 'abc2.5abc'];
$tests['DateTime(2024-01-01T12:00:01Z) <=> \'\\0\''] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), hex2bin('00')];
$tests['DateTime(2024-01-01T12:00:01Z) <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['DateTime(2024-01-01T12:00:01Z) <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['DateTime(2024-01-01T12:00:01Z) <=> 12.0000000000001'] = [-1, ['type' => 8,'message' => 'Object of class DateTime could not be converted to float'], unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), 12.0000000000001];
$tests['DateTime(2024-01-01T12:00:01Z) <=> 12.000000000000002'] = [-1, ['type' => 8,'message' => 'Object of class DateTime could not be converted to float'], unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), 12.000000000000002];
$tests['DateTime(2024-01-01T12:00:01Z) <=> pi'] = [-1, ['type' => 8,'message' => 'Object of class DateTime could not be converted to float'], unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), M_PI];
$tests['DateTime(2024-01-01T12:00:01Z) <=> int(max)'] = [-1, ['type' => 8,'message' => 'Object of class DateTime could not be converted to int'], unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), PHP_INT_MAX];
$tests['DateTime(2024-01-01T12:00:01Z) <=> int(min)'] = [1, ['type' => 8,'message' => 'Object of class DateTime could not be converted to int'], unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), PHP_INT_MIN];
$tests['DateTime(2024-01-01T12:00:01Z) <=> float(epsilon)'] = [1, ['type' => 8,'message' => 'Object of class DateTime could not be converted to float'], unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), PHP_FLOAT_EPSILON];
$tests['DateTime(2024-01-01T12:00:01Z) <=> float(min)'] = [1, ['type' => 8,'message' => 'Object of class DateTime could not be converted to float'], unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), PHP_FLOAT_MIN];
$tests['DateTime(2024-01-01T12:00:01Z) <=> float(max)'] = [-1, ['type' => 8,'message' => 'Object of class DateTime could not be converted to float'], unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), PHP_FLOAT_MAX];
$tests['DateTime(2024-01-01T12:00:01Z) <=> float(inf)'] = [-1, ['type' => 8,'message' => 'Object of class DateTime could not be converted to float'], unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), INF];
$tests['DateTime(2024-01-01T12:00:01Z) <=> float(-inf)'] = [1, ['type' => 8,'message' => 'Object of class DateTime could not be converted to float'], unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), -INF];
$tests['DateTime(2024-01-01T12:00:01Z) <=> float(nan)'] = [1, ['type' => 8,'message' => 'Object of class DateTime could not be converted to float'], unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), NAN];
$tests['DateTime(2024-01-01T12:00:01Z) <=> $closure1'] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), $closure1];
$tests['DateTime(2024-01-01T12:00:01Z) <=> $closure2'] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), $closure2];
$tests['DateTime(2024-01-01T12:00:01Z) <=> $fh1'] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), $fh1];
$tests['DateTime(2024-01-01T12:00:01Z) <=> $fh2'] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), $fh2];
$tests['DateTime(2024-01-01T12:00:01Z) <=> $proc'] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), $proc];
$tests['DateTime(2024-01-01T12:00:01Z) <=> DateTime(2024-01-01T12:00:00Z)'] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['DateTime(2024-01-01T12:00:01Z) <=> DateTime(2024-01-01T12:00:01Z)'] = [0, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['DateTime(2024-01-01T12:00:01Z) <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['DateTime(2024-01-01T12:00:01Z) <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [0, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['DateTime(2024-01-01T12:00:01Z) <=> []'] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), []];
$tests['DateTime(2024-01-01T12:00:01Z) <=> [[]]'] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), [[]]];
$tests['DateTime(2024-01-01T12:00:01Z) <=> [1 => []]'] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), [1 => []]];
$tests['DateTime(2024-01-01T12:00:01Z) <=> [1 => null]'] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), [1 => null]];
$tests['DateTime(2024-01-01T12:00:01Z) <=> [0]'] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), [0]];
$tests['DateTime(2024-01-01T12:00:01Z) <=> [0.0]'] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), [0.0]];
$tests['DateTime(2024-01-01T12:00:01Z) <=> [null]'] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), [null]];
$tests['DateTime(2024-01-01T12:00:01Z) <=> [false]'] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), [false]];
$tests['DateTime(2024-01-01T12:00:01Z) <=> [true]'] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), [true]];
$tests['DateTime(2024-01-01T12:00:01Z) <=> [\'\']'] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), ['']];
$tests['DateTime(2024-01-01T12:00:01Z) <=> [a, b, c]'] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), ['a','b','c']];
$tests['DateTime(2024-01-01T12:00:01Z) <=> [$fh1]'] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), [$fh1]];
$tests['DateTime(2024-01-01T12:00:01Z) <=> [foo => bar]'] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), ['foo' => 'bar']];
$tests['DateTime(2024-01-01T12:00:01Z) <=> object[]'] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), (object) []];
$tests['DateTime(2024-01-01T12:00:01Z) <=> object[[]]'] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), (object) [[]]];
$tests['DateTime(2024-01-01T12:00:01Z) <=> object[1 => []]'] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), (object) [1 => []]];
$tests['DateTime(2024-01-01T12:00:01Z) <=> object[1 => null]'] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), (object) [1 => null]];
$tests['DateTime(2024-01-01T12:00:01Z) <=> object[0]'] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), (object) [0]];
$tests['DateTime(2024-01-01T12:00:01Z) <=> object[0.0]'] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), (object) [0.0]];
$tests['DateTime(2024-01-01T12:00:01Z) <=> object[null]'] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), (object) [null]];
$tests['DateTime(2024-01-01T12:00:01Z) <=> object[false]'] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), (object) [false]];
$tests['DateTime(2024-01-01T12:00:01Z) <=> object[true]'] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), (object) [true]];
$tests['DateTime(2024-01-01T12:00:01Z) <=> object[\'\']'] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), (object) ['']];
$tests['DateTime(2024-01-01T12:00:01Z) <=> object[a, b, c]'] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), (object) ['a','b','c']];
$tests['DateTime(2024-01-01T12:00:01Z) <=> object[$fh1]'] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), (object) [$fh1]];
$tests['DateTime(2024-01-01T12:00:01Z) <=> object[foo => bar]'] = [1, null, unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), (object) ['foo' => 'bar']];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> false'] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), false];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> true'] = [0, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), true];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> null'] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), null];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> 0'] = [1, ['type' => 8,'message' => 'Object of class DateTimeImmutable could not be converted to int'], unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), 0];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> 1'] = [0, ['type' => 8,'message' => 'Object of class DateTimeImmutable could not be converted to int'], unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), 1];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> -1'] = [1, ['type' => 8,'message' => 'Object of class DateTimeImmutable could not be converted to int'], unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), -1];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> 0.0'] = [1, ['type' => 8,'message' => 'Object of class DateTimeImmutable could not be converted to float'], unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), 0.0];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> -1.0'] = [1, ['type' => 8,'message' => 'Object of class DateTimeImmutable could not be converted to float'], unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), -1.0];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> 1.0'] = [0, ['type' => 8,'message' => 'Object of class DateTimeImmutable could not be converted to float'], unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), 1.0];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> \'\''] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), ''];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> \'0\''] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), '0'];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> \'-0\''] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), '-0'];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> \'+0\''] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), '+0'];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> \'0.0\''] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), '0.0'];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> \'-0.0\''] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), '-0.0'];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> \'+0.0\''] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), '+0.0'];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> \'1.0\''] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), '1.0'];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> \'-1.0\''] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), '-1.0'];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> \'+1.0\''] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), '+1.0'];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> \'-1\''] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), '-1'];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> \'+1\''] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), '+1'];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> \'1\''] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), '1'];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> \' 0\''] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), ' 0'];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> \' -0\''] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), ' -0'];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> \' +0\''] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), ' +0'];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> \' 0\' '] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), ' 0 '];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> \' -0\''] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), ' -0 '];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> \' +0\''] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), ' +0 '];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> \'0\' '] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), '0 '];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> \'-0\''] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), '-0 '];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> \'+0\''] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), '+0 '];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> \' 0.0\''] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), ' 0.0'];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> \' -0.0\''] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), ' -0.0'];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> \' +0.0\''] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), ' +0.0'];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> \' 0.0\' '] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), ' 0.0 '];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> \' -0.0\''] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), ' -0.0 '];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> \' +0.0\''] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), ' +0.0 '];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> \'0.0\' '] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), '0.0 '];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> \'-0.0\''] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), '-0.0 '];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> \'+0.0\''] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), '+0.0 '];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> \'03\''] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), '03'];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> \'2abc\''] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), '2abc'];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> \'2.5abc\''] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), '2.5abc'];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> \'abc2abc\''] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), 'abc2abc'];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> \'abc2.5abc\''] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), 'abc2.5abc'];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> \'\\0\''] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), hex2bin('00')];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> 12.0000000000001'] = [-1, ['type' => 8,'message' => 'Object of class DateTimeImmutable could not be converted to float'], unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), 12.0000000000001];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> 12.000000000000002'] = [-1, ['type' => 8,'message' => 'Object of class DateTimeImmutable could not be converted to float'], unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), 12.000000000000002];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> pi'] = [-1, ['type' => 8,'message' => 'Object of class DateTimeImmutable could not be converted to float'], unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), M_PI];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> int(max)'] = [-1, ['type' => 8,'message' => 'Object of class DateTimeImmutable could not be converted to int'], unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), PHP_INT_MAX];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> int(min)'] = [1, ['type' => 8,'message' => 'Object of class DateTimeImmutable could not be converted to int'], unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), PHP_INT_MIN];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> float(epsilon)'] = [1, ['type' => 8,'message' => 'Object of class DateTimeImmutable could not be converted to float'], unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), PHP_FLOAT_EPSILON];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> float(min)'] = [1, ['type' => 8,'message' => 'Object of class DateTimeImmutable could not be converted to float'], unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), PHP_FLOAT_MIN];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> float(max)'] = [-1, ['type' => 8,'message' => 'Object of class DateTimeImmutable could not be converted to float'], unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), PHP_FLOAT_MAX];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> float(inf)'] = [-1, ['type' => 8,'message' => 'Object of class DateTimeImmutable could not be converted to float'], unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), INF];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> float(-inf)'] = [1, ['type' => 8,'message' => 'Object of class DateTimeImmutable could not be converted to float'], unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), -INF];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> float(nan)'] = [1, ['type' => 8,'message' => 'Object of class DateTimeImmutable could not be converted to float'], unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), NAN];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> $closure1'] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), $closure1];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> $closure2'] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), $closure2];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> $fh1'] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), $fh1];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> $fh2'] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), $fh2];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> $proc'] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), $proc];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> DateTime(2024-01-01T12:00:00Z)'] = [0, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> DateTime(2024-01-01T12:00:01Z)'] = [-1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [0, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [-1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> []'] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), []];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> [[]]'] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), [[]]];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> [1 => []]'] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), [1 => []]];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> [1 => null]'] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), [1 => null]];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> [0]'] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), [0]];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> [0.0]'] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), [0.0]];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> [null]'] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), [null]];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> [false]'] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), [false]];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> [true]'] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), [true]];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> [\'\']'] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), ['']];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> [a, b, c]'] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), ['a','b','c']];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> [$fh1]'] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), [$fh1]];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> [foo => bar]'] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), ['foo' => 'bar']];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> object[]'] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), (object) []];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> object[[]]'] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), (object) [[]]];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> object[1 => []]'] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), (object) [1 => []]];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> object[1 => null]'] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), (object) [1 => null]];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> object[0]'] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), (object) [0]];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> object[0.0]'] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), (object) [0.0]];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> object[null]'] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), (object) [null]];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> object[false]'] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), (object) [false]];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> object[true]'] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), (object) [true]];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> object[\'\']'] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), (object) ['']];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> object[a, b, c]'] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), (object) ['a','b','c']];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> object[$fh1]'] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), (object) [$fh1]];
$tests['DateTimeImmutable(2024-01-01T12:00:00Z) <=> object[foo => bar]'] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), (object) ['foo' => 'bar']];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> false'] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), false];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> true'] = [0, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), true];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> null'] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), null];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> 0'] = [1, ['type' => 8,'message' => 'Object of class DateTimeImmutable could not be converted to int'], unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), 0];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> 1'] = [0, ['type' => 8,'message' => 'Object of class DateTimeImmutable could not be converted to int'], unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), 1];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> -1'] = [1, ['type' => 8,'message' => 'Object of class DateTimeImmutable could not be converted to int'], unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), -1];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> 0.0'] = [1, ['type' => 8,'message' => 'Object of class DateTimeImmutable could not be converted to float'], unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), 0.0];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> -1.0'] = [1, ['type' => 8,'message' => 'Object of class DateTimeImmutable could not be converted to float'], unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), -1.0];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> 1.0'] = [0, ['type' => 8,'message' => 'Object of class DateTimeImmutable could not be converted to float'], unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), 1.0];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> \'\''] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), ''];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> \'0\''] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), '0'];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> \'-0\''] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), '-0'];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> \'+0\''] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), '+0'];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> \'0.0\''] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), '0.0'];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> \'-0.0\''] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), '-0.0'];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> \'+0.0\''] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), '+0.0'];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> \'1.0\''] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), '1.0'];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> \'-1.0\''] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), '-1.0'];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> \'+1.0\''] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), '+1.0'];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> \'-1\''] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), '-1'];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> \'+1\''] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), '+1'];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> \'1\''] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), '1'];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> \' 0\''] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), ' 0'];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> \' -0\''] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), ' -0'];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> \' +0\''] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), ' +0'];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> \' 0\' '] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), ' 0 '];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> \' -0\''] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), ' -0 '];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> \' +0\''] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), ' +0 '];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> \'0\' '] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), '0 '];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> \'-0\''] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), '-0 '];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> \'+0\''] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), '+0 '];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> \' 0.0\''] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), ' 0.0'];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> \' -0.0\''] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), ' -0.0'];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> \' +0.0\''] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), ' +0.0'];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> \' 0.0\' '] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), ' 0.0 '];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> \' -0.0\''] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), ' -0.0 '];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> \' +0.0\''] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), ' +0.0 '];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> \'0.0\' '] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), '0.0 '];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> \'-0.0\''] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), '-0.0 '];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> \'+0.0\''] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), '+0.0 '];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> \'03\''] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), '03'];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> \'2abc\''] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), '2abc'];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> \'2.5abc\''] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), '2.5abc'];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> \'abc2abc\''] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), 'abc2abc'];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> \'abc2.5abc\''] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), 'abc2.5abc'];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> \'\\0\''] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), hex2bin('00')];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> 12.0000000000001'] = [-1, ['type' => 8,'message' => 'Object of class DateTimeImmutable could not be converted to float'], unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), 12.0000000000001];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> 12.000000000000002'] = [-1, ['type' => 8,'message' => 'Object of class DateTimeImmutable could not be converted to float'], unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), 12.000000000000002];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> pi'] = [-1, ['type' => 8,'message' => 'Object of class DateTimeImmutable could not be converted to float'], unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), M_PI];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> int(max)'] = [-1, ['type' => 8,'message' => 'Object of class DateTimeImmutable could not be converted to int'], unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), PHP_INT_MAX];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> int(min)'] = [1, ['type' => 8,'message' => 'Object of class DateTimeImmutable could not be converted to int'], unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), PHP_INT_MIN];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> float(epsilon)'] = [1, ['type' => 8,'message' => 'Object of class DateTimeImmutable could not be converted to float'], unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), PHP_FLOAT_EPSILON];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> float(min)'] = [1, ['type' => 8,'message' => 'Object of class DateTimeImmutable could not be converted to float'], unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), PHP_FLOAT_MIN];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> float(max)'] = [-1, ['type' => 8,'message' => 'Object of class DateTimeImmutable could not be converted to float'], unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), PHP_FLOAT_MAX];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> float(inf)'] = [-1, ['type' => 8,'message' => 'Object of class DateTimeImmutable could not be converted to float'], unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), INF];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> float(-inf)'] = [1, ['type' => 8,'message' => 'Object of class DateTimeImmutable could not be converted to float'], unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), -INF];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> float(nan)'] = [1, ['type' => 8,'message' => 'Object of class DateTimeImmutable could not be converted to float'], unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), NAN];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> $closure1'] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), $closure1];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> $closure2'] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), $closure2];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> $fh1'] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), $fh1];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> $fh2'] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), $fh2];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> $proc'] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), $proc];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> DateTime(2024-01-01T12:00:00Z)'] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> DateTime(2024-01-01T12:00:01Z)'] = [0, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [0, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> []'] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), []];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> [[]]'] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), [[]]];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> [1 => []]'] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), [1 => []]];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> [1 => null]'] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), [1 => null]];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> [0]'] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), [0]];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> [0.0]'] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), [0.0]];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> [null]'] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), [null]];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> [false]'] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), [false]];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> [true]'] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), [true]];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> [\'\']'] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), ['']];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> [a, b, c]'] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), ['a','b','c']];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> [$fh1]'] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), [$fh1]];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> [foo => bar]'] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), ['foo' => 'bar']];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> object[]'] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), (object) []];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> object[[]]'] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), (object) [[]]];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> object[1 => []]'] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), (object) [1 => []]];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> object[1 => null]'] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), (object) [1 => null]];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> object[0]'] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), (object) [0]];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> object[0.0]'] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), (object) [0.0]];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> object[null]'] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), (object) [null]];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> object[false]'] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), (object) [false]];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> object[true]'] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), (object) [true]];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> object[\'\']'] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), (object) ['']];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> object[a, b, c]'] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), (object) ['a','b','c']];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> object[$fh1]'] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), (object) [$fh1]];
$tests['DateTimeImmutable(2024-01-01T12:00:01Z) <=> object[foo => bar]'] = [1, null, unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}'), (object) ['foo' => 'bar']];
$tests['[] <=> false'] = [0, null, [], false];
$tests['[] <=> true'] = [-1, null, [], true];
$tests['[] <=> null'] = [0, null, [], null];
$tests['[] <=> 0'] = [1, null, [], 0];
$tests['[] <=> 1'] = [1, null, [], 1];
$tests['[] <=> -1'] = [1, null, [], -1];
$tests['[] <=> 0.0'] = [1, null, [], 0.0];
$tests['[] <=> -1.0'] = [1, null, [], -1.0];
$tests['[] <=> 1.0'] = [1, null, [], 1.0];
$tests['[] <=> \'\''] = [1, null, [], ''];
$tests['[] <=> \'0\''] = [1, null, [], '0'];
$tests['[] <=> \'-0\''] = [1, null, [], '-0'];
$tests['[] <=> \'+0\''] = [1, null, [], '+0'];
$tests['[] <=> \'0.0\''] = [1, null, [], '0.0'];
$tests['[] <=> \'-0.0\''] = [1, null, [], '-0.0'];
$tests['[] <=> \'+0.0\''] = [1, null, [], '+0.0'];
$tests['[] <=> \'1.0\''] = [1, null, [], '1.0'];
$tests['[] <=> \'-1.0\''] = [1, null, [], '-1.0'];
$tests['[] <=> \'+1.0\''] = [1, null, [], '+1.0'];
$tests['[] <=> \'-1\''] = [1, null, [], '-1'];
$tests['[] <=> \'+1\''] = [1, null, [], '+1'];
$tests['[] <=> \'1\''] = [1, null, [], '1'];
$tests['[] <=> \' 0\''] = [1, null, [], ' 0'];
$tests['[] <=> \' -0\''] = [1, null, [], ' -0'];
$tests['[] <=> \' +0\''] = [1, null, [], ' +0'];
$tests['[] <=> \' 0\' '] = [1, null, [], ' 0 '];
$tests['[] <=> \' -0\''] = [1, null, [], ' -0 '];
$tests['[] <=> \' +0\''] = [1, null, [], ' +0 '];
$tests['[] <=> \'0\' '] = [1, null, [], '0 '];
$tests['[] <=> \'-0\''] = [1, null, [], '-0 '];
$tests['[] <=> \'+0\''] = [1, null, [], '+0 '];
$tests['[] <=> \' 0.0\''] = [1, null, [], ' 0.0'];
$tests['[] <=> \' -0.0\''] = [1, null, [], ' -0.0'];
$tests['[] <=> \' +0.0\''] = [1, null, [], ' +0.0'];
$tests['[] <=> \' 0.0\' '] = [1, null, [], ' 0.0 '];
$tests['[] <=> \' -0.0\''] = [1, null, [], ' -0.0 '];
$tests['[] <=> \' +0.0\''] = [1, null, [], ' +0.0 '];
$tests['[] <=> \'0.0\' '] = [1, null, [], '0.0 '];
$tests['[] <=> \'-0.0\''] = [1, null, [], '-0.0 '];
$tests['[] <=> \'+0.0\''] = [1, null, [], '+0.0 '];
$tests['[] <=> \'03\''] = [1, null, [], '03'];
$tests['[] <=> \'2abc\''] = [1, null, [], '2abc'];
$tests['[] <=> \'2.5abc\''] = [1, null, [], '2.5abc'];
$tests['[] <=> \'abc2abc\''] = [1, null, [], 'abc2abc'];
$tests['[] <=> \'abc2.5abc\''] = [1, null, [], 'abc2.5abc'];
$tests['[] <=> \'\\0\''] = [1, null, [], hex2bin('00')];
$tests['[] <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [1, null, [], hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['[] <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [1, null, [], hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['[] <=> 12.0000000000001'] = [1, null, [], 12.0000000000001];
$tests['[] <=> 12.000000000000002'] = [1, null, [], 12.000000000000002];
$tests['[] <=> pi'] = [1, null, [], M_PI];
$tests['[] <=> int(max)'] = [1, null, [], PHP_INT_MAX];
$tests['[] <=> int(min)'] = [1, null, [], PHP_INT_MIN];
$tests['[] <=> float(epsilon)'] = [1, null, [], PHP_FLOAT_EPSILON];
$tests['[] <=> float(min)'] = [1, null, [], PHP_FLOAT_MIN];
$tests['[] <=> float(max)'] = [1, null, [], PHP_FLOAT_MAX];
$tests['[] <=> float(inf)'] = [1, null, [], INF];
$tests['[] <=> float(-inf)'] = [1, null, [], -INF];
$tests['[] <=> float(nan)'] = [1, null, [], NAN];
$tests['[] <=> $closure1'] = [-1, null, [], $closure1];
$tests['[] <=> $closure2'] = [-1, null, [], $closure2];
$tests['[] <=> $fh1'] = [1, null, [], $fh1];
$tests['[] <=> $fh2'] = [1, null, [], $fh2];
$tests['[] <=> $proc'] = [1, null, [], $proc];
$tests['[] <=> DateTime(2024-01-01T12:00:00Z)'] = [-1, null, [], unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['[] <=> DateTime(2024-01-01T12:00:01Z)'] = [-1, null, [], unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['[] <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [-1, null, [], unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['[] <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [-1, null, [], unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['[] <=> []'] = [0, null, [], []];
$tests['[] <=> [[]]'] = [-1, null, [], [[]]];
$tests['[] <=> [1 => []]'] = [-1, null, [], [1 => []]];
$tests['[] <=> [1 => null]'] = [-1, null, [], [1 => null]];
$tests['[] <=> [0]'] = [-1, null, [], [0]];
$tests['[] <=> [0.0]'] = [-1, null, [], [0.0]];
$tests['[] <=> [null]'] = [-1, null, [], [null]];
$tests['[] <=> [false]'] = [-1, null, [], [false]];
$tests['[] <=> [true]'] = [-1, null, [], [true]];
$tests['[] <=> [\'\']'] = [-1, null, [], ['']];
$tests['[] <=> [a, b, c]'] = [-1, null, [], ['a','b','c']];
$tests['[] <=> [$fh1]'] = [-1, null, [], [$fh1]];
$tests['[] <=> [foo => bar]'] = [-1, null, [], ['foo' => 'bar']];
$tests['[] <=> object[]'] = [-1, null, [], (object) []];
$tests['[] <=> object[[]]'] = [-1, null, [], (object) [[]]];
$tests['[] <=> object[1 => []]'] = [-1, null, [], (object) [1 => []]];
$tests['[] <=> object[1 => null]'] = [-1, null, [], (object) [1 => null]];
$tests['[] <=> object[0]'] = [-1, null, [], (object) [0]];
$tests['[] <=> object[0.0]'] = [-1, null, [], (object) [0.0]];
$tests['[] <=> object[null]'] = [-1, null, [], (object) [null]];
$tests['[] <=> object[false]'] = [-1, null, [], (object) [false]];
$tests['[] <=> object[true]'] = [-1, null, [], (object) [true]];
$tests['[] <=> object[\'\']'] = [-1, null, [], (object) ['']];
$tests['[] <=> object[a, b, c]'] = [-1, null, [], (object) ['a','b','c']];
$tests['[] <=> object[$fh1]'] = [-1, null, [], (object) [$fh1]];
$tests['[] <=> object[foo => bar]'] = [-1, null, [], (object) ['foo' => 'bar']];
$tests['[[]] <=> false'] = [1, null, [[]], false];
$tests['[[]] <=> true'] = [0, null, [[]], true];
$tests['[[]] <=> null'] = [1, null, [[]], null];
$tests['[[]] <=> 0'] = [1, null, [[]], 0];
$tests['[[]] <=> 1'] = [1, null, [[]], 1];
$tests['[[]] <=> -1'] = [1, null, [[]], -1];
$tests['[[]] <=> 0.0'] = [1, null, [[]], 0.0];
$tests['[[]] <=> -1.0'] = [1, null, [[]], -1.0];
$tests['[[]] <=> 1.0'] = [1, null, [[]], 1.0];
$tests['[[]] <=> \'\''] = [1, null, [[]], ''];
$tests['[[]] <=> \'0\''] = [1, null, [[]], '0'];
$tests['[[]] <=> \'-0\''] = [1, null, [[]], '-0'];
$tests['[[]] <=> \'+0\''] = [1, null, [[]], '+0'];
$tests['[[]] <=> \'0.0\''] = [1, null, [[]], '0.0'];
$tests['[[]] <=> \'-0.0\''] = [1, null, [[]], '-0.0'];
$tests['[[]] <=> \'+0.0\''] = [1, null, [[]], '+0.0'];
$tests['[[]] <=> \'1.0\''] = [1, null, [[]], '1.0'];
$tests['[[]] <=> \'-1.0\''] = [1, null, [[]], '-1.0'];
$tests['[[]] <=> \'+1.0\''] = [1, null, [[]], '+1.0'];
$tests['[[]] <=> \'-1\''] = [1, null, [[]], '-1'];
$tests['[[]] <=> \'+1\''] = [1, null, [[]], '+1'];
$tests['[[]] <=> \'1\''] = [1, null, [[]], '1'];
$tests['[[]] <=> \' 0\''] = [1, null, [[]], ' 0'];
$tests['[[]] <=> \' -0\''] = [1, null, [[]], ' -0'];
$tests['[[]] <=> \' +0\''] = [1, null, [[]], ' +0'];
$tests['[[]] <=> \' 0\' '] = [1, null, [[]], ' 0 '];
$tests['[[]] <=> \' -0\''] = [1, null, [[]], ' -0 '];
$tests['[[]] <=> \' +0\''] = [1, null, [[]], ' +0 '];
$tests['[[]] <=> \'0\' '] = [1, null, [[]], '0 '];
$tests['[[]] <=> \'-0\''] = [1, null, [[]], '-0 '];
$tests['[[]] <=> \'+0\''] = [1, null, [[]], '+0 '];
$tests['[[]] <=> \' 0.0\''] = [1, null, [[]], ' 0.0'];
$tests['[[]] <=> \' -0.0\''] = [1, null, [[]], ' -0.0'];
$tests['[[]] <=> \' +0.0\''] = [1, null, [[]], ' +0.0'];
$tests['[[]] <=> \' 0.0\' '] = [1, null, [[]], ' 0.0 '];
$tests['[[]] <=> \' -0.0\''] = [1, null, [[]], ' -0.0 '];
$tests['[[]] <=> \' +0.0\''] = [1, null, [[]], ' +0.0 '];
$tests['[[]] <=> \'0.0\' '] = [1, null, [[]], '0.0 '];
$tests['[[]] <=> \'-0.0\''] = [1, null, [[]], '-0.0 '];
$tests['[[]] <=> \'+0.0\''] = [1, null, [[]], '+0.0 '];
$tests['[[]] <=> \'03\''] = [1, null, [[]], '03'];
$tests['[[]] <=> \'2abc\''] = [1, null, [[]], '2abc'];
$tests['[[]] <=> \'2.5abc\''] = [1, null, [[]], '2.5abc'];
$tests['[[]] <=> \'abc2abc\''] = [1, null, [[]], 'abc2abc'];
$tests['[[]] <=> \'abc2.5abc\''] = [1, null, [[]], 'abc2.5abc'];
$tests['[[]] <=> \'\\0\''] = [1, null, [[]], hex2bin('00')];
$tests['[[]] <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [1, null, [[]], hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['[[]] <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [1, null, [[]], hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['[[]] <=> 12.0000000000001'] = [1, null, [[]], 12.0000000000001];
$tests['[[]] <=> 12.000000000000002'] = [1, null, [[]], 12.000000000000002];
$tests['[[]] <=> pi'] = [1, null, [[]], M_PI];
$tests['[[]] <=> int(max)'] = [1, null, [[]], PHP_INT_MAX];
$tests['[[]] <=> int(min)'] = [1, null, [[]], PHP_INT_MIN];
$tests['[[]] <=> float(epsilon)'] = [1, null, [[]], PHP_FLOAT_EPSILON];
$tests['[[]] <=> float(min)'] = [1, null, [[]], PHP_FLOAT_MIN];
$tests['[[]] <=> float(max)'] = [1, null, [[]], PHP_FLOAT_MAX];
$tests['[[]] <=> float(inf)'] = [1, null, [[]], INF];
$tests['[[]] <=> float(-inf)'] = [1, null, [[]], -INF];
$tests['[[]] <=> float(nan)'] = [1, null, [[]], NAN];
$tests['[[]] <=> $closure1'] = [-1, null, [[]], $closure1];
$tests['[[]] <=> $closure2'] = [-1, null, [[]], $closure2];
$tests['[[]] <=> $fh1'] = [1, null, [[]], $fh1];
$tests['[[]] <=> $fh2'] = [1, null, [[]], $fh2];
$tests['[[]] <=> $proc'] = [1, null, [[]], $proc];
$tests['[[]] <=> DateTime(2024-01-01T12:00:00Z)'] = [-1, null, [[]], unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['[[]] <=> DateTime(2024-01-01T12:00:01Z)'] = [-1, null, [[]], unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['[[]] <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [-1, null, [[]], unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['[[]] <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [-1, null, [[]], unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['[[]] <=> []'] = [1, null, [[]], []];
$tests['[[]] <=> [[]]'] = [0, null, [[]], [[]]];
$tests['[[]] <=> [1 => []]'] = [1, null, [[]], [1 => []]];
$tests['[[]] <=> [1 => null]'] = [1, null, [[]], [1 => null]];
$tests['[[]] <=> [0]'] = [1, null, [[]], [0]];
$tests['[[]] <=> [0.0]'] = [1, null, [[]], [0.0]];
$tests['[[]] <=> [null]'] = [0, null, [[]], [null]];
$tests['[[]] <=> [false]'] = [0, null, [[]], [false]];
$tests['[[]] <=> [true]'] = [-1, null, [[]], [true]];
$tests['[[]] <=> [\'\']'] = [1, null, [[]], ['']];
$tests['[[]] <=> [a, b, c]'] = [-1, null, [[]], ['a','b','c']];
$tests['[[]] <=> [$fh1]'] = [-1, null, [[]], [$fh1]];
$tests['[[]] <=> [foo => bar]'] = [1, null, [[]], ['foo' => 'bar']];
$tests['[[]] <=> object[]'] = [-1, null, [[]], (object) []];
$tests['[[]] <=> object[[]]'] = [-1, null, [[]], (object) [[]]];
$tests['[[]] <=> object[1 => []]'] = [-1, null, [[]], (object) [1 => []]];
$tests['[[]] <=> object[1 => null]'] = [-1, null, [[]], (object) [1 => null]];
$tests['[[]] <=> object[0]'] = [-1, null, [[]], (object) [0]];
$tests['[[]] <=> object[0.0]'] = [-1, null, [[]], (object) [0.0]];
$tests['[[]] <=> object[null]'] = [-1, null, [[]], (object) [null]];
$tests['[[]] <=> object[false]'] = [-1, null, [[]], (object) [false]];
$tests['[[]] <=> object[true]'] = [-1, null, [[]], (object) [true]];
$tests['[[]] <=> object[\'\']'] = [-1, null, [[]], (object) ['']];
$tests['[[]] <=> object[a, b, c]'] = [-1, null, [[]], (object) ['a','b','c']];
$tests['[[]] <=> object[$fh1]'] = [-1, null, [[]], (object) [$fh1]];
$tests['[[]] <=> object[foo => bar]'] = [-1, null, [[]], (object) ['foo' => 'bar']];
$tests['[1 => []] <=> false'] = [1, null, [1 => []], false];
$tests['[1 => []] <=> true'] = [0, null, [1 => []], true];
$tests['[1 => []] <=> null'] = [1, null, [1 => []], null];
$tests['[1 => []] <=> 0'] = [1, null, [1 => []], 0];
$tests['[1 => []] <=> 1'] = [1, null, [1 => []], 1];
$tests['[1 => []] <=> -1'] = [1, null, [1 => []], -1];
$tests['[1 => []] <=> 0.0'] = [1, null, [1 => []], 0.0];
$tests['[1 => []] <=> -1.0'] = [1, null, [1 => []], -1.0];
$tests['[1 => []] <=> 1.0'] = [1, null, [1 => []], 1.0];
$tests['[1 => []] <=> \'\''] = [1, null, [1 => []], ''];
$tests['[1 => []] <=> \'0\''] = [1, null, [1 => []], '0'];
$tests['[1 => []] <=> \'-0\''] = [1, null, [1 => []], '-0'];
$tests['[1 => []] <=> \'+0\''] = [1, null, [1 => []], '+0'];
$tests['[1 => []] <=> \'0.0\''] = [1, null, [1 => []], '0.0'];
$tests['[1 => []] <=> \'-0.0\''] = [1, null, [1 => []], '-0.0'];
$tests['[1 => []] <=> \'+0.0\''] = [1, null, [1 => []], '+0.0'];
$tests['[1 => []] <=> \'1.0\''] = [1, null, [1 => []], '1.0'];
$tests['[1 => []] <=> \'-1.0\''] = [1, null, [1 => []], '-1.0'];
$tests['[1 => []] <=> \'+1.0\''] = [1, null, [1 => []], '+1.0'];
$tests['[1 => []] <=> \'-1\''] = [1, null, [1 => []], '-1'];
$tests['[1 => []] <=> \'+1\''] = [1, null, [1 => []], '+1'];
$tests['[1 => []] <=> \'1\''] = [1, null, [1 => []], '1'];
$tests['[1 => []] <=> \' 0\''] = [1, null, [1 => []], ' 0'];
$tests['[1 => []] <=> \' -0\''] = [1, null, [1 => []], ' -0'];
$tests['[1 => []] <=> \' +0\''] = [1, null, [1 => []], ' +0'];
$tests['[1 => []] <=> \' 0\' '] = [1, null, [1 => []], ' 0 '];
$tests['[1 => []] <=> \' -0\''] = [1, null, [1 => []], ' -0 '];
$tests['[1 => []] <=> \' +0\''] = [1, null, [1 => []], ' +0 '];
$tests['[1 => []] <=> \'0\' '] = [1, null, [1 => []], '0 '];
$tests['[1 => []] <=> \'-0\''] = [1, null, [1 => []], '-0 '];
$tests['[1 => []] <=> \'+0\''] = [1, null, [1 => []], '+0 '];
$tests['[1 => []] <=> \' 0.0\''] = [1, null, [1 => []], ' 0.0'];
$tests['[1 => []] <=> \' -0.0\''] = [1, null, [1 => []], ' -0.0'];
$tests['[1 => []] <=> \' +0.0\''] = [1, null, [1 => []], ' +0.0'];
$tests['[1 => []] <=> \' 0.0\' '] = [1, null, [1 => []], ' 0.0 '];
$tests['[1 => []] <=> \' -0.0\''] = [1, null, [1 => []], ' -0.0 '];
$tests['[1 => []] <=> \' +0.0\''] = [1, null, [1 => []], ' +0.0 '];
$tests['[1 => []] <=> \'0.0\' '] = [1, null, [1 => []], '0.0 '];
$tests['[1 => []] <=> \'-0.0\''] = [1, null, [1 => []], '-0.0 '];
$tests['[1 => []] <=> \'+0.0\''] = [1, null, [1 => []], '+0.0 '];
$tests['[1 => []] <=> \'03\''] = [1, null, [1 => []], '03'];
$tests['[1 => []] <=> \'2abc\''] = [1, null, [1 => []], '2abc'];
$tests['[1 => []] <=> \'2.5abc\''] = [1, null, [1 => []], '2.5abc'];
$tests['[1 => []] <=> \'abc2abc\''] = [1, null, [1 => []], 'abc2abc'];
$tests['[1 => []] <=> \'abc2.5abc\''] = [1, null, [1 => []], 'abc2.5abc'];
$tests['[1 => []] <=> \'\\0\''] = [1, null, [1 => []], hex2bin('00')];
$tests['[1 => []] <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [1, null, [1 => []], hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['[1 => []] <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [1, null, [1 => []], hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['[1 => []] <=> 12.0000000000001'] = [1, null, [1 => []], 12.0000000000001];
$tests['[1 => []] <=> 12.000000000000002'] = [1, null, [1 => []], 12.000000000000002];
$tests['[1 => []] <=> pi'] = [1, null, [1 => []], M_PI];
$tests['[1 => []] <=> int(max)'] = [1, null, [1 => []], PHP_INT_MAX];
$tests['[1 => []] <=> int(min)'] = [1, null, [1 => []], PHP_INT_MIN];
$tests['[1 => []] <=> float(epsilon)'] = [1, null, [1 => []], PHP_FLOAT_EPSILON];
$tests['[1 => []] <=> float(min)'] = [1, null, [1 => []], PHP_FLOAT_MIN];
$tests['[1 => []] <=> float(max)'] = [1, null, [1 => []], PHP_FLOAT_MAX];
$tests['[1 => []] <=> float(inf)'] = [1, null, [1 => []], INF];
$tests['[1 => []] <=> float(-inf)'] = [1, null, [1 => []], -INF];
$tests['[1 => []] <=> float(nan)'] = [1, null, [1 => []], NAN];
$tests['[1 => []] <=> $closure1'] = [-1, null, [1 => []], $closure1];
$tests['[1 => []] <=> $closure2'] = [-1, null, [1 => []], $closure2];
$tests['[1 => []] <=> $fh1'] = [1, null, [1 => []], $fh1];
$tests['[1 => []] <=> $fh2'] = [1, null, [1 => []], $fh2];
$tests['[1 => []] <=> $proc'] = [1, null, [1 => []], $proc];
$tests['[1 => []] <=> DateTime(2024-01-01T12:00:00Z)'] = [-1, null, [1 => []], unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['[1 => []] <=> DateTime(2024-01-01T12:00:01Z)'] = [-1, null, [1 => []], unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['[1 => []] <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [-1, null, [1 => []], unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['[1 => []] <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [-1, null, [1 => []], unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['[1 => []] <=> []'] = [1, null, [1 => []], []];
$tests['[1 => []] <=> [[]]'] = [1, null, [1 => []], [[]]];
$tests['[1 => []] <=> [1 => []]'] = [0, null, [1 => []], [1 => []]];
$tests['[1 => []] <=> [1 => null]'] = [0, null, [1 => []], [1 => null]];
$tests['[1 => []] <=> [0]'] = [1, null, [1 => []], [0]];
$tests['[1 => []] <=> [0.0]'] = [1, null, [1 => []], [0.0]];
$tests['[1 => []] <=> [null]'] = [1, null, [1 => []], [null]];
$tests['[1 => []] <=> [false]'] = [1, null, [1 => []], [false]];
$tests['[1 => []] <=> [true]'] = [1, null, [1 => []], [true]];
$tests['[1 => []] <=> [\'\']'] = [1, null, [1 => []], ['']];
$tests['[1 => []] <=> [a, b, c]'] = [-1, null, [1 => []], ['a','b','c']];
$tests['[1 => []] <=> [$fh1]'] = [1, null, [1 => []], [$fh1]];
$tests['[1 => []] <=> [foo => bar]'] = [1, null, [1 => []], ['foo' => 'bar']];
$tests['[1 => []] <=> object[]'] = [-1, null, [1 => []], (object) []];
$tests['[1 => []] <=> object[[]]'] = [-1, null, [1 => []], (object) [[]]];
$tests['[1 => []] <=> object[1 => []]'] = [-1, null, [1 => []], (object) [1 => []]];
$tests['[1 => []] <=> object[1 => null]'] = [-1, null, [1 => []], (object) [1 => null]];
$tests['[1 => []] <=> object[0]'] = [-1, null, [1 => []], (object) [0]];
$tests['[1 => []] <=> object[0.0]'] = [-1, null, [1 => []], (object) [0.0]];
$tests['[1 => []] <=> object[null]'] = [-1, null, [1 => []], (object) [null]];
$tests['[1 => []] <=> object[false]'] = [-1, null, [1 => []], (object) [false]];
$tests['[1 => []] <=> object[true]'] = [-1, null, [1 => []], (object) [true]];
$tests['[1 => []] <=> object[\'\']'] = [-1, null, [1 => []], (object) ['']];
$tests['[1 => []] <=> object[a, b, c]'] = [-1, null, [1 => []], (object) ['a','b','c']];
$tests['[1 => []] <=> object[$fh1]'] = [-1, null, [1 => []], (object) [$fh1]];
$tests['[1 => []] <=> object[foo => bar]'] = [-1, null, [1 => []], (object) ['foo' => 'bar']];
$tests['[1 => null] <=> false'] = [1, null, [1 => null], false];
$tests['[1 => null] <=> true'] = [0, null, [1 => null], true];
$tests['[1 => null] <=> null'] = [1, null, [1 => null], null];
$tests['[1 => null] <=> 0'] = [1, null, [1 => null], 0];
$tests['[1 => null] <=> 1'] = [1, null, [1 => null], 1];
$tests['[1 => null] <=> -1'] = [1, null, [1 => null], -1];
$tests['[1 => null] <=> 0.0'] = [1, null, [1 => null], 0.0];
$tests['[1 => null] <=> -1.0'] = [1, null, [1 => null], -1.0];
$tests['[1 => null] <=> 1.0'] = [1, null, [1 => null], 1.0];
$tests['[1 => null] <=> \'\''] = [1, null, [1 => null], ''];
$tests['[1 => null] <=> \'0\''] = [1, null, [1 => null], '0'];
$tests['[1 => null] <=> \'-0\''] = [1, null, [1 => null], '-0'];
$tests['[1 => null] <=> \'+0\''] = [1, null, [1 => null], '+0'];
$tests['[1 => null] <=> \'0.0\''] = [1, null, [1 => null], '0.0'];
$tests['[1 => null] <=> \'-0.0\''] = [1, null, [1 => null], '-0.0'];
$tests['[1 => null] <=> \'+0.0\''] = [1, null, [1 => null], '+0.0'];
$tests['[1 => null] <=> \'1.0\''] = [1, null, [1 => null], '1.0'];
$tests['[1 => null] <=> \'-1.0\''] = [1, null, [1 => null], '-1.0'];
$tests['[1 => null] <=> \'+1.0\''] = [1, null, [1 => null], '+1.0'];
$tests['[1 => null] <=> \'-1\''] = [1, null, [1 => null], '-1'];
$tests['[1 => null] <=> \'+1\''] = [1, null, [1 => null], '+1'];
$tests['[1 => null] <=> \'1\''] = [1, null, [1 => null], '1'];
$tests['[1 => null] <=> \' 0\''] = [1, null, [1 => null], ' 0'];
$tests['[1 => null] <=> \' -0\''] = [1, null, [1 => null], ' -0'];
$tests['[1 => null] <=> \' +0\''] = [1, null, [1 => null], ' +0'];
$tests['[1 => null] <=> \' 0\' '] = [1, null, [1 => null], ' 0 '];
$tests['[1 => null] <=> \' -0\''] = [1, null, [1 => null], ' -0 '];
$tests['[1 => null] <=> \' +0\''] = [1, null, [1 => null], ' +0 '];
$tests['[1 => null] <=> \'0\' '] = [1, null, [1 => null], '0 '];
$tests['[1 => null] <=> \'-0\''] = [1, null, [1 => null], '-0 '];
$tests['[1 => null] <=> \'+0\''] = [1, null, [1 => null], '+0 '];
$tests['[1 => null] <=> \' 0.0\''] = [1, null, [1 => null], ' 0.0'];
$tests['[1 => null] <=> \' -0.0\''] = [1, null, [1 => null], ' -0.0'];
$tests['[1 => null] <=> \' +0.0\''] = [1, null, [1 => null], ' +0.0'];
$tests['[1 => null] <=> \' 0.0\' '] = [1, null, [1 => null], ' 0.0 '];
$tests['[1 => null] <=> \' -0.0\''] = [1, null, [1 => null], ' -0.0 '];
$tests['[1 => null] <=> \' +0.0\''] = [1, null, [1 => null], ' +0.0 '];
$tests['[1 => null] <=> \'0.0\' '] = [1, null, [1 => null], '0.0 '];
$tests['[1 => null] <=> \'-0.0\''] = [1, null, [1 => null], '-0.0 '];
$tests['[1 => null] <=> \'+0.0\''] = [1, null, [1 => null], '+0.0 '];
$tests['[1 => null] <=> \'03\''] = [1, null, [1 => null], '03'];
$tests['[1 => null] <=> \'2abc\''] = [1, null, [1 => null], '2abc'];
$tests['[1 => null] <=> \'2.5abc\''] = [1, null, [1 => null], '2.5abc'];
$tests['[1 => null] <=> \'abc2abc\''] = [1, null, [1 => null], 'abc2abc'];
$tests['[1 => null] <=> \'abc2.5abc\''] = [1, null, [1 => null], 'abc2.5abc'];
$tests['[1 => null] <=> \'\\0\''] = [1, null, [1 => null], hex2bin('00')];
$tests['[1 => null] <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [1, null, [1 => null], hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['[1 => null] <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [1, null, [1 => null], hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['[1 => null] <=> 12.0000000000001'] = [1, null, [1 => null], 12.0000000000001];
$tests['[1 => null] <=> 12.000000000000002'] = [1, null, [1 => null], 12.000000000000002];
$tests['[1 => null] <=> pi'] = [1, null, [1 => null], M_PI];
$tests['[1 => null] <=> int(max)'] = [1, null, [1 => null], PHP_INT_MAX];
$tests['[1 => null] <=> int(min)'] = [1, null, [1 => null], PHP_INT_MIN];
$tests['[1 => null] <=> float(epsilon)'] = [1, null, [1 => null], PHP_FLOAT_EPSILON];
$tests['[1 => null] <=> float(min)'] = [1, null, [1 => null], PHP_FLOAT_MIN];
$tests['[1 => null] <=> float(max)'] = [1, null, [1 => null], PHP_FLOAT_MAX];
$tests['[1 => null] <=> float(inf)'] = [1, null, [1 => null], INF];
$tests['[1 => null] <=> float(-inf)'] = [1, null, [1 => null], -INF];
$tests['[1 => null] <=> float(nan)'] = [1, null, [1 => null], NAN];
$tests['[1 => null] <=> $closure1'] = [-1, null, [1 => null], $closure1];
$tests['[1 => null] <=> $closure2'] = [-1, null, [1 => null], $closure2];
$tests['[1 => null] <=> $fh1'] = [1, null, [1 => null], $fh1];
$tests['[1 => null] <=> $fh2'] = [1, null, [1 => null], $fh2];
$tests['[1 => null] <=> $proc'] = [1, null, [1 => null], $proc];
$tests['[1 => null] <=> DateTime(2024-01-01T12:00:00Z)'] = [-1, null, [1 => null], unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['[1 => null] <=> DateTime(2024-01-01T12:00:01Z)'] = [-1, null, [1 => null], unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['[1 => null] <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [-1, null, [1 => null], unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['[1 => null] <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [-1, null, [1 => null], unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['[1 => null] <=> []'] = [1, null, [1 => null], []];
$tests['[1 => null] <=> [[]]'] = [1, null, [1 => null], [[]]];
$tests['[1 => null] <=> [1 => []]'] = [0, null, [1 => null], [1 => []]];
$tests['[1 => null] <=> [1 => null]'] = [0, null, [1 => null], [1 => null]];
$tests['[1 => null] <=> [0]'] = [1, null, [1 => null], [0]];
$tests['[1 => null] <=> [0.0]'] = [1, null, [1 => null], [0.0]];
$tests['[1 => null] <=> [null]'] = [1, null, [1 => null], [null]];
$tests['[1 => null] <=> [false]'] = [1, null, [1 => null], [false]];
$tests['[1 => null] <=> [true]'] = [1, null, [1 => null], [true]];
$tests['[1 => null] <=> [\'\']'] = [1, null, [1 => null], ['']];
$tests['[1 => null] <=> [a, b, c]'] = [-1, null, [1 => null], ['a','b','c']];
$tests['[1 => null] <=> [$fh1]'] = [1, null, [1 => null], [$fh1]];
$tests['[1 => null] <=> [foo => bar]'] = [1, null, [1 => null], ['foo' => 'bar']];
$tests['[1 => null] <=> object[]'] = [-1, null, [1 => null], (object) []];
$tests['[1 => null] <=> object[[]]'] = [-1, null, [1 => null], (object) [[]]];
$tests['[1 => null] <=> object[1 => []]'] = [-1, null, [1 => null], (object) [1 => []]];
$tests['[1 => null] <=> object[1 => null]'] = [-1, null, [1 => null], (object) [1 => null]];
$tests['[1 => null] <=> object[0]'] = [-1, null, [1 => null], (object) [0]];
$tests['[1 => null] <=> object[0.0]'] = [-1, null, [1 => null], (object) [0.0]];
$tests['[1 => null] <=> object[null]'] = [-1, null, [1 => null], (object) [null]];
$tests['[1 => null] <=> object[false]'] = [-1, null, [1 => null], (object) [false]];
$tests['[1 => null] <=> object[true]'] = [-1, null, [1 => null], (object) [true]];
$tests['[1 => null] <=> object[\'\']'] = [-1, null, [1 => null], (object) ['']];
$tests['[1 => null] <=> object[a, b, c]'] = [-1, null, [1 => null], (object) ['a','b','c']];
$tests['[1 => null] <=> object[$fh1]'] = [-1, null, [1 => null], (object) [$fh1]];
$tests['[1 => null] <=> object[foo => bar]'] = [-1, null, [1 => null], (object) ['foo' => 'bar']];
$tests['[0] <=> false'] = [1, null, [0], false];
$tests['[0] <=> true'] = [0, null, [0], true];
$tests['[0] <=> null'] = [1, null, [0], null];
$tests['[0] <=> 0'] = [1, null, [0], 0];
$tests['[0] <=> 1'] = [1, null, [0], 1];
$tests['[0] <=> -1'] = [1, null, [0], -1];
$tests['[0] <=> 0.0'] = [1, null, [0], 0.0];
$tests['[0] <=> -1.0'] = [1, null, [0], -1.0];
$tests['[0] <=> 1.0'] = [1, null, [0], 1.0];
$tests['[0] <=> \'\''] = [1, null, [0], ''];
$tests['[0] <=> \'0\''] = [1, null, [0], '0'];
$tests['[0] <=> \'-0\''] = [1, null, [0], '-0'];
$tests['[0] <=> \'+0\''] = [1, null, [0], '+0'];
$tests['[0] <=> \'0.0\''] = [1, null, [0], '0.0'];
$tests['[0] <=> \'-0.0\''] = [1, null, [0], '-0.0'];
$tests['[0] <=> \'+0.0\''] = [1, null, [0], '+0.0'];
$tests['[0] <=> \'1.0\''] = [1, null, [0], '1.0'];
$tests['[0] <=> \'-1.0\''] = [1, null, [0], '-1.0'];
$tests['[0] <=> \'+1.0\''] = [1, null, [0], '+1.0'];
$tests['[0] <=> \'-1\''] = [1, null, [0], '-1'];
$tests['[0] <=> \'+1\''] = [1, null, [0], '+1'];
$tests['[0] <=> \'1\''] = [1, null, [0], '1'];
$tests['[0] <=> \' 0\''] = [1, null, [0], ' 0'];
$tests['[0] <=> \' -0\''] = [1, null, [0], ' -0'];
$tests['[0] <=> \' +0\''] = [1, null, [0], ' +0'];
$tests['[0] <=> \' 0\' '] = [1, null, [0], ' 0 '];
$tests['[0] <=> \' -0\''] = [1, null, [0], ' -0 '];
$tests['[0] <=> \' +0\''] = [1, null, [0], ' +0 '];
$tests['[0] <=> \'0\' '] = [1, null, [0], '0 '];
$tests['[0] <=> \'-0\''] = [1, null, [0], '-0 '];
$tests['[0] <=> \'+0\''] = [1, null, [0], '+0 '];
$tests['[0] <=> \' 0.0\''] = [1, null, [0], ' 0.0'];
$tests['[0] <=> \' -0.0\''] = [1, null, [0], ' -0.0'];
$tests['[0] <=> \' +0.0\''] = [1, null, [0], ' +0.0'];
$tests['[0] <=> \' 0.0\' '] = [1, null, [0], ' 0.0 '];
$tests['[0] <=> \' -0.0\''] = [1, null, [0], ' -0.0 '];
$tests['[0] <=> \' +0.0\''] = [1, null, [0], ' +0.0 '];
$tests['[0] <=> \'0.0\' '] = [1, null, [0], '0.0 '];
$tests['[0] <=> \'-0.0\''] = [1, null, [0], '-0.0 '];
$tests['[0] <=> \'+0.0\''] = [1, null, [0], '+0.0 '];
$tests['[0] <=> \'03\''] = [1, null, [0], '03'];
$tests['[0] <=> \'2abc\''] = [1, null, [0], '2abc'];
$tests['[0] <=> \'2.5abc\''] = [1, null, [0], '2.5abc'];
$tests['[0] <=> \'abc2abc\''] = [1, null, [0], 'abc2abc'];
$tests['[0] <=> \'abc2.5abc\''] = [1, null, [0], 'abc2.5abc'];
$tests['[0] <=> \'\\0\''] = [1, null, [0], hex2bin('00')];
$tests['[0] <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [1, null, [0], hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['[0] <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [1, null, [0], hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['[0] <=> 12.0000000000001'] = [1, null, [0], 12.0000000000001];
$tests['[0] <=> 12.000000000000002'] = [1, null, [0], 12.000000000000002];
$tests['[0] <=> pi'] = [1, null, [0], M_PI];
$tests['[0] <=> int(max)'] = [1, null, [0], PHP_INT_MAX];
$tests['[0] <=> int(min)'] = [1, null, [0], PHP_INT_MIN];
$tests['[0] <=> float(epsilon)'] = [1, null, [0], PHP_FLOAT_EPSILON];
$tests['[0] <=> float(min)'] = [1, null, [0], PHP_FLOAT_MIN];
$tests['[0] <=> float(max)'] = [1, null, [0], PHP_FLOAT_MAX];
$tests['[0] <=> float(inf)'] = [1, null, [0], INF];
$tests['[0] <=> float(-inf)'] = [1, null, [0], -INF];
$tests['[0] <=> float(nan)'] = [1, null, [0], NAN];
$tests['[0] <=> $closure1'] = [-1, null, [0], $closure1];
$tests['[0] <=> $closure2'] = [-1, null, [0], $closure2];
$tests['[0] <=> $fh1'] = [1, null, [0], $fh1];
$tests['[0] <=> $fh2'] = [1, null, [0], $fh2];
$tests['[0] <=> $proc'] = [1, null, [0], $proc];
$tests['[0] <=> DateTime(2024-01-01T12:00:00Z)'] = [-1, null, [0], unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['[0] <=> DateTime(2024-01-01T12:00:01Z)'] = [-1, null, [0], unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['[0] <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [-1, null, [0], unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['[0] <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [-1, null, [0], unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['[0] <=> []'] = [1, null, [0], []];
$tests['[0] <=> [[]]'] = [-1, null, [0], [[]]];
$tests['[0] <=> [1 => []]'] = [1, null, [0], [1 => []]];
$tests['[0] <=> [1 => null]'] = [1, null, [0], [1 => null]];
$tests['[0] <=> [0]'] = [0, null, [0], [0]];
$tests['[0] <=> [0.0]'] = [0, null, [0], [0.0]];
$tests['[0] <=> [null]'] = [0, null, [0], [null]];
$tests['[0] <=> [false]'] = [0, null, [0], [false]];
$tests['[0] <=> [true]'] = [-1, null, [0], [true]];
$tests['[0] <=> [\'\']'] = [1, null, [0], ['']];
$tests['[0] <=> [a, b, c]'] = [-1, null, [0], ['a','b','c']];
$tests['[0] <=> [$fh1]'] = [-1, ['type' => 8,'message' => 'Object of class VarRef could not be converted to int'], [0], [$fh1]];
$tests['[0] <=> [foo => bar]'] = [1, null, [0], ['foo' => 'bar']];
$tests['[0] <=> object[]'] = [-1, null, [0], (object) []];
$tests['[0] <=> object[[]]'] = [-1, null, [0], (object) [[]]];
$tests['[0] <=> object[1 => []]'] = [-1, null, [0], (object) [1 => []]];
$tests['[0] <=> object[1 => null]'] = [-1, null, [0], (object) [1 => null]];
$tests['[0] <=> object[0]'] = [-1, null, [0], (object) [0]];
$tests['[0] <=> object[0.0]'] = [-1, null, [0], (object) [0.0]];
$tests['[0] <=> object[null]'] = [-1, null, [0], (object) [null]];
$tests['[0] <=> object[false]'] = [-1, null, [0], (object) [false]];
$tests['[0] <=> object[true]'] = [-1, null, [0], (object) [true]];
$tests['[0] <=> object[\'\']'] = [-1, null, [0], (object) ['']];
$tests['[0] <=> object[a, b, c]'] = [-1, null, [0], (object) ['a','b','c']];
$tests['[0] <=> object[$fh1]'] = [-1, null, [0], (object) [$fh1]];
$tests['[0] <=> object[foo => bar]'] = [-1, null, [0], (object) ['foo' => 'bar']];
$tests['[0.0] <=> false'] = [1, null, [0.0], false];
$tests['[0.0] <=> true'] = [0, null, [0.0], true];
$tests['[0.0] <=> null'] = [1, null, [0.0], null];
$tests['[0.0] <=> 0'] = [1, null, [0.0], 0];
$tests['[0.0] <=> 1'] = [1, null, [0.0], 1];
$tests['[0.0] <=> -1'] = [1, null, [0.0], -1];
$tests['[0.0] <=> 0.0'] = [1, null, [0.0], 0.0];
$tests['[0.0] <=> -1.0'] = [1, null, [0.0], -1.0];
$tests['[0.0] <=> 1.0'] = [1, null, [0.0], 1.0];
$tests['[0.0] <=> \'\''] = [1, null, [0.0], ''];
$tests['[0.0] <=> \'0\''] = [1, null, [0.0], '0'];
$tests['[0.0] <=> \'-0\''] = [1, null, [0.0], '-0'];
$tests['[0.0] <=> \'+0\''] = [1, null, [0.0], '+0'];
$tests['[0.0] <=> \'0.0\''] = [1, null, [0.0], '0.0'];
$tests['[0.0] <=> \'-0.0\''] = [1, null, [0.0], '-0.0'];
$tests['[0.0] <=> \'+0.0\''] = [1, null, [0.0], '+0.0'];
$tests['[0.0] <=> \'1.0\''] = [1, null, [0.0], '1.0'];
$tests['[0.0] <=> \'-1.0\''] = [1, null, [0.0], '-1.0'];
$tests['[0.0] <=> \'+1.0\''] = [1, null, [0.0], '+1.0'];
$tests['[0.0] <=> \'-1\''] = [1, null, [0.0], '-1'];
$tests['[0.0] <=> \'+1\''] = [1, null, [0.0], '+1'];
$tests['[0.0] <=> \'1\''] = [1, null, [0.0], '1'];
$tests['[0.0] <=> \' 0\''] = [1, null, [0.0], ' 0'];
$tests['[0.0] <=> \' -0\''] = [1, null, [0.0], ' -0'];
$tests['[0.0] <=> \' +0\''] = [1, null, [0.0], ' +0'];
$tests['[0.0] <=> \' 0\' '] = [1, null, [0.0], ' 0 '];
$tests['[0.0] <=> \' -0\''] = [1, null, [0.0], ' -0 '];
$tests['[0.0] <=> \' +0\''] = [1, null, [0.0], ' +0 '];
$tests['[0.0] <=> \'0\' '] = [1, null, [0.0], '0 '];
$tests['[0.0] <=> \'-0\''] = [1, null, [0.0], '-0 '];
$tests['[0.0] <=> \'+0\''] = [1, null, [0.0], '+0 '];
$tests['[0.0] <=> \' 0.0\''] = [1, null, [0.0], ' 0.0'];
$tests['[0.0] <=> \' -0.0\''] = [1, null, [0.0], ' -0.0'];
$tests['[0.0] <=> \' +0.0\''] = [1, null, [0.0], ' +0.0'];
$tests['[0.0] <=> \' 0.0\' '] = [1, null, [0.0], ' 0.0 '];
$tests['[0.0] <=> \' -0.0\''] = [1, null, [0.0], ' -0.0 '];
$tests['[0.0] <=> \' +0.0\''] = [1, null, [0.0], ' +0.0 '];
$tests['[0.0] <=> \'0.0\' '] = [1, null, [0.0], '0.0 '];
$tests['[0.0] <=> \'-0.0\''] = [1, null, [0.0], '-0.0 '];
$tests['[0.0] <=> \'+0.0\''] = [1, null, [0.0], '+0.0 '];
$tests['[0.0] <=> \'03\''] = [1, null, [0.0], '03'];
$tests['[0.0] <=> \'2abc\''] = [1, null, [0.0], '2abc'];
$tests['[0.0] <=> \'2.5abc\''] = [1, null, [0.0], '2.5abc'];
$tests['[0.0] <=> \'abc2abc\''] = [1, null, [0.0], 'abc2abc'];
$tests['[0.0] <=> \'abc2.5abc\''] = [1, null, [0.0], 'abc2.5abc'];
$tests['[0.0] <=> \'\\0\''] = [1, null, [0.0], hex2bin('00')];
$tests['[0.0] <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [1, null, [0.0], hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['[0.0] <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [1, null, [0.0], hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['[0.0] <=> 12.0000000000001'] = [1, null, [0.0], 12.0000000000001];
$tests['[0.0] <=> 12.000000000000002'] = [1, null, [0.0], 12.000000000000002];
$tests['[0.0] <=> pi'] = [1, null, [0.0], M_PI];
$tests['[0.0] <=> int(max)'] = [1, null, [0.0], PHP_INT_MAX];
$tests['[0.0] <=> int(min)'] = [1, null, [0.0], PHP_INT_MIN];
$tests['[0.0] <=> float(epsilon)'] = [1, null, [0.0], PHP_FLOAT_EPSILON];
$tests['[0.0] <=> float(min)'] = [1, null, [0.0], PHP_FLOAT_MIN];
$tests['[0.0] <=> float(max)'] = [1, null, [0.0], PHP_FLOAT_MAX];
$tests['[0.0] <=> float(inf)'] = [1, null, [0.0], INF];
$tests['[0.0] <=> float(-inf)'] = [1, null, [0.0], -INF];
$tests['[0.0] <=> float(nan)'] = [1, null, [0.0], NAN];
$tests['[0.0] <=> $closure1'] = [-1, null, [0.0], $closure1];
$tests['[0.0] <=> $closure2'] = [-1, null, [0.0], $closure2];
$tests['[0.0] <=> $fh1'] = [1, null, [0.0], $fh1];
$tests['[0.0] <=> $fh2'] = [1, null, [0.0], $fh2];
$tests['[0.0] <=> $proc'] = [1, null, [0.0], $proc];
$tests['[0.0] <=> DateTime(2024-01-01T12:00:00Z)'] = [-1, null, [0.0], unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['[0.0] <=> DateTime(2024-01-01T12:00:01Z)'] = [-1, null, [0.0], unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['[0.0] <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [-1, null, [0.0], unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['[0.0] <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [-1, null, [0.0], unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['[0.0] <=> []'] = [1, null, [0.0], []];
$tests['[0.0] <=> [[]]'] = [-1, null, [0.0], [[]]];
$tests['[0.0] <=> [1 => []]'] = [1, null, [0.0], [1 => []]];
$tests['[0.0] <=> [1 => null]'] = [1, null, [0.0], [1 => null]];
$tests['[0.0] <=> [0]'] = [0, null, [0.0], [0]];
$tests['[0.0] <=> [0.0]'] = [0, null, [0.0], [0.0]];
$tests['[0.0] <=> [null]'] = [0, null, [0.0], [null]];
$tests['[0.0] <=> [false]'] = [0, null, [0.0], [false]];
$tests['[0.0] <=> [true]'] = [-1, null, [0.0], [true]];
$tests['[0.0] <=> [\'\']'] = [1, null, [0.0], ['']];
$tests['[0.0] <=> [a, b, c]'] = [-1, null, [0.0], ['a','b','c']];
$tests['[0.0] <=> [$fh1]'] = [-1, ['type' => 8,'message' => 'Object of class VarRef could not be converted to float'], [0.0], [$fh1]];
$tests['[0.0] <=> [foo => bar]'] = [1, null, [0.0], ['foo' => 'bar']];
$tests['[0.0] <=> object[]'] = [-1, null, [0.0], (object) []];
$tests['[0.0] <=> object[[]]'] = [-1, null, [0.0], (object) [[]]];
$tests['[0.0] <=> object[1 => []]'] = [-1, null, [0.0], (object) [1 => []]];
$tests['[0.0] <=> object[1 => null]'] = [-1, null, [0.0], (object) [1 => null]];
$tests['[0.0] <=> object[0]'] = [-1, null, [0.0], (object) [0]];
$tests['[0.0] <=> object[0.0]'] = [-1, null, [0.0], (object) [0.0]];
$tests['[0.0] <=> object[null]'] = [-1, null, [0.0], (object) [null]];
$tests['[0.0] <=> object[false]'] = [-1, null, [0.0], (object) [false]];
$tests['[0.0] <=> object[true]'] = [-1, null, [0.0], (object) [true]];
$tests['[0.0] <=> object[\'\']'] = [-1, null, [0.0], (object) ['']];
$tests['[0.0] <=> object[a, b, c]'] = [-1, null, [0.0], (object) ['a','b','c']];
$tests['[0.0] <=> object[$fh1]'] = [-1, null, [0.0], (object) [$fh1]];
$tests['[0.0] <=> object[foo => bar]'] = [-1, null, [0.0], (object) ['foo' => 'bar']];
$tests['[null] <=> false'] = [1, null, [null], false];
$tests['[null] <=> true'] = [0, null, [null], true];
$tests['[null] <=> null'] = [1, null, [null], null];
$tests['[null] <=> 0'] = [1, null, [null], 0];
$tests['[null] <=> 1'] = [1, null, [null], 1];
$tests['[null] <=> -1'] = [1, null, [null], -1];
$tests['[null] <=> 0.0'] = [1, null, [null], 0.0];
$tests['[null] <=> -1.0'] = [1, null, [null], -1.0];
$tests['[null] <=> 1.0'] = [1, null, [null], 1.0];
$tests['[null] <=> \'\''] = [1, null, [null], ''];
$tests['[null] <=> \'0\''] = [1, null, [null], '0'];
$tests['[null] <=> \'-0\''] = [1, null, [null], '-0'];
$tests['[null] <=> \'+0\''] = [1, null, [null], '+0'];
$tests['[null] <=> \'0.0\''] = [1, null, [null], '0.0'];
$tests['[null] <=> \'-0.0\''] = [1, null, [null], '-0.0'];
$tests['[null] <=> \'+0.0\''] = [1, null, [null], '+0.0'];
$tests['[null] <=> \'1.0\''] = [1, null, [null], '1.0'];
$tests['[null] <=> \'-1.0\''] = [1, null, [null], '-1.0'];
$tests['[null] <=> \'+1.0\''] = [1, null, [null], '+1.0'];
$tests['[null] <=> \'-1\''] = [1, null, [null], '-1'];
$tests['[null] <=> \'+1\''] = [1, null, [null], '+1'];
$tests['[null] <=> \'1\''] = [1, null, [null], '1'];
$tests['[null] <=> \' 0\''] = [1, null, [null], ' 0'];
$tests['[null] <=> \' -0\''] = [1, null, [null], ' -0'];
$tests['[null] <=> \' +0\''] = [1, null, [null], ' +0'];
$tests['[null] <=> \' 0\' '] = [1, null, [null], ' 0 '];
$tests['[null] <=> \' -0\''] = [1, null, [null], ' -0 '];
$tests['[null] <=> \' +0\''] = [1, null, [null], ' +0 '];
$tests['[null] <=> \'0\' '] = [1, null, [null], '0 '];
$tests['[null] <=> \'-0\''] = [1, null, [null], '-0 '];
$tests['[null] <=> \'+0\''] = [1, null, [null], '+0 '];
$tests['[null] <=> \' 0.0\''] = [1, null, [null], ' 0.0'];
$tests['[null] <=> \' -0.0\''] = [1, null, [null], ' -0.0'];
$tests['[null] <=> \' +0.0\''] = [1, null, [null], ' +0.0'];
$tests['[null] <=> \' 0.0\' '] = [1, null, [null], ' 0.0 '];
$tests['[null] <=> \' -0.0\''] = [1, null, [null], ' -0.0 '];
$tests['[null] <=> \' +0.0\''] = [1, null, [null], ' +0.0 '];
$tests['[null] <=> \'0.0\' '] = [1, null, [null], '0.0 '];
$tests['[null] <=> \'-0.0\''] = [1, null, [null], '-0.0 '];
$tests['[null] <=> \'+0.0\''] = [1, null, [null], '+0.0 '];
$tests['[null] <=> \'03\''] = [1, null, [null], '03'];
$tests['[null] <=> \'2abc\''] = [1, null, [null], '2abc'];
$tests['[null] <=> \'2.5abc\''] = [1, null, [null], '2.5abc'];
$tests['[null] <=> \'abc2abc\''] = [1, null, [null], 'abc2abc'];
$tests['[null] <=> \'abc2.5abc\''] = [1, null, [null], 'abc2.5abc'];
$tests['[null] <=> \'\\0\''] = [1, null, [null], hex2bin('00')];
$tests['[null] <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [1, null, [null], hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['[null] <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [1, null, [null], hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['[null] <=> 12.0000000000001'] = [1, null, [null], 12.0000000000001];
$tests['[null] <=> 12.000000000000002'] = [1, null, [null], 12.000000000000002];
$tests['[null] <=> pi'] = [1, null, [null], M_PI];
$tests['[null] <=> int(max)'] = [1, null, [null], PHP_INT_MAX];
$tests['[null] <=> int(min)'] = [1, null, [null], PHP_INT_MIN];
$tests['[null] <=> float(epsilon)'] = [1, null, [null], PHP_FLOAT_EPSILON];
$tests['[null] <=> float(min)'] = [1, null, [null], PHP_FLOAT_MIN];
$tests['[null] <=> float(max)'] = [1, null, [null], PHP_FLOAT_MAX];
$tests['[null] <=> float(inf)'] = [1, null, [null], INF];
$tests['[null] <=> float(-inf)'] = [1, null, [null], -INF];
$tests['[null] <=> float(nan)'] = [1, null, [null], NAN];
$tests['[null] <=> $closure1'] = [-1, null, [null], $closure1];
$tests['[null] <=> $closure2'] = [-1, null, [null], $closure2];
$tests['[null] <=> $fh1'] = [1, null, [null], $fh1];
$tests['[null] <=> $fh2'] = [1, null, [null], $fh2];
$tests['[null] <=> $proc'] = [1, null, [null], $proc];
$tests['[null] <=> DateTime(2024-01-01T12:00:00Z)'] = [-1, null, [null], unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['[null] <=> DateTime(2024-01-01T12:00:01Z)'] = [-1, null, [null], unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['[null] <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [-1, null, [null], unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['[null] <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [-1, null, [null], unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['[null] <=> []'] = [1, null, [null], []];
$tests['[null] <=> [[]]'] = [0, null, [null], [[]]];
$tests['[null] <=> [1 => []]'] = [1, null, [null], [1 => []]];
$tests['[null] <=> [1 => null]'] = [1, null, [null], [1 => null]];
$tests['[null] <=> [0]'] = [0, null, [null], [0]];
$tests['[null] <=> [0.0]'] = [0, null, [null], [0.0]];
$tests['[null] <=> [null]'] = [0, null, [null], [null]];
$tests['[null] <=> [false]'] = [0, null, [null], [false]];
$tests['[null] <=> [true]'] = [-1, null, [null], [true]];
$tests['[null] <=> [\'\']'] = [0, null, [null], ['']];
$tests['[null] <=> [a, b, c]'] = [-1, null, [null], ['a','b','c']];
$tests['[null] <=> [$fh1]'] = [-1, null, [null], [$fh1]];
$tests['[null] <=> [foo => bar]'] = [1, null, [null], ['foo' => 'bar']];
$tests['[null] <=> object[]'] = [-1, null, [null], (object) []];
$tests['[null] <=> object[[]]'] = [-1, null, [null], (object) [[]]];
$tests['[null] <=> object[1 => []]'] = [-1, null, [null], (object) [1 => []]];
$tests['[null] <=> object[1 => null]'] = [-1, null, [null], (object) [1 => null]];
$tests['[null] <=> object[0]'] = [-1, null, [null], (object) [0]];
$tests['[null] <=> object[0.0]'] = [-1, null, [null], (object) [0.0]];
$tests['[null] <=> object[null]'] = [-1, null, [null], (object) [null]];
$tests['[null] <=> object[false]'] = [-1, null, [null], (object) [false]];
$tests['[null] <=> object[true]'] = [-1, null, [null], (object) [true]];
$tests['[null] <=> object[\'\']'] = [-1, null, [null], (object) ['']];
$tests['[null] <=> object[a, b, c]'] = [-1, null, [null], (object) ['a','b','c']];
$tests['[null] <=> object[$fh1]'] = [-1, null, [null], (object) [$fh1]];
$tests['[null] <=> object[foo => bar]'] = [-1, null, [null], (object) ['foo' => 'bar']];
$tests['[false] <=> false'] = [1, null, [false], false];
$tests['[false] <=> true'] = [0, null, [false], true];
$tests['[false] <=> null'] = [1, null, [false], null];
$tests['[false] <=> 0'] = [1, null, [false], 0];
$tests['[false] <=> 1'] = [1, null, [false], 1];
$tests['[false] <=> -1'] = [1, null, [false], -1];
$tests['[false] <=> 0.0'] = [1, null, [false], 0.0];
$tests['[false] <=> -1.0'] = [1, null, [false], -1.0];
$tests['[false] <=> 1.0'] = [1, null, [false], 1.0];
$tests['[false] <=> \'\''] = [1, null, [false], ''];
$tests['[false] <=> \'0\''] = [1, null, [false], '0'];
$tests['[false] <=> \'-0\''] = [1, null, [false], '-0'];
$tests['[false] <=> \'+0\''] = [1, null, [false], '+0'];
$tests['[false] <=> \'0.0\''] = [1, null, [false], '0.0'];
$tests['[false] <=> \'-0.0\''] = [1, null, [false], '-0.0'];
$tests['[false] <=> \'+0.0\''] = [1, null, [false], '+0.0'];
$tests['[false] <=> \'1.0\''] = [1, null, [false], '1.0'];
$tests['[false] <=> \'-1.0\''] = [1, null, [false], '-1.0'];
$tests['[false] <=> \'+1.0\''] = [1, null, [false], '+1.0'];
$tests['[false] <=> \'-1\''] = [1, null, [false], '-1'];
$tests['[false] <=> \'+1\''] = [1, null, [false], '+1'];
$tests['[false] <=> \'1\''] = [1, null, [false], '1'];
$tests['[false] <=> \' 0\''] = [1, null, [false], ' 0'];
$tests['[false] <=> \' -0\''] = [1, null, [false], ' -0'];
$tests['[false] <=> \' +0\''] = [1, null, [false], ' +0'];
$tests['[false] <=> \' 0\' '] = [1, null, [false], ' 0 '];
$tests['[false] <=> \' -0\''] = [1, null, [false], ' -0 '];
$tests['[false] <=> \' +0\''] = [1, null, [false], ' +0 '];
$tests['[false] <=> \'0\' '] = [1, null, [false], '0 '];
$tests['[false] <=> \'-0\''] = [1, null, [false], '-0 '];
$tests['[false] <=> \'+0\''] = [1, null, [false], '+0 '];
$tests['[false] <=> \' 0.0\''] = [1, null, [false], ' 0.0'];
$tests['[false] <=> \' -0.0\''] = [1, null, [false], ' -0.0'];
$tests['[false] <=> \' +0.0\''] = [1, null, [false], ' +0.0'];
$tests['[false] <=> \' 0.0\' '] = [1, null, [false], ' 0.0 '];
$tests['[false] <=> \' -0.0\''] = [1, null, [false], ' -0.0 '];
$tests['[false] <=> \' +0.0\''] = [1, null, [false], ' +0.0 '];
$tests['[false] <=> \'0.0\' '] = [1, null, [false], '0.0 '];
$tests['[false] <=> \'-0.0\''] = [1, null, [false], '-0.0 '];
$tests['[false] <=> \'+0.0\''] = [1, null, [false], '+0.0 '];
$tests['[false] <=> \'03\''] = [1, null, [false], '03'];
$tests['[false] <=> \'2abc\''] = [1, null, [false], '2abc'];
$tests['[false] <=> \'2.5abc\''] = [1, null, [false], '2.5abc'];
$tests['[false] <=> \'abc2abc\''] = [1, null, [false], 'abc2abc'];
$tests['[false] <=> \'abc2.5abc\''] = [1, null, [false], 'abc2.5abc'];
$tests['[false] <=> \'\\0\''] = [1, null, [false], hex2bin('00')];
$tests['[false] <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [1, null, [false], hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['[false] <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [1, null, [false], hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['[false] <=> 12.0000000000001'] = [1, null, [false], 12.0000000000001];
$tests['[false] <=> 12.000000000000002'] = [1, null, [false], 12.000000000000002];
$tests['[false] <=> pi'] = [1, null, [false], M_PI];
$tests['[false] <=> int(max)'] = [1, null, [false], PHP_INT_MAX];
$tests['[false] <=> int(min)'] = [1, null, [false], PHP_INT_MIN];
$tests['[false] <=> float(epsilon)'] = [1, null, [false], PHP_FLOAT_EPSILON];
$tests['[false] <=> float(min)'] = [1, null, [false], PHP_FLOAT_MIN];
$tests['[false] <=> float(max)'] = [1, null, [false], PHP_FLOAT_MAX];
$tests['[false] <=> float(inf)'] = [1, null, [false], INF];
$tests['[false] <=> float(-inf)'] = [1, null, [false], -INF];
$tests['[false] <=> float(nan)'] = [1, null, [false], NAN];
$tests['[false] <=> $closure1'] = [-1, null, [false], $closure1];
$tests['[false] <=> $closure2'] = [-1, null, [false], $closure2];
$tests['[false] <=> $fh1'] = [1, null, [false], $fh1];
$tests['[false] <=> $fh2'] = [1, null, [false], $fh2];
$tests['[false] <=> $proc'] = [1, null, [false], $proc];
$tests['[false] <=> DateTime(2024-01-01T12:00:00Z)'] = [-1, null, [false], unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['[false] <=> DateTime(2024-01-01T12:00:01Z)'] = [-1, null, [false], unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['[false] <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [-1, null, [false], unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['[false] <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [-1, null, [false], unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['[false] <=> []'] = [1, null, [false], []];
$tests['[false] <=> [[]]'] = [0, null, [false], [[]]];
$tests['[false] <=> [1 => []]'] = [1, null, [false], [1 => []]];
$tests['[false] <=> [1 => null]'] = [1, null, [false], [1 => null]];
$tests['[false] <=> [0]'] = [0, null, [false], [0]];
$tests['[false] <=> [0.0]'] = [0, null, [false], [0.0]];
$tests['[false] <=> [null]'] = [0, null, [false], [null]];
$tests['[false] <=> [false]'] = [0, null, [false], [false]];
$tests['[false] <=> [true]'] = [-1, null, [false], [true]];
$tests['[false] <=> [\'\']'] = [0, null, [false], ['']];
$tests['[false] <=> [a, b, c]'] = [-1, null, [false], ['a','b','c']];
$tests['[false] <=> [$fh1]'] = [-1, null, [false], [$fh1]];
$tests['[false] <=> [foo => bar]'] = [1, null, [false], ['foo' => 'bar']];
$tests['[false] <=> object[]'] = [-1, null, [false], (object) []];
$tests['[false] <=> object[[]]'] = [-1, null, [false], (object) [[]]];
$tests['[false] <=> object[1 => []]'] = [-1, null, [false], (object) [1 => []]];
$tests['[false] <=> object[1 => null]'] = [-1, null, [false], (object) [1 => null]];
$tests['[false] <=> object[0]'] = [-1, null, [false], (object) [0]];
$tests['[false] <=> object[0.0]'] = [-1, null, [false], (object) [0.0]];
$tests['[false] <=> object[null]'] = [-1, null, [false], (object) [null]];
$tests['[false] <=> object[false]'] = [-1, null, [false], (object) [false]];
$tests['[false] <=> object[true]'] = [-1, null, [false], (object) [true]];
$tests['[false] <=> object[\'\']'] = [-1, null, [false], (object) ['']];
$tests['[false] <=> object[a, b, c]'] = [-1, null, [false], (object) ['a','b','c']];
$tests['[false] <=> object[$fh1]'] = [-1, null, [false], (object) [$fh1]];
$tests['[false] <=> object[foo => bar]'] = [-1, null, [false], (object) ['foo' => 'bar']];
$tests['[true] <=> false'] = [1, null, [true], false];
$tests['[true] <=> true'] = [0, null, [true], true];
$tests['[true] <=> null'] = [1, null, [true], null];
$tests['[true] <=> 0'] = [1, null, [true], 0];
$tests['[true] <=> 1'] = [1, null, [true], 1];
$tests['[true] <=> -1'] = [1, null, [true], -1];
$tests['[true] <=> 0.0'] = [1, null, [true], 0.0];
$tests['[true] <=> -1.0'] = [1, null, [true], -1.0];
$tests['[true] <=> 1.0'] = [1, null, [true], 1.0];
$tests['[true] <=> \'\''] = [1, null, [true], ''];
$tests['[true] <=> \'0\''] = [1, null, [true], '0'];
$tests['[true] <=> \'-0\''] = [1, null, [true], '-0'];
$tests['[true] <=> \'+0\''] = [1, null, [true], '+0'];
$tests['[true] <=> \'0.0\''] = [1, null, [true], '0.0'];
$tests['[true] <=> \'-0.0\''] = [1, null, [true], '-0.0'];
$tests['[true] <=> \'+0.0\''] = [1, null, [true], '+0.0'];
$tests['[true] <=> \'1.0\''] = [1, null, [true], '1.0'];
$tests['[true] <=> \'-1.0\''] = [1, null, [true], '-1.0'];
$tests['[true] <=> \'+1.0\''] = [1, null, [true], '+1.0'];
$tests['[true] <=> \'-1\''] = [1, null, [true], '-1'];
$tests['[true] <=> \'+1\''] = [1, null, [true], '+1'];
$tests['[true] <=> \'1\''] = [1, null, [true], '1'];
$tests['[true] <=> \' 0\''] = [1, null, [true], ' 0'];
$tests['[true] <=> \' -0\''] = [1, null, [true], ' -0'];
$tests['[true] <=> \' +0\''] = [1, null, [true], ' +0'];
$tests['[true] <=> \' 0\' '] = [1, null, [true], ' 0 '];
$tests['[true] <=> \' -0\''] = [1, null, [true], ' -0 '];
$tests['[true] <=> \' +0\''] = [1, null, [true], ' +0 '];
$tests['[true] <=> \'0\' '] = [1, null, [true], '0 '];
$tests['[true] <=> \'-0\''] = [1, null, [true], '-0 '];
$tests['[true] <=> \'+0\''] = [1, null, [true], '+0 '];
$tests['[true] <=> \' 0.0\''] = [1, null, [true], ' 0.0'];
$tests['[true] <=> \' -0.0\''] = [1, null, [true], ' -0.0'];
$tests['[true] <=> \' +0.0\''] = [1, null, [true], ' +0.0'];
$tests['[true] <=> \' 0.0\' '] = [1, null, [true], ' 0.0 '];
$tests['[true] <=> \' -0.0\''] = [1, null, [true], ' -0.0 '];
$tests['[true] <=> \' +0.0\''] = [1, null, [true], ' +0.0 '];
$tests['[true] <=> \'0.0\' '] = [1, null, [true], '0.0 '];
$tests['[true] <=> \'-0.0\''] = [1, null, [true], '-0.0 '];
$tests['[true] <=> \'+0.0\''] = [1, null, [true], '+0.0 '];
$tests['[true] <=> \'03\''] = [1, null, [true], '03'];
$tests['[true] <=> \'2abc\''] = [1, null, [true], '2abc'];
$tests['[true] <=> \'2.5abc\''] = [1, null, [true], '2.5abc'];
$tests['[true] <=> \'abc2abc\''] = [1, null, [true], 'abc2abc'];
$tests['[true] <=> \'abc2.5abc\''] = [1, null, [true], 'abc2.5abc'];
$tests['[true] <=> \'\\0\''] = [1, null, [true], hex2bin('00')];
$tests['[true] <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [1, null, [true], hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['[true] <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [1, null, [true], hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['[true] <=> 12.0000000000001'] = [1, null, [true], 12.0000000000001];
$tests['[true] <=> 12.000000000000002'] = [1, null, [true], 12.000000000000002];
$tests['[true] <=> pi'] = [1, null, [true], M_PI];
$tests['[true] <=> int(max)'] = [1, null, [true], PHP_INT_MAX];
$tests['[true] <=> int(min)'] = [1, null, [true], PHP_INT_MIN];
$tests['[true] <=> float(epsilon)'] = [1, null, [true], PHP_FLOAT_EPSILON];
$tests['[true] <=> float(min)'] = [1, null, [true], PHP_FLOAT_MIN];
$tests['[true] <=> float(max)'] = [1, null, [true], PHP_FLOAT_MAX];
$tests['[true] <=> float(inf)'] = [1, null, [true], INF];
$tests['[true] <=> float(-inf)'] = [1, null, [true], -INF];
$tests['[true] <=> float(nan)'] = [1, null, [true], NAN];
$tests['[true] <=> $closure1'] = [-1, null, [true], $closure1];
$tests['[true] <=> $closure2'] = [-1, null, [true], $closure2];
$tests['[true] <=> $fh1'] = [1, null, [true], $fh1];
$tests['[true] <=> $fh2'] = [1, null, [true], $fh2];
$tests['[true] <=> $proc'] = [1, null, [true], $proc];
$tests['[true] <=> DateTime(2024-01-01T12:00:00Z)'] = [-1, null, [true], unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['[true] <=> DateTime(2024-01-01T12:00:01Z)'] = [-1, null, [true], unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['[true] <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [-1, null, [true], unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['[true] <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [-1, null, [true], unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['[true] <=> []'] = [1, null, [true], []];
$tests['[true] <=> [[]]'] = [1, null, [true], [[]]];
$tests['[true] <=> [1 => []]'] = [1, null, [true], [1 => []]];
$tests['[true] <=> [1 => null]'] = [1, null, [true], [1 => null]];
$tests['[true] <=> [0]'] = [1, null, [true], [0]];
$tests['[true] <=> [0.0]'] = [1, null, [true], [0.0]];
$tests['[true] <=> [null]'] = [1, null, [true], [null]];
$tests['[true] <=> [false]'] = [1, null, [true], [false]];
$tests['[true] <=> [true]'] = [0, null, [true], [true]];
$tests['[true] <=> [\'\']'] = [1, null, [true], ['']];
$tests['[true] <=> [a, b, c]'] = [-1, null, [true], ['a','b','c']];
$tests['[true] <=> [$fh1]'] = [0, null, [true], [$fh1]];
$tests['[true] <=> [foo => bar]'] = [1, null, [true], ['foo' => 'bar']];
$tests['[true] <=> object[]'] = [-1, null, [true], (object) []];
$tests['[true] <=> object[[]]'] = [-1, null, [true], (object) [[]]];
$tests['[true] <=> object[1 => []]'] = [-1, null, [true], (object) [1 => []]];
$tests['[true] <=> object[1 => null]'] = [-1, null, [true], (object) [1 => null]];
$tests['[true] <=> object[0]'] = [-1, null, [true], (object) [0]];
$tests['[true] <=> object[0.0]'] = [-1, null, [true], (object) [0.0]];
$tests['[true] <=> object[null]'] = [-1, null, [true], (object) [null]];
$tests['[true] <=> object[false]'] = [-1, null, [true], (object) [false]];
$tests['[true] <=> object[true]'] = [-1, null, [true], (object) [true]];
$tests['[true] <=> object[\'\']'] = [-1, null, [true], (object) ['']];
$tests['[true] <=> object[a, b, c]'] = [-1, null, [true], (object) ['a','b','c']];
$tests['[true] <=> object[$fh1]'] = [-1, null, [true], (object) [$fh1]];
$tests['[true] <=> object[foo => bar]'] = [-1, null, [true], (object) ['foo' => 'bar']];
$tests['[\'\'] <=> false'] = [1, null, [''], false];
$tests['[\'\'] <=> true'] = [0, null, [''], true];
$tests['[\'\'] <=> null'] = [1, null, [''], null];
$tests['[\'\'] <=> 0'] = [1, null, [''], 0];
$tests['[\'\'] <=> 1'] = [1, null, [''], 1];
$tests['[\'\'] <=> -1'] = [1, null, [''], -1];
$tests['[\'\'] <=> 0.0'] = [1, null, [''], 0.0];
$tests['[\'\'] <=> -1.0'] = [1, null, [''], -1.0];
$tests['[\'\'] <=> 1.0'] = [1, null, [''], 1.0];
$tests['[\'\'] <=> \'\''] = [1, null, [''], ''];
$tests['[\'\'] <=> \'0\''] = [1, null, [''], '0'];
$tests['[\'\'] <=> \'-0\''] = [1, null, [''], '-0'];
$tests['[\'\'] <=> \'+0\''] = [1, null, [''], '+0'];
$tests['[\'\'] <=> \'0.0\''] = [1, null, [''], '0.0'];
$tests['[\'\'] <=> \'-0.0\''] = [1, null, [''], '-0.0'];
$tests['[\'\'] <=> \'+0.0\''] = [1, null, [''], '+0.0'];
$tests['[\'\'] <=> \'1.0\''] = [1, null, [''], '1.0'];
$tests['[\'\'] <=> \'-1.0\''] = [1, null, [''], '-1.0'];
$tests['[\'\'] <=> \'+1.0\''] = [1, null, [''], '+1.0'];
$tests['[\'\'] <=> \'-1\''] = [1, null, [''], '-1'];
$tests['[\'\'] <=> \'+1\''] = [1, null, [''], '+1'];
$tests['[\'\'] <=> \'1\''] = [1, null, [''], '1'];
$tests['[\'\'] <=> \' 0\''] = [1, null, [''], ' 0'];
$tests['[\'\'] <=> \' -0\''] = [1, null, [''], ' -0'];
$tests['[\'\'] <=> \' +0\''] = [1, null, [''], ' +0'];
$tests['[\'\'] <=> \' 0\' '] = [1, null, [''], ' 0 '];
$tests['[\'\'] <=> \' -0\''] = [1, null, [''], ' -0 '];
$tests['[\'\'] <=> \' +0\''] = [1, null, [''], ' +0 '];
$tests['[\'\'] <=> \'0\' '] = [1, null, [''], '0 '];
$tests['[\'\'] <=> \'-0\''] = [1, null, [''], '-0 '];
$tests['[\'\'] <=> \'+0\''] = [1, null, [''], '+0 '];
$tests['[\'\'] <=> \' 0.0\''] = [1, null, [''], ' 0.0'];
$tests['[\'\'] <=> \' -0.0\''] = [1, null, [''], ' -0.0'];
$tests['[\'\'] <=> \' +0.0\''] = [1, null, [''], ' +0.0'];
$tests['[\'\'] <=> \' 0.0\' '] = [1, null, [''], ' 0.0 '];
$tests['[\'\'] <=> \' -0.0\''] = [1, null, [''], ' -0.0 '];
$tests['[\'\'] <=> \' +0.0\''] = [1, null, [''], ' +0.0 '];
$tests['[\'\'] <=> \'0.0\' '] = [1, null, [''], '0.0 '];
$tests['[\'\'] <=> \'-0.0\''] = [1, null, [''], '-0.0 '];
$tests['[\'\'] <=> \'+0.0\''] = [1, null, [''], '+0.0 '];
$tests['[\'\'] <=> \'03\''] = [1, null, [''], '03'];
$tests['[\'\'] <=> \'2abc\''] = [1, null, [''], '2abc'];
$tests['[\'\'] <=> \'2.5abc\''] = [1, null, [''], '2.5abc'];
$tests['[\'\'] <=> \'abc2abc\''] = [1, null, [''], 'abc2abc'];
$tests['[\'\'] <=> \'abc2.5abc\''] = [1, null, [''], 'abc2.5abc'];
$tests['[\'\'] <=> \'\\0\''] = [1, null, [''], hex2bin('00')];
$tests['[\'\'] <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [1, null, [''], hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['[\'\'] <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [1, null, [''], hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['[\'\'] <=> 12.0000000000001'] = [1, null, [''], 12.0000000000001];
$tests['[\'\'] <=> 12.000000000000002'] = [1, null, [''], 12.000000000000002];
$tests['[\'\'] <=> pi'] = [1, null, [''], M_PI];
$tests['[\'\'] <=> int(max)'] = [1, null, [''], PHP_INT_MAX];
$tests['[\'\'] <=> int(min)'] = [1, null, [''], PHP_INT_MIN];
$tests['[\'\'] <=> float(epsilon)'] = [1, null, [''], PHP_FLOAT_EPSILON];
$tests['[\'\'] <=> float(min)'] = [1, null, [''], PHP_FLOAT_MIN];
$tests['[\'\'] <=> float(max)'] = [1, null, [''], PHP_FLOAT_MAX];
$tests['[\'\'] <=> float(inf)'] = [1, null, [''], INF];
$tests['[\'\'] <=> float(-inf)'] = [1, null, [''], -INF];
$tests['[\'\'] <=> float(nan)'] = [1, null, [''], NAN];
$tests['[\'\'] <=> $closure1'] = [-1, null, [''], $closure1];
$tests['[\'\'] <=> $closure2'] = [-1, null, [''], $closure2];
$tests['[\'\'] <=> $fh1'] = [1, null, [''], $fh1];
$tests['[\'\'] <=> $fh2'] = [1, null, [''], $fh2];
$tests['[\'\'] <=> $proc'] = [1, null, [''], $proc];
$tests['[\'\'] <=> DateTime(2024-01-01T12:00:00Z)'] = [-1, null, [''], unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['[\'\'] <=> DateTime(2024-01-01T12:00:01Z)'] = [-1, null, [''], unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['[\'\'] <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [-1, null, [''], unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['[\'\'] <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [-1, null, [''], unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['[\'\'] <=> []'] = [1, null, [''], []];
$tests['[\'\'] <=> [[]]'] = [-1, null, [''], [[]]];
$tests['[\'\'] <=> [1 => []]'] = [1, null, [''], [1 => []]];
$tests['[\'\'] <=> [1 => null]'] = [1, null, [''], [1 => null]];
$tests['[\'\'] <=> [0]'] = [-1, null, [''], [0]];
$tests['[\'\'] <=> [0.0]'] = [-1, null, [''], [0.0]];
$tests['[\'\'] <=> [null]'] = [0, null, [''], [null]];
$tests['[\'\'] <=> [false]'] = [0, null, [''], [false]];
$tests['[\'\'] <=> [true]'] = [-1, null, [''], [true]];
$tests['[\'\'] <=> [\'\']'] = [0, null, [''], ['']];
$tests['[\'\'] <=> [a, b, c]'] = [-1, null, [''], ['a','b','c']];
$tests['[\'\'] <=> [$fh1]'] = [-1, null, [''], [$fh1]];
$tests['[\'\'] <=> [foo => bar]'] = [1, null, [''], ['foo' => 'bar']];
$tests['[\'\'] <=> object[]'] = [-1, null, [''], (object) []];
$tests['[\'\'] <=> object[[]]'] = [-1, null, [''], (object) [[]]];
$tests['[\'\'] <=> object[1 => []]'] = [-1, null, [''], (object) [1 => []]];
$tests['[\'\'] <=> object[1 => null]'] = [-1, null, [''], (object) [1 => null]];
$tests['[\'\'] <=> object[0]'] = [-1, null, [''], (object) [0]];
$tests['[\'\'] <=> object[0.0]'] = [-1, null, [''], (object) [0.0]];
$tests['[\'\'] <=> object[null]'] = [-1, null, [''], (object) [null]];
$tests['[\'\'] <=> object[false]'] = [-1, null, [''], (object) [false]];
$tests['[\'\'] <=> object[true]'] = [-1, null, [''], (object) [true]];
$tests['[\'\'] <=> object[\'\']'] = [-1, null, [''], (object) ['']];
$tests['[\'\'] <=> object[a, b, c]'] = [-1, null, [''], (object) ['a','b','c']];
$tests['[\'\'] <=> object[$fh1]'] = [-1, null, [''], (object) [$fh1]];
$tests['[\'\'] <=> object[foo => bar]'] = [-1, null, [''], (object) ['foo' => 'bar']];
$tests['[a, b, c] <=> false'] = [1, null, ['a','b','c'], false];
$tests['[a, b, c] <=> true'] = [0, null, ['a','b','c'], true];
$tests['[a, b, c] <=> null'] = [1, null, ['a','b','c'], null];
$tests['[a, b, c] <=> 0'] = [1, null, ['a','b','c'], 0];
$tests['[a, b, c] <=> 1'] = [1, null, ['a','b','c'], 1];
$tests['[a, b, c] <=> -1'] = [1, null, ['a','b','c'], -1];
$tests['[a, b, c] <=> 0.0'] = [1, null, ['a','b','c'], 0.0];
$tests['[a, b, c] <=> -1.0'] = [1, null, ['a','b','c'], -1.0];
$tests['[a, b, c] <=> 1.0'] = [1, null, ['a','b','c'], 1.0];
$tests['[a, b, c] <=> \'\''] = [1, null, ['a','b','c'], ''];
$tests['[a, b, c] <=> \'0\''] = [1, null, ['a','b','c'], '0'];
$tests['[a, b, c] <=> \'-0\''] = [1, null, ['a','b','c'], '-0'];
$tests['[a, b, c] <=> \'+0\''] = [1, null, ['a','b','c'], '+0'];
$tests['[a, b, c] <=> \'0.0\''] = [1, null, ['a','b','c'], '0.0'];
$tests['[a, b, c] <=> \'-0.0\''] = [1, null, ['a','b','c'], '-0.0'];
$tests['[a, b, c] <=> \'+0.0\''] = [1, null, ['a','b','c'], '+0.0'];
$tests['[a, b, c] <=> \'1.0\''] = [1, null, ['a','b','c'], '1.0'];
$tests['[a, b, c] <=> \'-1.0\''] = [1, null, ['a','b','c'], '-1.0'];
$tests['[a, b, c] <=> \'+1.0\''] = [1, null, ['a','b','c'], '+1.0'];
$tests['[a, b, c] <=> \'-1\''] = [1, null, ['a','b','c'], '-1'];
$tests['[a, b, c] <=> \'+1\''] = [1, null, ['a','b','c'], '+1'];
$tests['[a, b, c] <=> \'1\''] = [1, null, ['a','b','c'], '1'];
$tests['[a, b, c] <=> \' 0\''] = [1, null, ['a','b','c'], ' 0'];
$tests['[a, b, c] <=> \' -0\''] = [1, null, ['a','b','c'], ' -0'];
$tests['[a, b, c] <=> \' +0\''] = [1, null, ['a','b','c'], ' +0'];
$tests['[a, b, c] <=> \' 0\' '] = [1, null, ['a','b','c'], ' 0 '];
$tests['[a, b, c] <=> \' -0\''] = [1, null, ['a','b','c'], ' -0 '];
$tests['[a, b, c] <=> \' +0\''] = [1, null, ['a','b','c'], ' +0 '];
$tests['[a, b, c] <=> \'0\' '] = [1, null, ['a','b','c'], '0 '];
$tests['[a, b, c] <=> \'-0\''] = [1, null, ['a','b','c'], '-0 '];
$tests['[a, b, c] <=> \'+0\''] = [1, null, ['a','b','c'], '+0 '];
$tests['[a, b, c] <=> \' 0.0\''] = [1, null, ['a','b','c'], ' 0.0'];
$tests['[a, b, c] <=> \' -0.0\''] = [1, null, ['a','b','c'], ' -0.0'];
$tests['[a, b, c] <=> \' +0.0\''] = [1, null, ['a','b','c'], ' +0.0'];
$tests['[a, b, c] <=> \' 0.0\' '] = [1, null, ['a','b','c'], ' 0.0 '];
$tests['[a, b, c] <=> \' -0.0\''] = [1, null, ['a','b','c'], ' -0.0 '];
$tests['[a, b, c] <=> \' +0.0\''] = [1, null, ['a','b','c'], ' +0.0 '];
$tests['[a, b, c] <=> \'0.0\' '] = [1, null, ['a','b','c'], '0.0 '];
$tests['[a, b, c] <=> \'-0.0\''] = [1, null, ['a','b','c'], '-0.0 '];
$tests['[a, b, c] <=> \'+0.0\''] = [1, null, ['a','b','c'], '+0.0 '];
$tests['[a, b, c] <=> \'03\''] = [1, null, ['a','b','c'], '03'];
$tests['[a, b, c] <=> \'2abc\''] = [1, null, ['a','b','c'], '2abc'];
$tests['[a, b, c] <=> \'2.5abc\''] = [1, null, ['a','b','c'], '2.5abc'];
$tests['[a, b, c] <=> \'abc2abc\''] = [1, null, ['a','b','c'], 'abc2abc'];
$tests['[a, b, c] <=> \'abc2.5abc\''] = [1, null, ['a','b','c'], 'abc2.5abc'];
$tests['[a, b, c] <=> \'\\0\''] = [1, null, ['a','b','c'], hex2bin('00')];
$tests['[a, b, c] <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [1, null, ['a','b','c'], hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['[a, b, c] <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [1, null, ['a','b','c'], hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['[a, b, c] <=> 12.0000000000001'] = [1, null, ['a','b','c'], 12.0000000000001];
$tests['[a, b, c] <=> 12.000000000000002'] = [1, null, ['a','b','c'], 12.000000000000002];
$tests['[a, b, c] <=> pi'] = [1, null, ['a','b','c'], M_PI];
$tests['[a, b, c] <=> int(max)'] = [1, null, ['a','b','c'], PHP_INT_MAX];
$tests['[a, b, c] <=> int(min)'] = [1, null, ['a','b','c'], PHP_INT_MIN];
$tests['[a, b, c] <=> float(epsilon)'] = [1, null, ['a','b','c'], PHP_FLOAT_EPSILON];
$tests['[a, b, c] <=> float(min)'] = [1, null, ['a','b','c'], PHP_FLOAT_MIN];
$tests['[a, b, c] <=> float(max)'] = [1, null, ['a','b','c'], PHP_FLOAT_MAX];
$tests['[a, b, c] <=> float(inf)'] = [1, null, ['a','b','c'], INF];
$tests['[a, b, c] <=> float(-inf)'] = [1, null, ['a','b','c'], -INF];
$tests['[a, b, c] <=> float(nan)'] = [1, null, ['a','b','c'], NAN];
$tests['[a, b, c] <=> $closure1'] = [-1, null, ['a','b','c'], $closure1];
$tests['[a, b, c] <=> $closure2'] = [-1, null, ['a','b','c'], $closure2];
$tests['[a, b, c] <=> $fh1'] = [1, null, ['a','b','c'], $fh1];
$tests['[a, b, c] <=> $fh2'] = [1, null, ['a','b','c'], $fh2];
$tests['[a, b, c] <=> $proc'] = [1, null, ['a','b','c'], $proc];
$tests['[a, b, c] <=> DateTime(2024-01-01T12:00:00Z)'] = [-1, null, ['a','b','c'], unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['[a, b, c] <=> DateTime(2024-01-01T12:00:01Z)'] = [-1, null, ['a','b','c'], unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['[a, b, c] <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [-1, null, ['a','b','c'], unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['[a, b, c] <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [-1, null, ['a','b','c'], unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['[a, b, c] <=> []'] = [1, null, ['a','b','c'], []];
$tests['[a, b, c] <=> [[]]'] = [1, null, ['a','b','c'], [[]]];
$tests['[a, b, c] <=> [1 => []]'] = [1, null, ['a','b','c'], [1 => []]];
$tests['[a, b, c] <=> [1 => null]'] = [1, null, ['a','b','c'], [1 => null]];
$tests['[a, b, c] <=> [0]'] = [1, null, ['a','b','c'], [0]];
$tests['[a, b, c] <=> [0.0]'] = [1, null, ['a','b','c'], [0.0]];
$tests['[a, b, c] <=> [null]'] = [1, null, ['a','b','c'], [null]];
$tests['[a, b, c] <=> [false]'] = [1, null, ['a','b','c'], [false]];
$tests['[a, b, c] <=> [true]'] = [1, null, ['a','b','c'], [true]];
$tests['[a, b, c] <=> [\'\']'] = [1, null, ['a','b','c'], ['']];
$tests['[a, b, c] <=> [a, b, c]'] = [0, null, ['a','b','c'], ['a','b','c']];
$tests['[a, b, c] <=> [$fh1]'] = [1, null, ['a','b','c'], [$fh1]];
$tests['[a, b, c] <=> [foo => bar]'] = [1, null, ['a','b','c'], ['foo' => 'bar']];
$tests['[a, b, c] <=> object[]'] = [-1, null, ['a','b','c'], (object) []];
$tests['[a, b, c] <=> object[[]]'] = [-1, null, ['a','b','c'], (object) [[]]];
$tests['[a, b, c] <=> object[1 => []]'] = [-1, null, ['a','b','c'], (object) [1 => []]];
$tests['[a, b, c] <=> object[1 => null]'] = [-1, null, ['a','b','c'], (object) [1 => null]];
$tests['[a, b, c] <=> object[0]'] = [-1, null, ['a','b','c'], (object) [0]];
$tests['[a, b, c] <=> object[0.0]'] = [-1, null, ['a','b','c'], (object) [0.0]];
$tests['[a, b, c] <=> object[null]'] = [-1, null, ['a','b','c'], (object) [null]];
$tests['[a, b, c] <=> object[false]'] = [-1, null, ['a','b','c'], (object) [false]];
$tests['[a, b, c] <=> object[true]'] = [-1, null, ['a','b','c'], (object) [true]];
$tests['[a, b, c] <=> object[\'\']'] = [-1, null, ['a','b','c'], (object) ['']];
$tests['[a, b, c] <=> object[a, b, c]'] = [-1, null, ['a','b','c'], (object) ['a','b','c']];
$tests['[a, b, c] <=> object[$fh1]'] = [-1, null, ['a','b','c'], (object) [$fh1]];
$tests['[a, b, c] <=> object[foo => bar]'] = [-1, null, ['a','b','c'], (object) ['foo' => 'bar']];
$tests['[$fh1] <=> false'] = [1, null, [$fh1], false];
$tests['[$fh1] <=> true'] = [0, null, [$fh1], true];
$tests['[$fh1] <=> null'] = [1, null, [$fh1], null];
$tests['[$fh1] <=> 0'] = [1, null, [$fh1], 0];
$tests['[$fh1] <=> 1'] = [1, null, [$fh1], 1];
$tests['[$fh1] <=> -1'] = [1, null, [$fh1], -1];
$tests['[$fh1] <=> 0.0'] = [1, null, [$fh1], 0.0];
$tests['[$fh1] <=> -1.0'] = [1, null, [$fh1], -1.0];
$tests['[$fh1] <=> 1.0'] = [1, null, [$fh1], 1.0];
$tests['[$fh1] <=> \'\''] = [1, null, [$fh1], ''];
$tests['[$fh1] <=> \'0\''] = [1, null, [$fh1], '0'];
$tests['[$fh1] <=> \'-0\''] = [1, null, [$fh1], '-0'];
$tests['[$fh1] <=> \'+0\''] = [1, null, [$fh1], '+0'];
$tests['[$fh1] <=> \'0.0\''] = [1, null, [$fh1], '0.0'];
$tests['[$fh1] <=> \'-0.0\''] = [1, null, [$fh1], '-0.0'];
$tests['[$fh1] <=> \'+0.0\''] = [1, null, [$fh1], '+0.0'];
$tests['[$fh1] <=> \'1.0\''] = [1, null, [$fh1], '1.0'];
$tests['[$fh1] <=> \'-1.0\''] = [1, null, [$fh1], '-1.0'];
$tests['[$fh1] <=> \'+1.0\''] = [1, null, [$fh1], '+1.0'];
$tests['[$fh1] <=> \'-1\''] = [1, null, [$fh1], '-1'];
$tests['[$fh1] <=> \'+1\''] = [1, null, [$fh1], '+1'];
$tests['[$fh1] <=> \'1\''] = [1, null, [$fh1], '1'];
$tests['[$fh1] <=> \' 0\''] = [1, null, [$fh1], ' 0'];
$tests['[$fh1] <=> \' -0\''] = [1, null, [$fh1], ' -0'];
$tests['[$fh1] <=> \' +0\''] = [1, null, [$fh1], ' +0'];
$tests['[$fh1] <=> \' 0\' '] = [1, null, [$fh1], ' 0 '];
$tests['[$fh1] <=> \' -0\''] = [1, null, [$fh1], ' -0 '];
$tests['[$fh1] <=> \' +0\''] = [1, null, [$fh1], ' +0 '];
$tests['[$fh1] <=> \'0\' '] = [1, null, [$fh1], '0 '];
$tests['[$fh1] <=> \'-0\''] = [1, null, [$fh1], '-0 '];
$tests['[$fh1] <=> \'+0\''] = [1, null, [$fh1], '+0 '];
$tests['[$fh1] <=> \' 0.0\''] = [1, null, [$fh1], ' 0.0'];
$tests['[$fh1] <=> \' -0.0\''] = [1, null, [$fh1], ' -0.0'];
$tests['[$fh1] <=> \' +0.0\''] = [1, null, [$fh1], ' +0.0'];
$tests['[$fh1] <=> \' 0.0\' '] = [1, null, [$fh1], ' 0.0 '];
$tests['[$fh1] <=> \' -0.0\''] = [1, null, [$fh1], ' -0.0 '];
$tests['[$fh1] <=> \' +0.0\''] = [1, null, [$fh1], ' +0.0 '];
$tests['[$fh1] <=> \'0.0\' '] = [1, null, [$fh1], '0.0 '];
$tests['[$fh1] <=> \'-0.0\''] = [1, null, [$fh1], '-0.0 '];
$tests['[$fh1] <=> \'+0.0\''] = [1, null, [$fh1], '+0.0 '];
$tests['[$fh1] <=> \'03\''] = [1, null, [$fh1], '03'];
$tests['[$fh1] <=> \'2abc\''] = [1, null, [$fh1], '2abc'];
$tests['[$fh1] <=> \'2.5abc\''] = [1, null, [$fh1], '2.5abc'];
$tests['[$fh1] <=> \'abc2abc\''] = [1, null, [$fh1], 'abc2abc'];
$tests['[$fh1] <=> \'abc2.5abc\''] = [1, null, [$fh1], 'abc2.5abc'];
$tests['[$fh1] <=> \'\\0\''] = [1, null, [$fh1], hex2bin('00')];
$tests['[$fh1] <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [1, null, [$fh1], hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['[$fh1] <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [1, null, [$fh1], hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['[$fh1] <=> 12.0000000000001'] = [1, null, [$fh1], 12.0000000000001];
$tests['[$fh1] <=> 12.000000000000002'] = [1, null, [$fh1], 12.000000000000002];
$tests['[$fh1] <=> pi'] = [1, null, [$fh1], M_PI];
$tests['[$fh1] <=> int(max)'] = [1, null, [$fh1], PHP_INT_MAX];
$tests['[$fh1] <=> int(min)'] = [1, null, [$fh1], PHP_INT_MIN];
$tests['[$fh1] <=> float(epsilon)'] = [1, null, [$fh1], PHP_FLOAT_EPSILON];
$tests['[$fh1] <=> float(min)'] = [1, null, [$fh1], PHP_FLOAT_MIN];
$tests['[$fh1] <=> float(max)'] = [1, null, [$fh1], PHP_FLOAT_MAX];
$tests['[$fh1] <=> float(inf)'] = [1, null, [$fh1], INF];
$tests['[$fh1] <=> float(-inf)'] = [1, null, [$fh1], -INF];
$tests['[$fh1] <=> float(nan)'] = [1, null, [$fh1], NAN];
$tests['[$fh1] <=> $closure1'] = [-1, null, [$fh1], $closure1];
$tests['[$fh1] <=> $closure2'] = [-1, null, [$fh1], $closure2];
$tests['[$fh1] <=> $fh1'] = [1, null, [$fh1], $fh1];
$tests['[$fh1] <=> $fh2'] = [1, null, [$fh1], $fh2];
$tests['[$fh1] <=> $proc'] = [1, null, [$fh1], $proc];
$tests['[$fh1] <=> DateTime(2024-01-01T12:00:00Z)'] = [-1, null, [$fh1], unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['[$fh1] <=> DateTime(2024-01-01T12:00:01Z)'] = [-1, null, [$fh1], unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['[$fh1] <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [-1, null, [$fh1], unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['[$fh1] <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [-1, null, [$fh1], unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['[$fh1] <=> []'] = [1, null, [$fh1], []];
$tests['[$fh1] <=> [[]]'] = [1, null, [$fh1], [[]]];
$tests['[$fh1] <=> [1 => []]'] = [1, null, [$fh1], [1 => []]];
$tests['[$fh1] <=> [1 => null]'] = [1, null, [$fh1], [1 => null]];
$tests['[$fh1] <=> [0]'] = [1, ['type' => 8,'message' => 'Object of class VarRef could not be converted to int'], [$fh1], [0]];
$tests['[$fh1] <=> [0.0]'] = [1, ['type' => 8,'message' => 'Object of class VarRef could not be converted to float'], [$fh1], [0.0]];
$tests['[$fh1] <=> [null]'] = [1, null, [$fh1], [null]];
$tests['[$fh1] <=> [false]'] = [1, null, [$fh1], [false]];
$tests['[$fh1] <=> [true]'] = [0, null, [$fh1], [true]];
$tests['[$fh1] <=> [\'\']'] = [1, null, [$fh1], ['']];
$tests['[$fh1] <=> [a, b, c]'] = [-1, null, [$fh1], ['a','b','c']];
$tests['[$fh1] <=> [$fh1]'] = [0, null, [$fh1], [$fh1]];
$tests['[$fh1] <=> [foo => bar]'] = [1, null, [$fh1], ['foo' => 'bar']];
$tests['[$fh1] <=> object[]'] = [-1, null, [$fh1], (object) []];
$tests['[$fh1] <=> object[[]]'] = [-1, null, [$fh1], (object) [[]]];
$tests['[$fh1] <=> object[1 => []]'] = [-1, null, [$fh1], (object) [1 => []]];
$tests['[$fh1] <=> object[1 => null]'] = [-1, null, [$fh1], (object) [1 => null]];
$tests['[$fh1] <=> object[0]'] = [-1, null, [$fh1], (object) [0]];
$tests['[$fh1] <=> object[0.0]'] = [-1, null, [$fh1], (object) [0.0]];
$tests['[$fh1] <=> object[null]'] = [-1, null, [$fh1], (object) [null]];
$tests['[$fh1] <=> object[false]'] = [-1, null, [$fh1], (object) [false]];
$tests['[$fh1] <=> object[true]'] = [-1, null, [$fh1], (object) [true]];
$tests['[$fh1] <=> object[\'\']'] = [-1, null, [$fh1], (object) ['']];
$tests['[$fh1] <=> object[a, b, c]'] = [-1, null, [$fh1], (object) ['a','b','c']];
$tests['[$fh1] <=> object[$fh1]'] = [-1, null, [$fh1], (object) [$fh1]];
$tests['[$fh1] <=> object[foo => bar]'] = [-1, null, [$fh1], (object) ['foo' => 'bar']];
$tests['[foo => bar] <=> false'] = [1, null, ['foo' => 'bar'], false];
$tests['[foo => bar] <=> true'] = [0, null, ['foo' => 'bar'], true];
$tests['[foo => bar] <=> null'] = [1, null, ['foo' => 'bar'], null];
$tests['[foo => bar] <=> 0'] = [1, null, ['foo' => 'bar'], 0];
$tests['[foo => bar] <=> 1'] = [1, null, ['foo' => 'bar'], 1];
$tests['[foo => bar] <=> -1'] = [1, null, ['foo' => 'bar'], -1];
$tests['[foo => bar] <=> 0.0'] = [1, null, ['foo' => 'bar'], 0.0];
$tests['[foo => bar] <=> -1.0'] = [1, null, ['foo' => 'bar'], -1.0];
$tests['[foo => bar] <=> 1.0'] = [1, null, ['foo' => 'bar'], 1.0];
$tests['[foo => bar] <=> \'\''] = [1, null, ['foo' => 'bar'], ''];
$tests['[foo => bar] <=> \'0\''] = [1, null, ['foo' => 'bar'], '0'];
$tests['[foo => bar] <=> \'-0\''] = [1, null, ['foo' => 'bar'], '-0'];
$tests['[foo => bar] <=> \'+0\''] = [1, null, ['foo' => 'bar'], '+0'];
$tests['[foo => bar] <=> \'0.0\''] = [1, null, ['foo' => 'bar'], '0.0'];
$tests['[foo => bar] <=> \'-0.0\''] = [1, null, ['foo' => 'bar'], '-0.0'];
$tests['[foo => bar] <=> \'+0.0\''] = [1, null, ['foo' => 'bar'], '+0.0'];
$tests['[foo => bar] <=> \'1.0\''] = [1, null, ['foo' => 'bar'], '1.0'];
$tests['[foo => bar] <=> \'-1.0\''] = [1, null, ['foo' => 'bar'], '-1.0'];
$tests['[foo => bar] <=> \'+1.0\''] = [1, null, ['foo' => 'bar'], '+1.0'];
$tests['[foo => bar] <=> \'-1\''] = [1, null, ['foo' => 'bar'], '-1'];
$tests['[foo => bar] <=> \'+1\''] = [1, null, ['foo' => 'bar'], '+1'];
$tests['[foo => bar] <=> \'1\''] = [1, null, ['foo' => 'bar'], '1'];
$tests['[foo => bar] <=> \' 0\''] = [1, null, ['foo' => 'bar'], ' 0'];
$tests['[foo => bar] <=> \' -0\''] = [1, null, ['foo' => 'bar'], ' -0'];
$tests['[foo => bar] <=> \' +0\''] = [1, null, ['foo' => 'bar'], ' +0'];
$tests['[foo => bar] <=> \' 0\' '] = [1, null, ['foo' => 'bar'], ' 0 '];
$tests['[foo => bar] <=> \' -0\''] = [1, null, ['foo' => 'bar'], ' -0 '];
$tests['[foo => bar] <=> \' +0\''] = [1, null, ['foo' => 'bar'], ' +0 '];
$tests['[foo => bar] <=> \'0\' '] = [1, null, ['foo' => 'bar'], '0 '];
$tests['[foo => bar] <=> \'-0\''] = [1, null, ['foo' => 'bar'], '-0 '];
$tests['[foo => bar] <=> \'+0\''] = [1, null, ['foo' => 'bar'], '+0 '];
$tests['[foo => bar] <=> \' 0.0\''] = [1, null, ['foo' => 'bar'], ' 0.0'];
$tests['[foo => bar] <=> \' -0.0\''] = [1, null, ['foo' => 'bar'], ' -0.0'];
$tests['[foo => bar] <=> \' +0.0\''] = [1, null, ['foo' => 'bar'], ' +0.0'];
$tests['[foo => bar] <=> \' 0.0\' '] = [1, null, ['foo' => 'bar'], ' 0.0 '];
$tests['[foo => bar] <=> \' -0.0\''] = [1, null, ['foo' => 'bar'], ' -0.0 '];
$tests['[foo => bar] <=> \' +0.0\''] = [1, null, ['foo' => 'bar'], ' +0.0 '];
$tests['[foo => bar] <=> \'0.0\' '] = [1, null, ['foo' => 'bar'], '0.0 '];
$tests['[foo => bar] <=> \'-0.0\''] = [1, null, ['foo' => 'bar'], '-0.0 '];
$tests['[foo => bar] <=> \'+0.0\''] = [1, null, ['foo' => 'bar'], '+0.0 '];
$tests['[foo => bar] <=> \'03\''] = [1, null, ['foo' => 'bar'], '03'];
$tests['[foo => bar] <=> \'2abc\''] = [1, null, ['foo' => 'bar'], '2abc'];
$tests['[foo => bar] <=> \'2.5abc\''] = [1, null, ['foo' => 'bar'], '2.5abc'];
$tests['[foo => bar] <=> \'abc2abc\''] = [1, null, ['foo' => 'bar'], 'abc2abc'];
$tests['[foo => bar] <=> \'abc2.5abc\''] = [1, null, ['foo' => 'bar'], 'abc2.5abc'];
$tests['[foo => bar] <=> \'\\0\''] = [1, null, ['foo' => 'bar'], hex2bin('00')];
$tests['[foo => bar] <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [1, null, ['foo' => 'bar'], hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['[foo => bar] <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [1, null, ['foo' => 'bar'], hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['[foo => bar] <=> 12.0000000000001'] = [1, null, ['foo' => 'bar'], 12.0000000000001];
$tests['[foo => bar] <=> 12.000000000000002'] = [1, null, ['foo' => 'bar'], 12.000000000000002];
$tests['[foo => bar] <=> pi'] = [1, null, ['foo' => 'bar'], M_PI];
$tests['[foo => bar] <=> int(max)'] = [1, null, ['foo' => 'bar'], PHP_INT_MAX];
$tests['[foo => bar] <=> int(min)'] = [1, null, ['foo' => 'bar'], PHP_INT_MIN];
$tests['[foo => bar] <=> float(epsilon)'] = [1, null, ['foo' => 'bar'], PHP_FLOAT_EPSILON];
$tests['[foo => bar] <=> float(min)'] = [1, null, ['foo' => 'bar'], PHP_FLOAT_MIN];
$tests['[foo => bar] <=> float(max)'] = [1, null, ['foo' => 'bar'], PHP_FLOAT_MAX];
$tests['[foo => bar] <=> float(inf)'] = [1, null, ['foo' => 'bar'], INF];
$tests['[foo => bar] <=> float(-inf)'] = [1, null, ['foo' => 'bar'], -INF];
$tests['[foo => bar] <=> float(nan)'] = [1, null, ['foo' => 'bar'], NAN];
$tests['[foo => bar] <=> $closure1'] = [-1, null, ['foo' => 'bar'], $closure1];
$tests['[foo => bar] <=> $closure2'] = [-1, null, ['foo' => 'bar'], $closure2];
$tests['[foo => bar] <=> $fh1'] = [1, null, ['foo' => 'bar'], $fh1];
$tests['[foo => bar] <=> $fh2'] = [1, null, ['foo' => 'bar'], $fh2];
$tests['[foo => bar] <=> $proc'] = [1, null, ['foo' => 'bar'], $proc];
$tests['[foo => bar] <=> DateTime(2024-01-01T12:00:00Z)'] = [-1, null, ['foo' => 'bar'], unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['[foo => bar] <=> DateTime(2024-01-01T12:00:01Z)'] = [-1, null, ['foo' => 'bar'], unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['[foo => bar] <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [-1, null, ['foo' => 'bar'], unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['[foo => bar] <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [-1, null, ['foo' => 'bar'], unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['[foo => bar] <=> []'] = [1, null, ['foo' => 'bar'], []];
$tests['[foo => bar] <=> [[]]'] = [1, null, ['foo' => 'bar'], [[]]];
$tests['[foo => bar] <=> [1 => []]'] = [1, null, ['foo' => 'bar'], [1 => []]];
$tests['[foo => bar] <=> [1 => null]'] = [1, null, ['foo' => 'bar'], [1 => null]];
$tests['[foo => bar] <=> [0]'] = [1, null, ['foo' => 'bar'], [0]];
$tests['[foo => bar] <=> [0.0]'] = [1, null, ['foo' => 'bar'], [0.0]];
$tests['[foo => bar] <=> [null]'] = [1, null, ['foo' => 'bar'], [null]];
$tests['[foo => bar] <=> [false]'] = [1, null, ['foo' => 'bar'], [false]];
$tests['[foo => bar] <=> [true]'] = [1, null, ['foo' => 'bar'], [true]];
$tests['[foo => bar] <=> [\'\']'] = [1, null, ['foo' => 'bar'], ['']];
$tests['[foo => bar] <=> [a, b, c]'] = [-1, null, ['foo' => 'bar'], ['a','b','c']];
$tests['[foo => bar] <=> [$fh1]'] = [1, null, ['foo' => 'bar'], [$fh1]];
$tests['[foo => bar] <=> [foo => bar]'] = [0, null, ['foo' => 'bar'], ['foo' => 'bar']];
$tests['[foo => bar] <=> object[]'] = [-1, null, ['foo' => 'bar'], (object) []];
$tests['[foo => bar] <=> object[[]]'] = [-1, null, ['foo' => 'bar'], (object) [[]]];
$tests['[foo => bar] <=> object[1 => []]'] = [-1, null, ['foo' => 'bar'], (object) [1 => []]];
$tests['[foo => bar] <=> object[1 => null]'] = [-1, null, ['foo' => 'bar'], (object) [1 => null]];
$tests['[foo => bar] <=> object[0]'] = [-1, null, ['foo' => 'bar'], (object) [0]];
$tests['[foo => bar] <=> object[0.0]'] = [-1, null, ['foo' => 'bar'], (object) [0.0]];
$tests['[foo => bar] <=> object[null]'] = [-1, null, ['foo' => 'bar'], (object) [null]];
$tests['[foo => bar] <=> object[false]'] = [-1, null, ['foo' => 'bar'], (object) [false]];
$tests['[foo => bar] <=> object[true]'] = [-1, null, ['foo' => 'bar'], (object) [true]];
$tests['[foo => bar] <=> object[\'\']'] = [-1, null, ['foo' => 'bar'], (object) ['']];
$tests['[foo => bar] <=> object[a, b, c]'] = [-1, null, ['foo' => 'bar'], (object) ['a','b','c']];
$tests['[foo => bar] <=> object[$fh1]'] = [-1, null, ['foo' => 'bar'], (object) [$fh1]];
$tests['[foo => bar] <=> object[foo => bar]'] = [-1, null, ['foo' => 'bar'], (object) ['foo' => 'bar']];
$tests['object[] <=> false'] = [1, null, (object) [], false];
$tests['object[] <=> true'] = [0, null, (object) [], true];
$tests['object[] <=> null'] = [1, null, (object) [], null];
$tests['object[] <=> 0'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], (object) [], 0];
$tests['object[] <=> 1'] = [0, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], (object) [], 1];
$tests['object[] <=> -1'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], (object) [], -1];
$tests['object[] <=> 0.0'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [], 0.0];
$tests['object[] <=> -1.0'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [], -1.0];
$tests['object[] <=> 1.0'] = [0, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [], 1.0];
$tests['object[] <=> \'\''] = [1, null, (object) [], ''];
$tests['object[] <=> \'0\''] = [1, null, (object) [], '0'];
$tests['object[] <=> \'-0\''] = [1, null, (object) [], '-0'];
$tests['object[] <=> \'+0\''] = [1, null, (object) [], '+0'];
$tests['object[] <=> \'0.0\''] = [1, null, (object) [], '0.0'];
$tests['object[] <=> \'-0.0\''] = [1, null, (object) [], '-0.0'];
$tests['object[] <=> \'+0.0\''] = [1, null, (object) [], '+0.0'];
$tests['object[] <=> \'1.0\''] = [1, null, (object) [], '1.0'];
$tests['object[] <=> \'-1.0\''] = [1, null, (object) [], '-1.0'];
$tests['object[] <=> \'+1.0\''] = [1, null, (object) [], '+1.0'];
$tests['object[] <=> \'-1\''] = [1, null, (object) [], '-1'];
$tests['object[] <=> \'+1\''] = [1, null, (object) [], '+1'];
$tests['object[] <=> \'1\''] = [1, null, (object) [], '1'];
$tests['object[] <=> \' 0\''] = [1, null, (object) [], ' 0'];
$tests['object[] <=> \' -0\''] = [1, null, (object) [], ' -0'];
$tests['object[] <=> \' +0\''] = [1, null, (object) [], ' +0'];
$tests['object[] <=> \' 0\' '] = [1, null, (object) [], ' 0 '];
$tests['object[] <=> \' -0\''] = [1, null, (object) [], ' -0 '];
$tests['object[] <=> \' +0\''] = [1, null, (object) [], ' +0 '];
$tests['object[] <=> \'0\' '] = [1, null, (object) [], '0 '];
$tests['object[] <=> \'-0\''] = [1, null, (object) [], '-0 '];
$tests['object[] <=> \'+0\''] = [1, null, (object) [], '+0 '];
$tests['object[] <=> \' 0.0\''] = [1, null, (object) [], ' 0.0'];
$tests['object[] <=> \' -0.0\''] = [1, null, (object) [], ' -0.0'];
$tests['object[] <=> \' +0.0\''] = [1, null, (object) [], ' +0.0'];
$tests['object[] <=> \' 0.0\' '] = [1, null, (object) [], ' 0.0 '];
$tests['object[] <=> \' -0.0\''] = [1, null, (object) [], ' -0.0 '];
$tests['object[] <=> \' +0.0\''] = [1, null, (object) [], ' +0.0 '];
$tests['object[] <=> \'0.0\' '] = [1, null, (object) [], '0.0 '];
$tests['object[] <=> \'-0.0\''] = [1, null, (object) [], '-0.0 '];
$tests['object[] <=> \'+0.0\''] = [1, null, (object) [], '+0.0 '];
$tests['object[] <=> \'03\''] = [1, null, (object) [], '03'];
$tests['object[] <=> \'2abc\''] = [1, null, (object) [], '2abc'];
$tests['object[] <=> \'2.5abc\''] = [1, null, (object) [], '2.5abc'];
$tests['object[] <=> \'abc2abc\''] = [1, null, (object) [], 'abc2abc'];
$tests['object[] <=> \'abc2.5abc\''] = [1, null, (object) [], 'abc2.5abc'];
$tests['object[] <=> \'\\0\''] = [1, null, (object) [], hex2bin('00')];
$tests['object[] <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [1, null, (object) [], hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['object[] <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [1, null, (object) [], hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['object[] <=> 12.0000000000001'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [], 12.0000000000001];
$tests['object[] <=> 12.000000000000002'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [], 12.000000000000002];
$tests['object[] <=> pi'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [], M_PI];
$tests['object[] <=> int(max)'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], (object) [], PHP_INT_MAX];
$tests['object[] <=> int(min)'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], (object) [], PHP_INT_MIN];
$tests['object[] <=> float(epsilon)'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [], PHP_FLOAT_EPSILON];
$tests['object[] <=> float(min)'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [], PHP_FLOAT_MIN];
$tests['object[] <=> float(max)'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [], PHP_FLOAT_MAX];
$tests['object[] <=> float(inf)'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [], INF];
$tests['object[] <=> float(-inf)'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [], -INF];
$tests['object[] <=> float(nan)'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [], NAN];
$tests['object[] <=> $closure1'] = [1, null, (object) [], $closure1];
$tests['object[] <=> $closure2'] = [1, null, (object) [], $closure2];
$tests['object[] <=> $fh1'] = [1, null, (object) [], $fh1];
$tests['object[] <=> $fh2'] = [1, null, (object) [], $fh2];
$tests['object[] <=> $proc'] = [1, null, (object) [], $proc];
$tests['object[] <=> DateTime(2024-01-01T12:00:00Z)'] = [1, null, (object) [], unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['object[] <=> DateTime(2024-01-01T12:00:01Z)'] = [1, null, (object) [], unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['object[] <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [1, null, (object) [], unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['object[] <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [1, null, (object) [], unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['object[] <=> []'] = [1, null, (object) [], []];
$tests['object[] <=> [[]]'] = [1, null, (object) [], [[]]];
$tests['object[] <=> [1 => []]'] = [1, null, (object) [], [1 => []]];
$tests['object[] <=> [1 => null]'] = [1, null, (object) [], [1 => null]];
$tests['object[] <=> [0]'] = [1, null, (object) [], [0]];
$tests['object[] <=> [0.0]'] = [1, null, (object) [], [0.0]];
$tests['object[] <=> [null]'] = [1, null, (object) [], [null]];
$tests['object[] <=> [false]'] = [1, null, (object) [], [false]];
$tests['object[] <=> [true]'] = [1, null, (object) [], [true]];
$tests['object[] <=> [\'\']'] = [1, null, (object) [], ['']];
$tests['object[] <=> [a, b, c]'] = [1, null, (object) [], ['a','b','c']];
$tests['object[] <=> [$fh1]'] = [1, null, (object) [], [$fh1]];
$tests['object[] <=> [foo => bar]'] = [1, null, (object) [], ['foo' => 'bar']];
$tests['object[] <=> object[]'] = [0, null, (object) [], (object) []];
$tests['object[] <=> object[[]]'] = [-1, null, (object) [], (object) [[]]];
$tests['object[] <=> object[1 => []]'] = [-1, null, (object) [], (object) [1 => []]];
$tests['object[] <=> object[1 => null]'] = [-1, null, (object) [], (object) [1 => null]];
$tests['object[] <=> object[0]'] = [-1, null, (object) [], (object) [0]];
$tests['object[] <=> object[0.0]'] = [-1, null, (object) [], (object) [0.0]];
$tests['object[] <=> object[null]'] = [-1, null, (object) [], (object) [null]];
$tests['object[] <=> object[false]'] = [-1, null, (object) [], (object) [false]];
$tests['object[] <=> object[true]'] = [-1, null, (object) [], (object) [true]];
$tests['object[] <=> object[\'\']'] = [-1, null, (object) [], (object) ['']];
$tests['object[] <=> object[a, b, c]'] = [-1, null, (object) [], (object) ['a','b','c']];
$tests['object[] <=> object[$fh1]'] = [-1, null, (object) [], (object) [$fh1]];
$tests['object[] <=> object[foo => bar]'] = [-1, null, (object) [], (object) ['foo' => 'bar']];
$tests['object[[]] <=> false'] = [1, null, (object) [[]], false];
$tests['object[[]] <=> true'] = [0, null, (object) [[]], true];
$tests['object[[]] <=> null'] = [1, null, (object) [[]], null];
$tests['object[[]] <=> 0'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], (object) [[]], 0];
$tests['object[[]] <=> 1'] = [0, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], (object) [[]], 1];
$tests['object[[]] <=> -1'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], (object) [[]], -1];
$tests['object[[]] <=> 0.0'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [[]], 0.0];
$tests['object[[]] <=> -1.0'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [[]], -1.0];
$tests['object[[]] <=> 1.0'] = [0, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [[]], 1.0];
$tests['object[[]] <=> \'\''] = [1, null, (object) [[]], ''];
$tests['object[[]] <=> \'0\''] = [1, null, (object) [[]], '0'];
$tests['object[[]] <=> \'-0\''] = [1, null, (object) [[]], '-0'];
$tests['object[[]] <=> \'+0\''] = [1, null, (object) [[]], '+0'];
$tests['object[[]] <=> \'0.0\''] = [1, null, (object) [[]], '0.0'];
$tests['object[[]] <=> \'-0.0\''] = [1, null, (object) [[]], '-0.0'];
$tests['object[[]] <=> \'+0.0\''] = [1, null, (object) [[]], '+0.0'];
$tests['object[[]] <=> \'1.0\''] = [1, null, (object) [[]], '1.0'];
$tests['object[[]] <=> \'-1.0\''] = [1, null, (object) [[]], '-1.0'];
$tests['object[[]] <=> \'+1.0\''] = [1, null, (object) [[]], '+1.0'];
$tests['object[[]] <=> \'-1\''] = [1, null, (object) [[]], '-1'];
$tests['object[[]] <=> \'+1\''] = [1, null, (object) [[]], '+1'];
$tests['object[[]] <=> \'1\''] = [1, null, (object) [[]], '1'];
$tests['object[[]] <=> \' 0\''] = [1, null, (object) [[]], ' 0'];
$tests['object[[]] <=> \' -0\''] = [1, null, (object) [[]], ' -0'];
$tests['object[[]] <=> \' +0\''] = [1, null, (object) [[]], ' +0'];
$tests['object[[]] <=> \' 0\' '] = [1, null, (object) [[]], ' 0 '];
$tests['object[[]] <=> \' -0\''] = [1, null, (object) [[]], ' -0 '];
$tests['object[[]] <=> \' +0\''] = [1, null, (object) [[]], ' +0 '];
$tests['object[[]] <=> \'0\' '] = [1, null, (object) [[]], '0 '];
$tests['object[[]] <=> \'-0\''] = [1, null, (object) [[]], '-0 '];
$tests['object[[]] <=> \'+0\''] = [1, null, (object) [[]], '+0 '];
$tests['object[[]] <=> \' 0.0\''] = [1, null, (object) [[]], ' 0.0'];
$tests['object[[]] <=> \' -0.0\''] = [1, null, (object) [[]], ' -0.0'];
$tests['object[[]] <=> \' +0.0\''] = [1, null, (object) [[]], ' +0.0'];
$tests['object[[]] <=> \' 0.0\' '] = [1, null, (object) [[]], ' 0.0 '];
$tests['object[[]] <=> \' -0.0\''] = [1, null, (object) [[]], ' -0.0 '];
$tests['object[[]] <=> \' +0.0\''] = [1, null, (object) [[]], ' +0.0 '];
$tests['object[[]] <=> \'0.0\' '] = [1, null, (object) [[]], '0.0 '];
$tests['object[[]] <=> \'-0.0\''] = [1, null, (object) [[]], '-0.0 '];
$tests['object[[]] <=> \'+0.0\''] = [1, null, (object) [[]], '+0.0 '];
$tests['object[[]] <=> \'03\''] = [1, null, (object) [[]], '03'];
$tests['object[[]] <=> \'2abc\''] = [1, null, (object) [[]], '2abc'];
$tests['object[[]] <=> \'2.5abc\''] = [1, null, (object) [[]], '2.5abc'];
$tests['object[[]] <=> \'abc2abc\''] = [1, null, (object) [[]], 'abc2abc'];
$tests['object[[]] <=> \'abc2.5abc\''] = [1, null, (object) [[]], 'abc2.5abc'];
$tests['object[[]] <=> \'\\0\''] = [1, null, (object) [[]], hex2bin('00')];
$tests['object[[]] <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [1, null, (object) [[]], hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['object[[]] <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [1, null, (object) [[]], hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['object[[]] <=> 12.0000000000001'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [[]], 12.0000000000001];
$tests['object[[]] <=> 12.000000000000002'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [[]], 12.000000000000002];
$tests['object[[]] <=> pi'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [[]], M_PI];
$tests['object[[]] <=> int(max)'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], (object) [[]], PHP_INT_MAX];
$tests['object[[]] <=> int(min)'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], (object) [[]], PHP_INT_MIN];
$tests['object[[]] <=> float(epsilon)'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [[]], PHP_FLOAT_EPSILON];
$tests['object[[]] <=> float(min)'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [[]], PHP_FLOAT_MIN];
$tests['object[[]] <=> float(max)'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [[]], PHP_FLOAT_MAX];
$tests['object[[]] <=> float(inf)'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [[]], INF];
$tests['object[[]] <=> float(-inf)'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [[]], -INF];
$tests['object[[]] <=> float(nan)'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [[]], NAN];
$tests['object[[]] <=> $closure1'] = [1, null, (object) [[]], $closure1];
$tests['object[[]] <=> $closure2'] = [1, null, (object) [[]], $closure2];
$tests['object[[]] <=> $fh1'] = [1, null, (object) [[]], $fh1];
$tests['object[[]] <=> $fh2'] = [1, null, (object) [[]], $fh2];
$tests['object[[]] <=> $proc'] = [1, null, (object) [[]], $proc];
$tests['object[[]] <=> DateTime(2024-01-01T12:00:00Z)'] = [1, null, (object) [[]], unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['object[[]] <=> DateTime(2024-01-01T12:00:01Z)'] = [1, null, (object) [[]], unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['object[[]] <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [1, null, (object) [[]], unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['object[[]] <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [1, null, (object) [[]], unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['object[[]] <=> []'] = [1, null, (object) [[]], []];
$tests['object[[]] <=> [[]]'] = [1, null, (object) [[]], [[]]];
$tests['object[[]] <=> [1 => []]'] = [1, null, (object) [[]], [1 => []]];
$tests['object[[]] <=> [1 => null]'] = [1, null, (object) [[]], [1 => null]];
$tests['object[[]] <=> [0]'] = [1, null, (object) [[]], [0]];
$tests['object[[]] <=> [0.0]'] = [1, null, (object) [[]], [0.0]];
$tests['object[[]] <=> [null]'] = [1, null, (object) [[]], [null]];
$tests['object[[]] <=> [false]'] = [1, null, (object) [[]], [false]];
$tests['object[[]] <=> [true]'] = [1, null, (object) [[]], [true]];
$tests['object[[]] <=> [\'\']'] = [1, null, (object) [[]], ['']];
$tests['object[[]] <=> [a, b, c]'] = [1, null, (object) [[]], ['a','b','c']];
$tests['object[[]] <=> [$fh1]'] = [1, null, (object) [[]], [$fh1]];
$tests['object[[]] <=> [foo => bar]'] = [1, null, (object) [[]], ['foo' => 'bar']];
$tests['object[[]] <=> object[]'] = [1, null, (object) [[]], (object) []];
$tests['object[[]] <=> object[[]]'] = [0, null, (object) [[]], (object) [[]]];
$tests['object[[]] <=> object[1 => []]'] = [1, null, (object) [[]], (object) [1 => []]];
$tests['object[[]] <=> object[1 => null]'] = [1, null, (object) [[]], (object) [1 => null]];
$tests['object[[]] <=> object[0]'] = [1, null, (object) [[]], (object) [0]];
$tests['object[[]] <=> object[0.0]'] = [1, null, (object) [[]], (object) [0.0]];
$tests['object[[]] <=> object[null]'] = [0, null, (object) [[]], (object) [null]];
$tests['object[[]] <=> object[false]'] = [0, null, (object) [[]], (object) [false]];
$tests['object[[]] <=> object[true]'] = [-1, null, (object) [[]], (object) [true]];
$tests['object[[]] <=> object[\'\']'] = [1, null, (object) [[]], (object) ['']];
$tests['object[[]] <=> object[a, b, c]'] = [-1, null, (object) [[]], (object) ['a','b','c']];
$tests['object[[]] <=> object[$fh1]'] = [-1, null, (object) [[]], (object) [$fh1]];
$tests['object[[]] <=> object[foo => bar]'] = [1, null, (object) [[]], (object) ['foo' => 'bar']];
$tests['object[1 => []] <=> false'] = [1, null, (object) [1 => []], false];
$tests['object[1 => []] <=> true'] = [0, null, (object) [1 => []], true];
$tests['object[1 => []] <=> null'] = [1, null, (object) [1 => []], null];
$tests['object[1 => []] <=> 0'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], (object) [1 => []], 0];
$tests['object[1 => []] <=> 1'] = [0, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], (object) [1 => []], 1];
$tests['object[1 => []] <=> -1'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], (object) [1 => []], -1];
$tests['object[1 => []] <=> 0.0'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [1 => []], 0.0];
$tests['object[1 => []] <=> -1.0'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [1 => []], -1.0];
$tests['object[1 => []] <=> 1.0'] = [0, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [1 => []], 1.0];
$tests['object[1 => []] <=> \'\''] = [1, null, (object) [1 => []], ''];
$tests['object[1 => []] <=> \'0\''] = [1, null, (object) [1 => []], '0'];
$tests['object[1 => []] <=> \'-0\''] = [1, null, (object) [1 => []], '-0'];
$tests['object[1 => []] <=> \'+0\''] = [1, null, (object) [1 => []], '+0'];
$tests['object[1 => []] <=> \'0.0\''] = [1, null, (object) [1 => []], '0.0'];
$tests['object[1 => []] <=> \'-0.0\''] = [1, null, (object) [1 => []], '-0.0'];
$tests['object[1 => []] <=> \'+0.0\''] = [1, null, (object) [1 => []], '+0.0'];
$tests['object[1 => []] <=> \'1.0\''] = [1, null, (object) [1 => []], '1.0'];
$tests['object[1 => []] <=> \'-1.0\''] = [1, null, (object) [1 => []], '-1.0'];
$tests['object[1 => []] <=> \'+1.0\''] = [1, null, (object) [1 => []], '+1.0'];
$tests['object[1 => []] <=> \'-1\''] = [1, null, (object) [1 => []], '-1'];
$tests['object[1 => []] <=> \'+1\''] = [1, null, (object) [1 => []], '+1'];
$tests['object[1 => []] <=> \'1\''] = [1, null, (object) [1 => []], '1'];
$tests['object[1 => []] <=> \' 0\''] = [1, null, (object) [1 => []], ' 0'];
$tests['object[1 => []] <=> \' -0\''] = [1, null, (object) [1 => []], ' -0'];
$tests['object[1 => []] <=> \' +0\''] = [1, null, (object) [1 => []], ' +0'];
$tests['object[1 => []] <=> \' 0\' '] = [1, null, (object) [1 => []], ' 0 '];
$tests['object[1 => []] <=> \' -0\''] = [1, null, (object) [1 => []], ' -0 '];
$tests['object[1 => []] <=> \' +0\''] = [1, null, (object) [1 => []], ' +0 '];
$tests['object[1 => []] <=> \'0\' '] = [1, null, (object) [1 => []], '0 '];
$tests['object[1 => []] <=> \'-0\''] = [1, null, (object) [1 => []], '-0 '];
$tests['object[1 => []] <=> \'+0\''] = [1, null, (object) [1 => []], '+0 '];
$tests['object[1 => []] <=> \' 0.0\''] = [1, null, (object) [1 => []], ' 0.0'];
$tests['object[1 => []] <=> \' -0.0\''] = [1, null, (object) [1 => []], ' -0.0'];
$tests['object[1 => []] <=> \' +0.0\''] = [1, null, (object) [1 => []], ' +0.0'];
$tests['object[1 => []] <=> \' 0.0\' '] = [1, null, (object) [1 => []], ' 0.0 '];
$tests['object[1 => []] <=> \' -0.0\''] = [1, null, (object) [1 => []], ' -0.0 '];
$tests['object[1 => []] <=> \' +0.0\''] = [1, null, (object) [1 => []], ' +0.0 '];
$tests['object[1 => []] <=> \'0.0\' '] = [1, null, (object) [1 => []], '0.0 '];
$tests['object[1 => []] <=> \'-0.0\''] = [1, null, (object) [1 => []], '-0.0 '];
$tests['object[1 => []] <=> \'+0.0\''] = [1, null, (object) [1 => []], '+0.0 '];
$tests['object[1 => []] <=> \'03\''] = [1, null, (object) [1 => []], '03'];
$tests['object[1 => []] <=> \'2abc\''] = [1, null, (object) [1 => []], '2abc'];
$tests['object[1 => []] <=> \'2.5abc\''] = [1, null, (object) [1 => []], '2.5abc'];
$tests['object[1 => []] <=> \'abc2abc\''] = [1, null, (object) [1 => []], 'abc2abc'];
$tests['object[1 => []] <=> \'abc2.5abc\''] = [1, null, (object) [1 => []], 'abc2.5abc'];
$tests['object[1 => []] <=> \'\\0\''] = [1, null, (object) [1 => []], hex2bin('00')];
$tests['object[1 => []] <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [1, null, (object) [1 => []], hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['object[1 => []] <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [1, null, (object) [1 => []], hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['object[1 => []] <=> 12.0000000000001'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [1 => []], 12.0000000000001];
$tests['object[1 => []] <=> 12.000000000000002'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [1 => []], 12.000000000000002];
$tests['object[1 => []] <=> pi'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [1 => []], M_PI];
$tests['object[1 => []] <=> int(max)'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], (object) [1 => []], PHP_INT_MAX];
$tests['object[1 => []] <=> int(min)'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], (object) [1 => []], PHP_INT_MIN];
$tests['object[1 => []] <=> float(epsilon)'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [1 => []], PHP_FLOAT_EPSILON];
$tests['object[1 => []] <=> float(min)'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [1 => []], PHP_FLOAT_MIN];
$tests['object[1 => []] <=> float(max)'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [1 => []], PHP_FLOAT_MAX];
$tests['object[1 => []] <=> float(inf)'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [1 => []], INF];
$tests['object[1 => []] <=> float(-inf)'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [1 => []], -INF];
$tests['object[1 => []] <=> float(nan)'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [1 => []], NAN];
$tests['object[1 => []] <=> $closure1'] = [1, null, (object) [1 => []], $closure1];
$tests['object[1 => []] <=> $closure2'] = [1, null, (object) [1 => []], $closure2];
$tests['object[1 => []] <=> $fh1'] = [1, null, (object) [1 => []], $fh1];
$tests['object[1 => []] <=> $fh2'] = [1, null, (object) [1 => []], $fh2];
$tests['object[1 => []] <=> $proc'] = [1, null, (object) [1 => []], $proc];
$tests['object[1 => []] <=> DateTime(2024-01-01T12:00:00Z)'] = [1, null, (object) [1 => []], unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['object[1 => []] <=> DateTime(2024-01-01T12:00:01Z)'] = [1, null, (object) [1 => []], unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['object[1 => []] <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [1, null, (object) [1 => []], unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['object[1 => []] <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [1, null, (object) [1 => []], unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['object[1 => []] <=> []'] = [1, null, (object) [1 => []], []];
$tests['object[1 => []] <=> [[]]'] = [1, null, (object) [1 => []], [[]]];
$tests['object[1 => []] <=> [1 => []]'] = [1, null, (object) [1 => []], [1 => []]];
$tests['object[1 => []] <=> [1 => null]'] = [1, null, (object) [1 => []], [1 => null]];
$tests['object[1 => []] <=> [0]'] = [1, null, (object) [1 => []], [0]];
$tests['object[1 => []] <=> [0.0]'] = [1, null, (object) [1 => []], [0.0]];
$tests['object[1 => []] <=> [null]'] = [1, null, (object) [1 => []], [null]];
$tests['object[1 => []] <=> [false]'] = [1, null, (object) [1 => []], [false]];
$tests['object[1 => []] <=> [true]'] = [1, null, (object) [1 => []], [true]];
$tests['object[1 => []] <=> [\'\']'] = [1, null, (object) [1 => []], ['']];
$tests['object[1 => []] <=> [a, b, c]'] = [1, null, (object) [1 => []], ['a','b','c']];
$tests['object[1 => []] <=> [$fh1]'] = [1, null, (object) [1 => []], [$fh1]];
$tests['object[1 => []] <=> [foo => bar]'] = [1, null, (object) [1 => []], ['foo' => 'bar']];
$tests['object[1 => []] <=> object[]'] = [1, null, (object) [1 => []], (object) []];
$tests['object[1 => []] <=> object[[]]'] = [1, null, (object) [1 => []], (object) [[]]];
$tests['object[1 => []] <=> object[1 => []]'] = [0, null, (object) [1 => []], (object) [1 => []]];
$tests['object[1 => []] <=> object[1 => null]'] = [0, null, (object) [1 => []], (object) [1 => null]];
$tests['object[1 => []] <=> object[0]'] = [1, null, (object) [1 => []], (object) [0]];
$tests['object[1 => []] <=> object[0.0]'] = [1, null, (object) [1 => []], (object) [0.0]];
$tests['object[1 => []] <=> object[null]'] = [1, null, (object) [1 => []], (object) [null]];
$tests['object[1 => []] <=> object[false]'] = [1, null, (object) [1 => []], (object) [false]];
$tests['object[1 => []] <=> object[true]'] = [1, null, (object) [1 => []], (object) [true]];
$tests['object[1 => []] <=> object[\'\']'] = [1, null, (object) [1 => []], (object) ['']];
$tests['object[1 => []] <=> object[a, b, c]'] = [-1, null, (object) [1 => []], (object) ['a','b','c']];
$tests['object[1 => []] <=> object[$fh1]'] = [1, null, (object) [1 => []], (object) [$fh1]];
$tests['object[1 => []] <=> object[foo => bar]'] = [1, null, (object) [1 => []], (object) ['foo' => 'bar']];
$tests['object[1 => null] <=> false'] = [1, null, (object) [1 => null], false];
$tests['object[1 => null] <=> true'] = [0, null, (object) [1 => null], true];
$tests['object[1 => null] <=> null'] = [1, null, (object) [1 => null], null];
$tests['object[1 => null] <=> 0'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], (object) [1 => null], 0];
$tests['object[1 => null] <=> 1'] = [0, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], (object) [1 => null], 1];
$tests['object[1 => null] <=> -1'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], (object) [1 => null], -1];
$tests['object[1 => null] <=> 0.0'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [1 => null], 0.0];
$tests['object[1 => null] <=> -1.0'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [1 => null], -1.0];
$tests['object[1 => null] <=> 1.0'] = [0, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [1 => null], 1.0];
$tests['object[1 => null] <=> \'\''] = [1, null, (object) [1 => null], ''];
$tests['object[1 => null] <=> \'0\''] = [1, null, (object) [1 => null], '0'];
$tests['object[1 => null] <=> \'-0\''] = [1, null, (object) [1 => null], '-0'];
$tests['object[1 => null] <=> \'+0\''] = [1, null, (object) [1 => null], '+0'];
$tests['object[1 => null] <=> \'0.0\''] = [1, null, (object) [1 => null], '0.0'];
$tests['object[1 => null] <=> \'-0.0\''] = [1, null, (object) [1 => null], '-0.0'];
$tests['object[1 => null] <=> \'+0.0\''] = [1, null, (object) [1 => null], '+0.0'];
$tests['object[1 => null] <=> \'1.0\''] = [1, null, (object) [1 => null], '1.0'];
$tests['object[1 => null] <=> \'-1.0\''] = [1, null, (object) [1 => null], '-1.0'];
$tests['object[1 => null] <=> \'+1.0\''] = [1, null, (object) [1 => null], '+1.0'];
$tests['object[1 => null] <=> \'-1\''] = [1, null, (object) [1 => null], '-1'];
$tests['object[1 => null] <=> \'+1\''] = [1, null, (object) [1 => null], '+1'];
$tests['object[1 => null] <=> \'1\''] = [1, null, (object) [1 => null], '1'];
$tests['object[1 => null] <=> \' 0\''] = [1, null, (object) [1 => null], ' 0'];
$tests['object[1 => null] <=> \' -0\''] = [1, null, (object) [1 => null], ' -0'];
$tests['object[1 => null] <=> \' +0\''] = [1, null, (object) [1 => null], ' +0'];
$tests['object[1 => null] <=> \' 0\' '] = [1, null, (object) [1 => null], ' 0 '];
$tests['object[1 => null] <=> \' -0\''] = [1, null, (object) [1 => null], ' -0 '];
$tests['object[1 => null] <=> \' +0\''] = [1, null, (object) [1 => null], ' +0 '];
$tests['object[1 => null] <=> \'0\' '] = [1, null, (object) [1 => null], '0 '];
$tests['object[1 => null] <=> \'-0\''] = [1, null, (object) [1 => null], '-0 '];
$tests['object[1 => null] <=> \'+0\''] = [1, null, (object) [1 => null], '+0 '];
$tests['object[1 => null] <=> \' 0.0\''] = [1, null, (object) [1 => null], ' 0.0'];
$tests['object[1 => null] <=> \' -0.0\''] = [1, null, (object) [1 => null], ' -0.0'];
$tests['object[1 => null] <=> \' +0.0\''] = [1, null, (object) [1 => null], ' +0.0'];
$tests['object[1 => null] <=> \' 0.0\' '] = [1, null, (object) [1 => null], ' 0.0 '];
$tests['object[1 => null] <=> \' -0.0\''] = [1, null, (object) [1 => null], ' -0.0 '];
$tests['object[1 => null] <=> \' +0.0\''] = [1, null, (object) [1 => null], ' +0.0 '];
$tests['object[1 => null] <=> \'0.0\' '] = [1, null, (object) [1 => null], '0.0 '];
$tests['object[1 => null] <=> \'-0.0\''] = [1, null, (object) [1 => null], '-0.0 '];
$tests['object[1 => null] <=> \'+0.0\''] = [1, null, (object) [1 => null], '+0.0 '];
$tests['object[1 => null] <=> \'03\''] = [1, null, (object) [1 => null], '03'];
$tests['object[1 => null] <=> \'2abc\''] = [1, null, (object) [1 => null], '2abc'];
$tests['object[1 => null] <=> \'2.5abc\''] = [1, null, (object) [1 => null], '2.5abc'];
$tests['object[1 => null] <=> \'abc2abc\''] = [1, null, (object) [1 => null], 'abc2abc'];
$tests['object[1 => null] <=> \'abc2.5abc\''] = [1, null, (object) [1 => null], 'abc2.5abc'];
$tests['object[1 => null] <=> \'\\0\''] = [1, null, (object) [1 => null], hex2bin('00')];
$tests['object[1 => null] <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [1, null, (object) [1 => null], hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['object[1 => null] <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [1, null, (object) [1 => null], hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['object[1 => null] <=> 12.0000000000001'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [1 => null], 12.0000000000001];
$tests['object[1 => null] <=> 12.000000000000002'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [1 => null], 12.000000000000002];
$tests['object[1 => null] <=> pi'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [1 => null], M_PI];
$tests['object[1 => null] <=> int(max)'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], (object) [1 => null], PHP_INT_MAX];
$tests['object[1 => null] <=> int(min)'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], (object) [1 => null], PHP_INT_MIN];
$tests['object[1 => null] <=> float(epsilon)'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [1 => null], PHP_FLOAT_EPSILON];
$tests['object[1 => null] <=> float(min)'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [1 => null], PHP_FLOAT_MIN];
$tests['object[1 => null] <=> float(max)'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [1 => null], PHP_FLOAT_MAX];
$tests['object[1 => null] <=> float(inf)'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [1 => null], INF];
$tests['object[1 => null] <=> float(-inf)'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [1 => null], -INF];
$tests['object[1 => null] <=> float(nan)'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [1 => null], NAN];
$tests['object[1 => null] <=> $closure1'] = [1, null, (object) [1 => null], $closure1];
$tests['object[1 => null] <=> $closure2'] = [1, null, (object) [1 => null], $closure2];
$tests['object[1 => null] <=> $fh1'] = [1, null, (object) [1 => null], $fh1];
$tests['object[1 => null] <=> $fh2'] = [1, null, (object) [1 => null], $fh2];
$tests['object[1 => null] <=> $proc'] = [1, null, (object) [1 => null], $proc];
$tests['object[1 => null] <=> DateTime(2024-01-01T12:00:00Z)'] = [1, null, (object) [1 => null], unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['object[1 => null] <=> DateTime(2024-01-01T12:00:01Z)'] = [1, null, (object) [1 => null], unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['object[1 => null] <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [1, null, (object) [1 => null], unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['object[1 => null] <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [1, null, (object) [1 => null], unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['object[1 => null] <=> []'] = [1, null, (object) [1 => null], []];
$tests['object[1 => null] <=> [[]]'] = [1, null, (object) [1 => null], [[]]];
$tests['object[1 => null] <=> [1 => []]'] = [1, null, (object) [1 => null], [1 => []]];
$tests['object[1 => null] <=> [1 => null]'] = [1, null, (object) [1 => null], [1 => null]];
$tests['object[1 => null] <=> [0]'] = [1, null, (object) [1 => null], [0]];
$tests['object[1 => null] <=> [0.0]'] = [1, null, (object) [1 => null], [0.0]];
$tests['object[1 => null] <=> [null]'] = [1, null, (object) [1 => null], [null]];
$tests['object[1 => null] <=> [false]'] = [1, null, (object) [1 => null], [false]];
$tests['object[1 => null] <=> [true]'] = [1, null, (object) [1 => null], [true]];
$tests['object[1 => null] <=> [\'\']'] = [1, null, (object) [1 => null], ['']];
$tests['object[1 => null] <=> [a, b, c]'] = [1, null, (object) [1 => null], ['a','b','c']];
$tests['object[1 => null] <=> [$fh1]'] = [1, null, (object) [1 => null], [$fh1]];
$tests['object[1 => null] <=> [foo => bar]'] = [1, null, (object) [1 => null], ['foo' => 'bar']];
$tests['object[1 => null] <=> object[]'] = [1, null, (object) [1 => null], (object) []];
$tests['object[1 => null] <=> object[[]]'] = [1, null, (object) [1 => null], (object) [[]]];
$tests['object[1 => null] <=> object[1 => []]'] = [0, null, (object) [1 => null], (object) [1 => []]];
$tests['object[1 => null] <=> object[1 => null]'] = [0, null, (object) [1 => null], (object) [1 => null]];
$tests['object[1 => null] <=> object[0]'] = [1, null, (object) [1 => null], (object) [0]];
$tests['object[1 => null] <=> object[0.0]'] = [1, null, (object) [1 => null], (object) [0.0]];
$tests['object[1 => null] <=> object[null]'] = [1, null, (object) [1 => null], (object) [null]];
$tests['object[1 => null] <=> object[false]'] = [1, null, (object) [1 => null], (object) [false]];
$tests['object[1 => null] <=> object[true]'] = [1, null, (object) [1 => null], (object) [true]];
$tests['object[1 => null] <=> object[\'\']'] = [1, null, (object) [1 => null], (object) ['']];
$tests['object[1 => null] <=> object[a, b, c]'] = [-1, null, (object) [1 => null], (object) ['a','b','c']];
$tests['object[1 => null] <=> object[$fh1]'] = [1, null, (object) [1 => null], (object) [$fh1]];
$tests['object[1 => null] <=> object[foo => bar]'] = [1, null, (object) [1 => null], (object) ['foo' => 'bar']];
$tests['object[0] <=> false'] = [1, null, (object) [0], false];
$tests['object[0] <=> true'] = [0, null, (object) [0], true];
$tests['object[0] <=> null'] = [1, null, (object) [0], null];
$tests['object[0] <=> 0'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], (object) [0], 0];
$tests['object[0] <=> 1'] = [0, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], (object) [0], 1];
$tests['object[0] <=> -1'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], (object) [0], -1];
$tests['object[0] <=> 0.0'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [0], 0.0];
$tests['object[0] <=> -1.0'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [0], -1.0];
$tests['object[0] <=> 1.0'] = [0, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [0], 1.0];
$tests['object[0] <=> \'\''] = [1, null, (object) [0], ''];
$tests['object[0] <=> \'0\''] = [1, null, (object) [0], '0'];
$tests['object[0] <=> \'-0\''] = [1, null, (object) [0], '-0'];
$tests['object[0] <=> \'+0\''] = [1, null, (object) [0], '+0'];
$tests['object[0] <=> \'0.0\''] = [1, null, (object) [0], '0.0'];
$tests['object[0] <=> \'-0.0\''] = [1, null, (object) [0], '-0.0'];
$tests['object[0] <=> \'+0.0\''] = [1, null, (object) [0], '+0.0'];
$tests['object[0] <=> \'1.0\''] = [1, null, (object) [0], '1.0'];
$tests['object[0] <=> \'-1.0\''] = [1, null, (object) [0], '-1.0'];
$tests['object[0] <=> \'+1.0\''] = [1, null, (object) [0], '+1.0'];
$tests['object[0] <=> \'-1\''] = [1, null, (object) [0], '-1'];
$tests['object[0] <=> \'+1\''] = [1, null, (object) [0], '+1'];
$tests['object[0] <=> \'1\''] = [1, null, (object) [0], '1'];
$tests['object[0] <=> \' 0\''] = [1, null, (object) [0], ' 0'];
$tests['object[0] <=> \' -0\''] = [1, null, (object) [0], ' -0'];
$tests['object[0] <=> \' +0\''] = [1, null, (object) [0], ' +0'];
$tests['object[0] <=> \' 0\' '] = [1, null, (object) [0], ' 0 '];
$tests['object[0] <=> \' -0\''] = [1, null, (object) [0], ' -0 '];
$tests['object[0] <=> \' +0\''] = [1, null, (object) [0], ' +0 '];
$tests['object[0] <=> \'0\' '] = [1, null, (object) [0], '0 '];
$tests['object[0] <=> \'-0\''] = [1, null, (object) [0], '-0 '];
$tests['object[0] <=> \'+0\''] = [1, null, (object) [0], '+0 '];
$tests['object[0] <=> \' 0.0\''] = [1, null, (object) [0], ' 0.0'];
$tests['object[0] <=> \' -0.0\''] = [1, null, (object) [0], ' -0.0'];
$tests['object[0] <=> \' +0.0\''] = [1, null, (object) [0], ' +0.0'];
$tests['object[0] <=> \' 0.0\' '] = [1, null, (object) [0], ' 0.0 '];
$tests['object[0] <=> \' -0.0\''] = [1, null, (object) [0], ' -0.0 '];
$tests['object[0] <=> \' +0.0\''] = [1, null, (object) [0], ' +0.0 '];
$tests['object[0] <=> \'0.0\' '] = [1, null, (object) [0], '0.0 '];
$tests['object[0] <=> \'-0.0\''] = [1, null, (object) [0], '-0.0 '];
$tests['object[0] <=> \'+0.0\''] = [1, null, (object) [0], '+0.0 '];
$tests['object[0] <=> \'03\''] = [1, null, (object) [0], '03'];
$tests['object[0] <=> \'2abc\''] = [1, null, (object) [0], '2abc'];
$tests['object[0] <=> \'2.5abc\''] = [1, null, (object) [0], '2.5abc'];
$tests['object[0] <=> \'abc2abc\''] = [1, null, (object) [0], 'abc2abc'];
$tests['object[0] <=> \'abc2.5abc\''] = [1, null, (object) [0], 'abc2.5abc'];
$tests['object[0] <=> \'\\0\''] = [1, null, (object) [0], hex2bin('00')];
$tests['object[0] <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [1, null, (object) [0], hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['object[0] <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [1, null, (object) [0], hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['object[0] <=> 12.0000000000001'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [0], 12.0000000000001];
$tests['object[0] <=> 12.000000000000002'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [0], 12.000000000000002];
$tests['object[0] <=> pi'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [0], M_PI];
$tests['object[0] <=> int(max)'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], (object) [0], PHP_INT_MAX];
$tests['object[0] <=> int(min)'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], (object) [0], PHP_INT_MIN];
$tests['object[0] <=> float(epsilon)'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [0], PHP_FLOAT_EPSILON];
$tests['object[0] <=> float(min)'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [0], PHP_FLOAT_MIN];
$tests['object[0] <=> float(max)'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [0], PHP_FLOAT_MAX];
$tests['object[0] <=> float(inf)'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [0], INF];
$tests['object[0] <=> float(-inf)'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [0], -INF];
$tests['object[0] <=> float(nan)'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [0], NAN];
$tests['object[0] <=> $closure1'] = [1, null, (object) [0], $closure1];
$tests['object[0] <=> $closure2'] = [1, null, (object) [0], $closure2];
$tests['object[0] <=> $fh1'] = [1, null, (object) [0], $fh1];
$tests['object[0] <=> $fh2'] = [1, null, (object) [0], $fh2];
$tests['object[0] <=> $proc'] = [1, null, (object) [0], $proc];
$tests['object[0] <=> DateTime(2024-01-01T12:00:00Z)'] = [1, null, (object) [0], unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['object[0] <=> DateTime(2024-01-01T12:00:01Z)'] = [1, null, (object) [0], unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['object[0] <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [1, null, (object) [0], unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['object[0] <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [1, null, (object) [0], unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['object[0] <=> []'] = [1, null, (object) [0], []];
$tests['object[0] <=> [[]]'] = [1, null, (object) [0], [[]]];
$tests['object[0] <=> [1 => []]'] = [1, null, (object) [0], [1 => []]];
$tests['object[0] <=> [1 => null]'] = [1, null, (object) [0], [1 => null]];
$tests['object[0] <=> [0]'] = [1, null, (object) [0], [0]];
$tests['object[0] <=> [0.0]'] = [1, null, (object) [0], [0.0]];
$tests['object[0] <=> [null]'] = [1, null, (object) [0], [null]];
$tests['object[0] <=> [false]'] = [1, null, (object) [0], [false]];
$tests['object[0] <=> [true]'] = [1, null, (object) [0], [true]];
$tests['object[0] <=> [\'\']'] = [1, null, (object) [0], ['']];
$tests['object[0] <=> [a, b, c]'] = [1, null, (object) [0], ['a','b','c']];
$tests['object[0] <=> [$fh1]'] = [1, null, (object) [0], [$fh1]];
$tests['object[0] <=> [foo => bar]'] = [1, null, (object) [0], ['foo' => 'bar']];
$tests['object[0] <=> object[]'] = [1, null, (object) [0], (object) []];
$tests['object[0] <=> object[[]]'] = [-1, null, (object) [0], (object) [[]]];
$tests['object[0] <=> object[1 => []]'] = [1, null, (object) [0], (object) [1 => []]];
$tests['object[0] <=> object[1 => null]'] = [1, null, (object) [0], (object) [1 => null]];
$tests['object[0] <=> object[0]'] = [0, null, (object) [0], (object) [0]];
$tests['object[0] <=> object[0.0]'] = [0, null, (object) [0], (object) [0.0]];
$tests['object[0] <=> object[null]'] = [0, null, (object) [0], (object) [null]];
$tests['object[0] <=> object[false]'] = [0, null, (object) [0], (object) [false]];
$tests['object[0] <=> object[true]'] = [-1, null, (object) [0], (object) [true]];
$tests['object[0] <=> object[\'\']'] = [1, null, (object) [0], (object) ['']];
$tests['object[0] <=> object[a, b, c]'] = [-1, null, (object) [0], (object) ['a','b','c']];
$tests['object[0] <=> object[$fh1]'] = [-1, ['type' => 8,'message' => 'Object of class VarRef could not be converted to int'], (object) [0], (object) [$fh1]];
$tests['object[0] <=> object[foo => bar]'] = [1, null, (object) [0], (object) ['foo' => 'bar']];
$tests['object[0.0] <=> false'] = [1, null, (object) [0.0], false];
$tests['object[0.0] <=> true'] = [0, null, (object) [0.0], true];
$tests['object[0.0] <=> null'] = [1, null, (object) [0.0], null];
$tests['object[0.0] <=> 0'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], (object) [0.0], 0];
$tests['object[0.0] <=> 1'] = [0, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], (object) [0.0], 1];
$tests['object[0.0] <=> -1'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], (object) [0.0], -1];
$tests['object[0.0] <=> 0.0'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [0.0], 0.0];
$tests['object[0.0] <=> -1.0'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [0.0], -1.0];
$tests['object[0.0] <=> 1.0'] = [0, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [0.0], 1.0];
$tests['object[0.0] <=> \'\''] = [1, null, (object) [0.0], ''];
$tests['object[0.0] <=> \'0\''] = [1, null, (object) [0.0], '0'];
$tests['object[0.0] <=> \'-0\''] = [1, null, (object) [0.0], '-0'];
$tests['object[0.0] <=> \'+0\''] = [1, null, (object) [0.0], '+0'];
$tests['object[0.0] <=> \'0.0\''] = [1, null, (object) [0.0], '0.0'];
$tests['object[0.0] <=> \'-0.0\''] = [1, null, (object) [0.0], '-0.0'];
$tests['object[0.0] <=> \'+0.0\''] = [1, null, (object) [0.0], '+0.0'];
$tests['object[0.0] <=> \'1.0\''] = [1, null, (object) [0.0], '1.0'];
$tests['object[0.0] <=> \'-1.0\''] = [1, null, (object) [0.0], '-1.0'];
$tests['object[0.0] <=> \'+1.0\''] = [1, null, (object) [0.0], '+1.0'];
$tests['object[0.0] <=> \'-1\''] = [1, null, (object) [0.0], '-1'];
$tests['object[0.0] <=> \'+1\''] = [1, null, (object) [0.0], '+1'];
$tests['object[0.0] <=> \'1\''] = [1, null, (object) [0.0], '1'];
$tests['object[0.0] <=> \' 0\''] = [1, null, (object) [0.0], ' 0'];
$tests['object[0.0] <=> \' -0\''] = [1, null, (object) [0.0], ' -0'];
$tests['object[0.0] <=> \' +0\''] = [1, null, (object) [0.0], ' +0'];
$tests['object[0.0] <=> \' 0\' '] = [1, null, (object) [0.0], ' 0 '];
$tests['object[0.0] <=> \' -0\''] = [1, null, (object) [0.0], ' -0 '];
$tests['object[0.0] <=> \' +0\''] = [1, null, (object) [0.0], ' +0 '];
$tests['object[0.0] <=> \'0\' '] = [1, null, (object) [0.0], '0 '];
$tests['object[0.0] <=> \'-0\''] = [1, null, (object) [0.0], '-0 '];
$tests['object[0.0] <=> \'+0\''] = [1, null, (object) [0.0], '+0 '];
$tests['object[0.0] <=> \' 0.0\''] = [1, null, (object) [0.0], ' 0.0'];
$tests['object[0.0] <=> \' -0.0\''] = [1, null, (object) [0.0], ' -0.0'];
$tests['object[0.0] <=> \' +0.0\''] = [1, null, (object) [0.0], ' +0.0'];
$tests['object[0.0] <=> \' 0.0\' '] = [1, null, (object) [0.0], ' 0.0 '];
$tests['object[0.0] <=> \' -0.0\''] = [1, null, (object) [0.0], ' -0.0 '];
$tests['object[0.0] <=> \' +0.0\''] = [1, null, (object) [0.0], ' +0.0 '];
$tests['object[0.0] <=> \'0.0\' '] = [1, null, (object) [0.0], '0.0 '];
$tests['object[0.0] <=> \'-0.0\''] = [1, null, (object) [0.0], '-0.0 '];
$tests['object[0.0] <=> \'+0.0\''] = [1, null, (object) [0.0], '+0.0 '];
$tests['object[0.0] <=> \'03\''] = [1, null, (object) [0.0], '03'];
$tests['object[0.0] <=> \'2abc\''] = [1, null, (object) [0.0], '2abc'];
$tests['object[0.0] <=> \'2.5abc\''] = [1, null, (object) [0.0], '2.5abc'];
$tests['object[0.0] <=> \'abc2abc\''] = [1, null, (object) [0.0], 'abc2abc'];
$tests['object[0.0] <=> \'abc2.5abc\''] = [1, null, (object) [0.0], 'abc2.5abc'];
$tests['object[0.0] <=> \'\\0\''] = [1, null, (object) [0.0], hex2bin('00')];
$tests['object[0.0] <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [1, null, (object) [0.0], hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['object[0.0] <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [1, null, (object) [0.0], hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['object[0.0] <=> 12.0000000000001'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [0.0], 12.0000000000001];
$tests['object[0.0] <=> 12.000000000000002'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [0.0], 12.000000000000002];
$tests['object[0.0] <=> pi'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [0.0], M_PI];
$tests['object[0.0] <=> int(max)'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], (object) [0.0], PHP_INT_MAX];
$tests['object[0.0] <=> int(min)'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], (object) [0.0], PHP_INT_MIN];
$tests['object[0.0] <=> float(epsilon)'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [0.0], PHP_FLOAT_EPSILON];
$tests['object[0.0] <=> float(min)'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [0.0], PHP_FLOAT_MIN];
$tests['object[0.0] <=> float(max)'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [0.0], PHP_FLOAT_MAX];
$tests['object[0.0] <=> float(inf)'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [0.0], INF];
$tests['object[0.0] <=> float(-inf)'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [0.0], -INF];
$tests['object[0.0] <=> float(nan)'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [0.0], NAN];
$tests['object[0.0] <=> $closure1'] = [1, null, (object) [0.0], $closure1];
$tests['object[0.0] <=> $closure2'] = [1, null, (object) [0.0], $closure2];
$tests['object[0.0] <=> $fh1'] = [1, null, (object) [0.0], $fh1];
$tests['object[0.0] <=> $fh2'] = [1, null, (object) [0.0], $fh2];
$tests['object[0.0] <=> $proc'] = [1, null, (object) [0.0], $proc];
$tests['object[0.0] <=> DateTime(2024-01-01T12:00:00Z)'] = [1, null, (object) [0.0], unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['object[0.0] <=> DateTime(2024-01-01T12:00:01Z)'] = [1, null, (object) [0.0], unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['object[0.0] <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [1, null, (object) [0.0], unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['object[0.0] <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [1, null, (object) [0.0], unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['object[0.0] <=> []'] = [1, null, (object) [0.0], []];
$tests['object[0.0] <=> [[]]'] = [1, null, (object) [0.0], [[]]];
$tests['object[0.0] <=> [1 => []]'] = [1, null, (object) [0.0], [1 => []]];
$tests['object[0.0] <=> [1 => null]'] = [1, null, (object) [0.0], [1 => null]];
$tests['object[0.0] <=> [0]'] = [1, null, (object) [0.0], [0]];
$tests['object[0.0] <=> [0.0]'] = [1, null, (object) [0.0], [0.0]];
$tests['object[0.0] <=> [null]'] = [1, null, (object) [0.0], [null]];
$tests['object[0.0] <=> [false]'] = [1, null, (object) [0.0], [false]];
$tests['object[0.0] <=> [true]'] = [1, null, (object) [0.0], [true]];
$tests['object[0.0] <=> [\'\']'] = [1, null, (object) [0.0], ['']];
$tests['object[0.0] <=> [a, b, c]'] = [1, null, (object) [0.0], ['a','b','c']];
$tests['object[0.0] <=> [$fh1]'] = [1, null, (object) [0.0], [$fh1]];
$tests['object[0.0] <=> [foo => bar]'] = [1, null, (object) [0.0], ['foo' => 'bar']];
$tests['object[0.0] <=> object[]'] = [1, null, (object) [0.0], (object) []];
$tests['object[0.0] <=> object[[]]'] = [-1, null, (object) [0.0], (object) [[]]];
$tests['object[0.0] <=> object[1 => []]'] = [1, null, (object) [0.0], (object) [1 => []]];
$tests['object[0.0] <=> object[1 => null]'] = [1, null, (object) [0.0], (object) [1 => null]];
$tests['object[0.0] <=> object[0]'] = [0, null, (object) [0.0], (object) [0]];
$tests['object[0.0] <=> object[0.0]'] = [0, null, (object) [0.0], (object) [0.0]];
$tests['object[0.0] <=> object[null]'] = [0, null, (object) [0.0], (object) [null]];
$tests['object[0.0] <=> object[false]'] = [0, null, (object) [0.0], (object) [false]];
$tests['object[0.0] <=> object[true]'] = [-1, null, (object) [0.0], (object) [true]];
$tests['object[0.0] <=> object[\'\']'] = [1, null, (object) [0.0], (object) ['']];
$tests['object[0.0] <=> object[a, b, c]'] = [-1, null, (object) [0.0], (object) ['a','b','c']];
$tests['object[0.0] <=> object[$fh1]'] = [-1, ['type' => 8,'message' => 'Object of class VarRef could not be converted to float'], (object) [0.0], (object) [$fh1]];
$tests['object[0.0] <=> object[foo => bar]'] = [1, null, (object) [0.0], (object) ['foo' => 'bar']];
$tests['object[null] <=> false'] = [1, null, (object) [null], false];
$tests['object[null] <=> true'] = [0, null, (object) [null], true];
$tests['object[null] <=> null'] = [1, null, (object) [null], null];
$tests['object[null] <=> 0'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], (object) [null], 0];
$tests['object[null] <=> 1'] = [0, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], (object) [null], 1];
$tests['object[null] <=> -1'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], (object) [null], -1];
$tests['object[null] <=> 0.0'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [null], 0.0];
$tests['object[null] <=> -1.0'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [null], -1.0];
$tests['object[null] <=> 1.0'] = [0, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [null], 1.0];
$tests['object[null] <=> \'\''] = [1, null, (object) [null], ''];
$tests['object[null] <=> \'0\''] = [1, null, (object) [null], '0'];
$tests['object[null] <=> \'-0\''] = [1, null, (object) [null], '-0'];
$tests['object[null] <=> \'+0\''] = [1, null, (object) [null], '+0'];
$tests['object[null] <=> \'0.0\''] = [1, null, (object) [null], '0.0'];
$tests['object[null] <=> \'-0.0\''] = [1, null, (object) [null], '-0.0'];
$tests['object[null] <=> \'+0.0\''] = [1, null, (object) [null], '+0.0'];
$tests['object[null] <=> \'1.0\''] = [1, null, (object) [null], '1.0'];
$tests['object[null] <=> \'-1.0\''] = [1, null, (object) [null], '-1.0'];
$tests['object[null] <=> \'+1.0\''] = [1, null, (object) [null], '+1.0'];
$tests['object[null] <=> \'-1\''] = [1, null, (object) [null], '-1'];
$tests['object[null] <=> \'+1\''] = [1, null, (object) [null], '+1'];
$tests['object[null] <=> \'1\''] = [1, null, (object) [null], '1'];
$tests['object[null] <=> \' 0\''] = [1, null, (object) [null], ' 0'];
$tests['object[null] <=> \' -0\''] = [1, null, (object) [null], ' -0'];
$tests['object[null] <=> \' +0\''] = [1, null, (object) [null], ' +0'];
$tests['object[null] <=> \' 0\' '] = [1, null, (object) [null], ' 0 '];
$tests['object[null] <=> \' -0\''] = [1, null, (object) [null], ' -0 '];
$tests['object[null] <=> \' +0\''] = [1, null, (object) [null], ' +0 '];
$tests['object[null] <=> \'0\' '] = [1, null, (object) [null], '0 '];
$tests['object[null] <=> \'-0\''] = [1, null, (object) [null], '-0 '];
$tests['object[null] <=> \'+0\''] = [1, null, (object) [null], '+0 '];
$tests['object[null] <=> \' 0.0\''] = [1, null, (object) [null], ' 0.0'];
$tests['object[null] <=> \' -0.0\''] = [1, null, (object) [null], ' -0.0'];
$tests['object[null] <=> \' +0.0\''] = [1, null, (object) [null], ' +0.0'];
$tests['object[null] <=> \' 0.0\' '] = [1, null, (object) [null], ' 0.0 '];
$tests['object[null] <=> \' -0.0\''] = [1, null, (object) [null], ' -0.0 '];
$tests['object[null] <=> \' +0.0\''] = [1, null, (object) [null], ' +0.0 '];
$tests['object[null] <=> \'0.0\' '] = [1, null, (object) [null], '0.0 '];
$tests['object[null] <=> \'-0.0\''] = [1, null, (object) [null], '-0.0 '];
$tests['object[null] <=> \'+0.0\''] = [1, null, (object) [null], '+0.0 '];
$tests['object[null] <=> \'03\''] = [1, null, (object) [null], '03'];
$tests['object[null] <=> \'2abc\''] = [1, null, (object) [null], '2abc'];
$tests['object[null] <=> \'2.5abc\''] = [1, null, (object) [null], '2.5abc'];
$tests['object[null] <=> \'abc2abc\''] = [1, null, (object) [null], 'abc2abc'];
$tests['object[null] <=> \'abc2.5abc\''] = [1, null, (object) [null], 'abc2.5abc'];
$tests['object[null] <=> \'\\0\''] = [1, null, (object) [null], hex2bin('00')];
$tests['object[null] <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [1, null, (object) [null], hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['object[null] <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [1, null, (object) [null], hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['object[null] <=> 12.0000000000001'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [null], 12.0000000000001];
$tests['object[null] <=> 12.000000000000002'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [null], 12.000000000000002];
$tests['object[null] <=> pi'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [null], M_PI];
$tests['object[null] <=> int(max)'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], (object) [null], PHP_INT_MAX];
$tests['object[null] <=> int(min)'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], (object) [null], PHP_INT_MIN];
$tests['object[null] <=> float(epsilon)'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [null], PHP_FLOAT_EPSILON];
$tests['object[null] <=> float(min)'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [null], PHP_FLOAT_MIN];
$tests['object[null] <=> float(max)'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [null], PHP_FLOAT_MAX];
$tests['object[null] <=> float(inf)'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [null], INF];
$tests['object[null] <=> float(-inf)'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [null], -INF];
$tests['object[null] <=> float(nan)'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [null], NAN];
$tests['object[null] <=> $closure1'] = [1, null, (object) [null], $closure1];
$tests['object[null] <=> $closure2'] = [1, null, (object) [null], $closure2];
$tests['object[null] <=> $fh1'] = [1, null, (object) [null], $fh1];
$tests['object[null] <=> $fh2'] = [1, null, (object) [null], $fh2];
$tests['object[null] <=> $proc'] = [1, null, (object) [null], $proc];
$tests['object[null] <=> DateTime(2024-01-01T12:00:00Z)'] = [1, null, (object) [null], unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['object[null] <=> DateTime(2024-01-01T12:00:01Z)'] = [1, null, (object) [null], unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['object[null] <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [1, null, (object) [null], unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['object[null] <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [1, null, (object) [null], unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['object[null] <=> []'] = [1, null, (object) [null], []];
$tests['object[null] <=> [[]]'] = [1, null, (object) [null], [[]]];
$tests['object[null] <=> [1 => []]'] = [1, null, (object) [null], [1 => []]];
$tests['object[null] <=> [1 => null]'] = [1, null, (object) [null], [1 => null]];
$tests['object[null] <=> [0]'] = [1, null, (object) [null], [0]];
$tests['object[null] <=> [0.0]'] = [1, null, (object) [null], [0.0]];
$tests['object[null] <=> [null]'] = [1, null, (object) [null], [null]];
$tests['object[null] <=> [false]'] = [1, null, (object) [null], [false]];
$tests['object[null] <=> [true]'] = [1, null, (object) [null], [true]];
$tests['object[null] <=> [\'\']'] = [1, null, (object) [null], ['']];
$tests['object[null] <=> [a, b, c]'] = [1, null, (object) [null], ['a','b','c']];
$tests['object[null] <=> [$fh1]'] = [1, null, (object) [null], [$fh1]];
$tests['object[null] <=> [foo => bar]'] = [1, null, (object) [null], ['foo' => 'bar']];
$tests['object[null] <=> object[]'] = [1, null, (object) [null], (object) []];
$tests['object[null] <=> object[[]]'] = [0, null, (object) [null], (object) [[]]];
$tests['object[null] <=> object[1 => []]'] = [1, null, (object) [null], (object) [1 => []]];
$tests['object[null] <=> object[1 => null]'] = [1, null, (object) [null], (object) [1 => null]];
$tests['object[null] <=> object[0]'] = [0, null, (object) [null], (object) [0]];
$tests['object[null] <=> object[0.0]'] = [0, null, (object) [null], (object) [0.0]];
$tests['object[null] <=> object[null]'] = [0, null, (object) [null], (object) [null]];
$tests['object[null] <=> object[false]'] = [0, null, (object) [null], (object) [false]];
$tests['object[null] <=> object[true]'] = [-1, null, (object) [null], (object) [true]];
$tests['object[null] <=> object[\'\']'] = [0, null, (object) [null], (object) ['']];
$tests['object[null] <=> object[a, b, c]'] = [-1, null, (object) [null], (object) ['a','b','c']];
$tests['object[null] <=> object[$fh1]'] = [-1, null, (object) [null], (object) [$fh1]];
$tests['object[null] <=> object[foo => bar]'] = [1, null, (object) [null], (object) ['foo' => 'bar']];
$tests['object[false] <=> false'] = [1, null, (object) [false], false];
$tests['object[false] <=> true'] = [0, null, (object) [false], true];
$tests['object[false] <=> null'] = [1, null, (object) [false], null];
$tests['object[false] <=> 0'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], (object) [false], 0];
$tests['object[false] <=> 1'] = [0, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], (object) [false], 1];
$tests['object[false] <=> -1'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], (object) [false], -1];
$tests['object[false] <=> 0.0'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [false], 0.0];
$tests['object[false] <=> -1.0'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [false], -1.0];
$tests['object[false] <=> 1.0'] = [0, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [false], 1.0];
$tests['object[false] <=> \'\''] = [1, null, (object) [false], ''];
$tests['object[false] <=> \'0\''] = [1, null, (object) [false], '0'];
$tests['object[false] <=> \'-0\''] = [1, null, (object) [false], '-0'];
$tests['object[false] <=> \'+0\''] = [1, null, (object) [false], '+0'];
$tests['object[false] <=> \'0.0\''] = [1, null, (object) [false], '0.0'];
$tests['object[false] <=> \'-0.0\''] = [1, null, (object) [false], '-0.0'];
$tests['object[false] <=> \'+0.0\''] = [1, null, (object) [false], '+0.0'];
$tests['object[false] <=> \'1.0\''] = [1, null, (object) [false], '1.0'];
$tests['object[false] <=> \'-1.0\''] = [1, null, (object) [false], '-1.0'];
$tests['object[false] <=> \'+1.0\''] = [1, null, (object) [false], '+1.0'];
$tests['object[false] <=> \'-1\''] = [1, null, (object) [false], '-1'];
$tests['object[false] <=> \'+1\''] = [1, null, (object) [false], '+1'];
$tests['object[false] <=> \'1\''] = [1, null, (object) [false], '1'];
$tests['object[false] <=> \' 0\''] = [1, null, (object) [false], ' 0'];
$tests['object[false] <=> \' -0\''] = [1, null, (object) [false], ' -0'];
$tests['object[false] <=> \' +0\''] = [1, null, (object) [false], ' +0'];
$tests['object[false] <=> \' 0\' '] = [1, null, (object) [false], ' 0 '];
$tests['object[false] <=> \' -0\''] = [1, null, (object) [false], ' -0 '];
$tests['object[false] <=> \' +0\''] = [1, null, (object) [false], ' +0 '];
$tests['object[false] <=> \'0\' '] = [1, null, (object) [false], '0 '];
$tests['object[false] <=> \'-0\''] = [1, null, (object) [false], '-0 '];
$tests['object[false] <=> \'+0\''] = [1, null, (object) [false], '+0 '];
$tests['object[false] <=> \' 0.0\''] = [1, null, (object) [false], ' 0.0'];
$tests['object[false] <=> \' -0.0\''] = [1, null, (object) [false], ' -0.0'];
$tests['object[false] <=> \' +0.0\''] = [1, null, (object) [false], ' +0.0'];
$tests['object[false] <=> \' 0.0\' '] = [1, null, (object) [false], ' 0.0 '];
$tests['object[false] <=> \' -0.0\''] = [1, null, (object) [false], ' -0.0 '];
$tests['object[false] <=> \' +0.0\''] = [1, null, (object) [false], ' +0.0 '];
$tests['object[false] <=> \'0.0\' '] = [1, null, (object) [false], '0.0 '];
$tests['object[false] <=> \'-0.0\''] = [1, null, (object) [false], '-0.0 '];
$tests['object[false] <=> \'+0.0\''] = [1, null, (object) [false], '+0.0 '];
$tests['object[false] <=> \'03\''] = [1, null, (object) [false], '03'];
$tests['object[false] <=> \'2abc\''] = [1, null, (object) [false], '2abc'];
$tests['object[false] <=> \'2.5abc\''] = [1, null, (object) [false], '2.5abc'];
$tests['object[false] <=> \'abc2abc\''] = [1, null, (object) [false], 'abc2abc'];
$tests['object[false] <=> \'abc2.5abc\''] = [1, null, (object) [false], 'abc2.5abc'];
$tests['object[false] <=> \'\\0\''] = [1, null, (object) [false], hex2bin('00')];
$tests['object[false] <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [1, null, (object) [false], hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['object[false] <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [1, null, (object) [false], hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['object[false] <=> 12.0000000000001'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [false], 12.0000000000001];
$tests['object[false] <=> 12.000000000000002'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [false], 12.000000000000002];
$tests['object[false] <=> pi'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [false], M_PI];
$tests['object[false] <=> int(max)'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], (object) [false], PHP_INT_MAX];
$tests['object[false] <=> int(min)'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], (object) [false], PHP_INT_MIN];
$tests['object[false] <=> float(epsilon)'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [false], PHP_FLOAT_EPSILON];
$tests['object[false] <=> float(min)'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [false], PHP_FLOAT_MIN];
$tests['object[false] <=> float(max)'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [false], PHP_FLOAT_MAX];
$tests['object[false] <=> float(inf)'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [false], INF];
$tests['object[false] <=> float(-inf)'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [false], -INF];
$tests['object[false] <=> float(nan)'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [false], NAN];
$tests['object[false] <=> $closure1'] = [1, null, (object) [false], $closure1];
$tests['object[false] <=> $closure2'] = [1, null, (object) [false], $closure2];
$tests['object[false] <=> $fh1'] = [1, null, (object) [false], $fh1];
$tests['object[false] <=> $fh2'] = [1, null, (object) [false], $fh2];
$tests['object[false] <=> $proc'] = [1, null, (object) [false], $proc];
$tests['object[false] <=> DateTime(2024-01-01T12:00:00Z)'] = [1, null, (object) [false], unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['object[false] <=> DateTime(2024-01-01T12:00:01Z)'] = [1, null, (object) [false], unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['object[false] <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [1, null, (object) [false], unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['object[false] <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [1, null, (object) [false], unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['object[false] <=> []'] = [1, null, (object) [false], []];
$tests['object[false] <=> [[]]'] = [1, null, (object) [false], [[]]];
$tests['object[false] <=> [1 => []]'] = [1, null, (object) [false], [1 => []]];
$tests['object[false] <=> [1 => null]'] = [1, null, (object) [false], [1 => null]];
$tests['object[false] <=> [0]'] = [1, null, (object) [false], [0]];
$tests['object[false] <=> [0.0]'] = [1, null, (object) [false], [0.0]];
$tests['object[false] <=> [null]'] = [1, null, (object) [false], [null]];
$tests['object[false] <=> [false]'] = [1, null, (object) [false], [false]];
$tests['object[false] <=> [true]'] = [1, null, (object) [false], [true]];
$tests['object[false] <=> [\'\']'] = [1, null, (object) [false], ['']];
$tests['object[false] <=> [a, b, c]'] = [1, null, (object) [false], ['a','b','c']];
$tests['object[false] <=> [$fh1]'] = [1, null, (object) [false], [$fh1]];
$tests['object[false] <=> [foo => bar]'] = [1, null, (object) [false], ['foo' => 'bar']];
$tests['object[false] <=> object[]'] = [1, null, (object) [false], (object) []];
$tests['object[false] <=> object[[]]'] = [0, null, (object) [false], (object) [[]]];
$tests['object[false] <=> object[1 => []]'] = [1, null, (object) [false], (object) [1 => []]];
$tests['object[false] <=> object[1 => null]'] = [1, null, (object) [false], (object) [1 => null]];
$tests['object[false] <=> object[0]'] = [0, null, (object) [false], (object) [0]];
$tests['object[false] <=> object[0.0]'] = [0, null, (object) [false], (object) [0.0]];
$tests['object[false] <=> object[null]'] = [0, null, (object) [false], (object) [null]];
$tests['object[false] <=> object[false]'] = [0, null, (object) [false], (object) [false]];
$tests['object[false] <=> object[true]'] = [-1, null, (object) [false], (object) [true]];
$tests['object[false] <=> object[\'\']'] = [0, null, (object) [false], (object) ['']];
$tests['object[false] <=> object[a, b, c]'] = [-1, null, (object) [false], (object) ['a','b','c']];
$tests['object[false] <=> object[$fh1]'] = [-1, null, (object) [false], (object) [$fh1]];
$tests['object[false] <=> object[foo => bar]'] = [1, null, (object) [false], (object) ['foo' => 'bar']];
$tests['object[true] <=> false'] = [1, null, (object) [true], false];
$tests['object[true] <=> true'] = [0, null, (object) [true], true];
$tests['object[true] <=> null'] = [1, null, (object) [true], null];
$tests['object[true] <=> 0'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], (object) [true], 0];
$tests['object[true] <=> 1'] = [0, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], (object) [true], 1];
$tests['object[true] <=> -1'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], (object) [true], -1];
$tests['object[true] <=> 0.0'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [true], 0.0];
$tests['object[true] <=> -1.0'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [true], -1.0];
$tests['object[true] <=> 1.0'] = [0, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [true], 1.0];
$tests['object[true] <=> \'\''] = [1, null, (object) [true], ''];
$tests['object[true] <=> \'0\''] = [1, null, (object) [true], '0'];
$tests['object[true] <=> \'-0\''] = [1, null, (object) [true], '-0'];
$tests['object[true] <=> \'+0\''] = [1, null, (object) [true], '+0'];
$tests['object[true] <=> \'0.0\''] = [1, null, (object) [true], '0.0'];
$tests['object[true] <=> \'-0.0\''] = [1, null, (object) [true], '-0.0'];
$tests['object[true] <=> \'+0.0\''] = [1, null, (object) [true], '+0.0'];
$tests['object[true] <=> \'1.0\''] = [1, null, (object) [true], '1.0'];
$tests['object[true] <=> \'-1.0\''] = [1, null, (object) [true], '-1.0'];
$tests['object[true] <=> \'+1.0\''] = [1, null, (object) [true], '+1.0'];
$tests['object[true] <=> \'-1\''] = [1, null, (object) [true], '-1'];
$tests['object[true] <=> \'+1\''] = [1, null, (object) [true], '+1'];
$tests['object[true] <=> \'1\''] = [1, null, (object) [true], '1'];
$tests['object[true] <=> \' 0\''] = [1, null, (object) [true], ' 0'];
$tests['object[true] <=> \' -0\''] = [1, null, (object) [true], ' -0'];
$tests['object[true] <=> \' +0\''] = [1, null, (object) [true], ' +0'];
$tests['object[true] <=> \' 0\' '] = [1, null, (object) [true], ' 0 '];
$tests['object[true] <=> \' -0\''] = [1, null, (object) [true], ' -0 '];
$tests['object[true] <=> \' +0\''] = [1, null, (object) [true], ' +0 '];
$tests['object[true] <=> \'0\' '] = [1, null, (object) [true], '0 '];
$tests['object[true] <=> \'-0\''] = [1, null, (object) [true], '-0 '];
$tests['object[true] <=> \'+0\''] = [1, null, (object) [true], '+0 '];
$tests['object[true] <=> \' 0.0\''] = [1, null, (object) [true], ' 0.0'];
$tests['object[true] <=> \' -0.0\''] = [1, null, (object) [true], ' -0.0'];
$tests['object[true] <=> \' +0.0\''] = [1, null, (object) [true], ' +0.0'];
$tests['object[true] <=> \' 0.0\' '] = [1, null, (object) [true], ' 0.0 '];
$tests['object[true] <=> \' -0.0\''] = [1, null, (object) [true], ' -0.0 '];
$tests['object[true] <=> \' +0.0\''] = [1, null, (object) [true], ' +0.0 '];
$tests['object[true] <=> \'0.0\' '] = [1, null, (object) [true], '0.0 '];
$tests['object[true] <=> \'-0.0\''] = [1, null, (object) [true], '-0.0 '];
$tests['object[true] <=> \'+0.0\''] = [1, null, (object) [true], '+0.0 '];
$tests['object[true] <=> \'03\''] = [1, null, (object) [true], '03'];
$tests['object[true] <=> \'2abc\''] = [1, null, (object) [true], '2abc'];
$tests['object[true] <=> \'2.5abc\''] = [1, null, (object) [true], '2.5abc'];
$tests['object[true] <=> \'abc2abc\''] = [1, null, (object) [true], 'abc2abc'];
$tests['object[true] <=> \'abc2.5abc\''] = [1, null, (object) [true], 'abc2.5abc'];
$tests['object[true] <=> \'\\0\''] = [1, null, (object) [true], hex2bin('00')];
$tests['object[true] <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [1, null, (object) [true], hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['object[true] <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [1, null, (object) [true], hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['object[true] <=> 12.0000000000001'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [true], 12.0000000000001];
$tests['object[true] <=> 12.000000000000002'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [true], 12.000000000000002];
$tests['object[true] <=> pi'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [true], M_PI];
$tests['object[true] <=> int(max)'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], (object) [true], PHP_INT_MAX];
$tests['object[true] <=> int(min)'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], (object) [true], PHP_INT_MIN];
$tests['object[true] <=> float(epsilon)'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [true], PHP_FLOAT_EPSILON];
$tests['object[true] <=> float(min)'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [true], PHP_FLOAT_MIN];
$tests['object[true] <=> float(max)'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [true], PHP_FLOAT_MAX];
$tests['object[true] <=> float(inf)'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [true], INF];
$tests['object[true] <=> float(-inf)'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [true], -INF];
$tests['object[true] <=> float(nan)'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [true], NAN];
$tests['object[true] <=> $closure1'] = [1, null, (object) [true], $closure1];
$tests['object[true] <=> $closure2'] = [1, null, (object) [true], $closure2];
$tests['object[true] <=> $fh1'] = [1, null, (object) [true], $fh1];
$tests['object[true] <=> $fh2'] = [1, null, (object) [true], $fh2];
$tests['object[true] <=> $proc'] = [1, null, (object) [true], $proc];
$tests['object[true] <=> DateTime(2024-01-01T12:00:00Z)'] = [1, null, (object) [true], unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['object[true] <=> DateTime(2024-01-01T12:00:01Z)'] = [1, null, (object) [true], unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['object[true] <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [1, null, (object) [true], unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['object[true] <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [1, null, (object) [true], unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['object[true] <=> []'] = [1, null, (object) [true], []];
$tests['object[true] <=> [[]]'] = [1, null, (object) [true], [[]]];
$tests['object[true] <=> [1 => []]'] = [1, null, (object) [true], [1 => []]];
$tests['object[true] <=> [1 => null]'] = [1, null, (object) [true], [1 => null]];
$tests['object[true] <=> [0]'] = [1, null, (object) [true], [0]];
$tests['object[true] <=> [0.0]'] = [1, null, (object) [true], [0.0]];
$tests['object[true] <=> [null]'] = [1, null, (object) [true], [null]];
$tests['object[true] <=> [false]'] = [1, null, (object) [true], [false]];
$tests['object[true] <=> [true]'] = [1, null, (object) [true], [true]];
$tests['object[true] <=> [\'\']'] = [1, null, (object) [true], ['']];
$tests['object[true] <=> [a, b, c]'] = [1, null, (object) [true], ['a','b','c']];
$tests['object[true] <=> [$fh1]'] = [1, null, (object) [true], [$fh1]];
$tests['object[true] <=> [foo => bar]'] = [1, null, (object) [true], ['foo' => 'bar']];
$tests['object[true] <=> object[]'] = [1, null, (object) [true], (object) []];
$tests['object[true] <=> object[[]]'] = [1, null, (object) [true], (object) [[]]];
$tests['object[true] <=> object[1 => []]'] = [1, null, (object) [true], (object) [1 => []]];
$tests['object[true] <=> object[1 => null]'] = [1, null, (object) [true], (object) [1 => null]];
$tests['object[true] <=> object[0]'] = [1, null, (object) [true], (object) [0]];
$tests['object[true] <=> object[0.0]'] = [1, null, (object) [true], (object) [0.0]];
$tests['object[true] <=> object[null]'] = [1, null, (object) [true], (object) [null]];
$tests['object[true] <=> object[false]'] = [1, null, (object) [true], (object) [false]];
$tests['object[true] <=> object[true]'] = [0, null, (object) [true], (object) [true]];
$tests['object[true] <=> object[\'\']'] = [1, null, (object) [true], (object) ['']];
$tests['object[true] <=> object[a, b, c]'] = [-1, null, (object) [true], (object) ['a','b','c']];
$tests['object[true] <=> object[$fh1]'] = [0, null, (object) [true], (object) [$fh1]];
$tests['object[true] <=> object[foo => bar]'] = [1, null, (object) [true], (object) ['foo' => 'bar']];
$tests['object[\'\'] <=> false'] = [1, null, (object) [''], false];
$tests['object[\'\'] <=> true'] = [0, null, (object) [''], true];
$tests['object[\'\'] <=> null'] = [1, null, (object) [''], null];
$tests['object[\'\'] <=> 0'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], (object) [''], 0];
$tests['object[\'\'] <=> 1'] = [0, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], (object) [''], 1];
$tests['object[\'\'] <=> -1'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], (object) [''], -1];
$tests['object[\'\'] <=> 0.0'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [''], 0.0];
$tests['object[\'\'] <=> -1.0'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [''], -1.0];
$tests['object[\'\'] <=> 1.0'] = [0, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [''], 1.0];
$tests['object[\'\'] <=> \'\''] = [1, null, (object) [''], ''];
$tests['object[\'\'] <=> \'0\''] = [1, null, (object) [''], '0'];
$tests['object[\'\'] <=> \'-0\''] = [1, null, (object) [''], '-0'];
$tests['object[\'\'] <=> \'+0\''] = [1, null, (object) [''], '+0'];
$tests['object[\'\'] <=> \'0.0\''] = [1, null, (object) [''], '0.0'];
$tests['object[\'\'] <=> \'-0.0\''] = [1, null, (object) [''], '-0.0'];
$tests['object[\'\'] <=> \'+0.0\''] = [1, null, (object) [''], '+0.0'];
$tests['object[\'\'] <=> \'1.0\''] = [1, null, (object) [''], '1.0'];
$tests['object[\'\'] <=> \'-1.0\''] = [1, null, (object) [''], '-1.0'];
$tests['object[\'\'] <=> \'+1.0\''] = [1, null, (object) [''], '+1.0'];
$tests['object[\'\'] <=> \'-1\''] = [1, null, (object) [''], '-1'];
$tests['object[\'\'] <=> \'+1\''] = [1, null, (object) [''], '+1'];
$tests['object[\'\'] <=> \'1\''] = [1, null, (object) [''], '1'];
$tests['object[\'\'] <=> \' 0\''] = [1, null, (object) [''], ' 0'];
$tests['object[\'\'] <=> \' -0\''] = [1, null, (object) [''], ' -0'];
$tests['object[\'\'] <=> \' +0\''] = [1, null, (object) [''], ' +0'];
$tests['object[\'\'] <=> \' 0\' '] = [1, null, (object) [''], ' 0 '];
$tests['object[\'\'] <=> \' -0\''] = [1, null, (object) [''], ' -0 '];
$tests['object[\'\'] <=> \' +0\''] = [1, null, (object) [''], ' +0 '];
$tests['object[\'\'] <=> \'0\' '] = [1, null, (object) [''], '0 '];
$tests['object[\'\'] <=> \'-0\''] = [1, null, (object) [''], '-0 '];
$tests['object[\'\'] <=> \'+0\''] = [1, null, (object) [''], '+0 '];
$tests['object[\'\'] <=> \' 0.0\''] = [1, null, (object) [''], ' 0.0'];
$tests['object[\'\'] <=> \' -0.0\''] = [1, null, (object) [''], ' -0.0'];
$tests['object[\'\'] <=> \' +0.0\''] = [1, null, (object) [''], ' +0.0'];
$tests['object[\'\'] <=> \' 0.0\' '] = [1, null, (object) [''], ' 0.0 '];
$tests['object[\'\'] <=> \' -0.0\''] = [1, null, (object) [''], ' -0.0 '];
$tests['object[\'\'] <=> \' +0.0\''] = [1, null, (object) [''], ' +0.0 '];
$tests['object[\'\'] <=> \'0.0\' '] = [1, null, (object) [''], '0.0 '];
$tests['object[\'\'] <=> \'-0.0\''] = [1, null, (object) [''], '-0.0 '];
$tests['object[\'\'] <=> \'+0.0\''] = [1, null, (object) [''], '+0.0 '];
$tests['object[\'\'] <=> \'03\''] = [1, null, (object) [''], '03'];
$tests['object[\'\'] <=> \'2abc\''] = [1, null, (object) [''], '2abc'];
$tests['object[\'\'] <=> \'2.5abc\''] = [1, null, (object) [''], '2.5abc'];
$tests['object[\'\'] <=> \'abc2abc\''] = [1, null, (object) [''], 'abc2abc'];
$tests['object[\'\'] <=> \'abc2.5abc\''] = [1, null, (object) [''], 'abc2.5abc'];
$tests['object[\'\'] <=> \'\\0\''] = [1, null, (object) [''], hex2bin('00')];
$tests['object[\'\'] <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [1, null, (object) [''], hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['object[\'\'] <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [1, null, (object) [''], hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['object[\'\'] <=> 12.0000000000001'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [''], 12.0000000000001];
$tests['object[\'\'] <=> 12.000000000000002'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [''], 12.000000000000002];
$tests['object[\'\'] <=> pi'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [''], M_PI];
$tests['object[\'\'] <=> int(max)'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], (object) [''], PHP_INT_MAX];
$tests['object[\'\'] <=> int(min)'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], (object) [''], PHP_INT_MIN];
$tests['object[\'\'] <=> float(epsilon)'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [''], PHP_FLOAT_EPSILON];
$tests['object[\'\'] <=> float(min)'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [''], PHP_FLOAT_MIN];
$tests['object[\'\'] <=> float(max)'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [''], PHP_FLOAT_MAX];
$tests['object[\'\'] <=> float(inf)'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [''], INF];
$tests['object[\'\'] <=> float(-inf)'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [''], -INF];
$tests['object[\'\'] <=> float(nan)'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [''], NAN];
$tests['object[\'\'] <=> $closure1'] = [1, null, (object) [''], $closure1];
$tests['object[\'\'] <=> $closure2'] = [1, null, (object) [''], $closure2];
$tests['object[\'\'] <=> $fh1'] = [1, null, (object) [''], $fh1];
$tests['object[\'\'] <=> $fh2'] = [1, null, (object) [''], $fh2];
$tests['object[\'\'] <=> $proc'] = [1, null, (object) [''], $proc];
$tests['object[\'\'] <=> DateTime(2024-01-01T12:00:00Z)'] = [1, null, (object) [''], unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['object[\'\'] <=> DateTime(2024-01-01T12:00:01Z)'] = [1, null, (object) [''], unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['object[\'\'] <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [1, null, (object) [''], unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['object[\'\'] <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [1, null, (object) [''], unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['object[\'\'] <=> []'] = [1, null, (object) [''], []];
$tests['object[\'\'] <=> [[]]'] = [1, null, (object) [''], [[]]];
$tests['object[\'\'] <=> [1 => []]'] = [1, null, (object) [''], [1 => []]];
$tests['object[\'\'] <=> [1 => null]'] = [1, null, (object) [''], [1 => null]];
$tests['object[\'\'] <=> [0]'] = [1, null, (object) [''], [0]];
$tests['object[\'\'] <=> [0.0]'] = [1, null, (object) [''], [0.0]];
$tests['object[\'\'] <=> [null]'] = [1, null, (object) [''], [null]];
$tests['object[\'\'] <=> [false]'] = [1, null, (object) [''], [false]];
$tests['object[\'\'] <=> [true]'] = [1, null, (object) [''], [true]];
$tests['object[\'\'] <=> [\'\']'] = [1, null, (object) [''], ['']];
$tests['object[\'\'] <=> [a, b, c]'] = [1, null, (object) [''], ['a','b','c']];
$tests['object[\'\'] <=> [$fh1]'] = [1, null, (object) [''], [$fh1]];
$tests['object[\'\'] <=> [foo => bar]'] = [1, null, (object) [''], ['foo' => 'bar']];
$tests['object[\'\'] <=> object[]'] = [1, null, (object) [''], (object) []];
$tests['object[\'\'] <=> object[[]]'] = [-1, null, (object) [''], (object) [[]]];
$tests['object[\'\'] <=> object[1 => []]'] = [1, null, (object) [''], (object) [1 => []]];
$tests['object[\'\'] <=> object[1 => null]'] = [1, null, (object) [''], (object) [1 => null]];
$tests['object[\'\'] <=> object[0]'] = [-1, null, (object) [''], (object) [0]];
$tests['object[\'\'] <=> object[0.0]'] = [-1, null, (object) [''], (object) [0.0]];
$tests['object[\'\'] <=> object[null]'] = [0, null, (object) [''], (object) [null]];
$tests['object[\'\'] <=> object[false]'] = [0, null, (object) [''], (object) [false]];
$tests['object[\'\'] <=> object[true]'] = [-1, null, (object) [''], (object) [true]];
$tests['object[\'\'] <=> object[\'\']'] = [0, null, (object) [''], (object) ['']];
$tests['object[\'\'] <=> object[a, b, c]'] = [-1, null, (object) [''], (object) ['a','b','c']];
$tests['object[\'\'] <=> object[$fh1]'] = [-1, null, (object) [''], (object) [$fh1]];
$tests['object[\'\'] <=> object[foo => bar]'] = [1, null, (object) [''], (object) ['foo' => 'bar']];
$tests['object[a, b, c] <=> false'] = [1, null, (object) ['a','b','c'], false];
$tests['object[a, b, c] <=> true'] = [0, null, (object) ['a','b','c'], true];
$tests['object[a, b, c] <=> null'] = [1, null, (object) ['a','b','c'], null];
$tests['object[a, b, c] <=> 0'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], (object) ['a','b','c'], 0];
$tests['object[a, b, c] <=> 1'] = [0, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], (object) ['a','b','c'], 1];
$tests['object[a, b, c] <=> -1'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], (object) ['a','b','c'], -1];
$tests['object[a, b, c] <=> 0.0'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) ['a','b','c'], 0.0];
$tests['object[a, b, c] <=> -1.0'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) ['a','b','c'], -1.0];
$tests['object[a, b, c] <=> 1.0'] = [0, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) ['a','b','c'], 1.0];
$tests['object[a, b, c] <=> \'\''] = [1, null, (object) ['a','b','c'], ''];
$tests['object[a, b, c] <=> \'0\''] = [1, null, (object) ['a','b','c'], '0'];
$tests['object[a, b, c] <=> \'-0\''] = [1, null, (object) ['a','b','c'], '-0'];
$tests['object[a, b, c] <=> \'+0\''] = [1, null, (object) ['a','b','c'], '+0'];
$tests['object[a, b, c] <=> \'0.0\''] = [1, null, (object) ['a','b','c'], '0.0'];
$tests['object[a, b, c] <=> \'-0.0\''] = [1, null, (object) ['a','b','c'], '-0.0'];
$tests['object[a, b, c] <=> \'+0.0\''] = [1, null, (object) ['a','b','c'], '+0.0'];
$tests['object[a, b, c] <=> \'1.0\''] = [1, null, (object) ['a','b','c'], '1.0'];
$tests['object[a, b, c] <=> \'-1.0\''] = [1, null, (object) ['a','b','c'], '-1.0'];
$tests['object[a, b, c] <=> \'+1.0\''] = [1, null, (object) ['a','b','c'], '+1.0'];
$tests['object[a, b, c] <=> \'-1\''] = [1, null, (object) ['a','b','c'], '-1'];
$tests['object[a, b, c] <=> \'+1\''] = [1, null, (object) ['a','b','c'], '+1'];
$tests['object[a, b, c] <=> \'1\''] = [1, null, (object) ['a','b','c'], '1'];
$tests['object[a, b, c] <=> \' 0\''] = [1, null, (object) ['a','b','c'], ' 0'];
$tests['object[a, b, c] <=> \' -0\''] = [1, null, (object) ['a','b','c'], ' -0'];
$tests['object[a, b, c] <=> \' +0\''] = [1, null, (object) ['a','b','c'], ' +0'];
$tests['object[a, b, c] <=> \' 0\' '] = [1, null, (object) ['a','b','c'], ' 0 '];
$tests['object[a, b, c] <=> \' -0\''] = [1, null, (object) ['a','b','c'], ' -0 '];
$tests['object[a, b, c] <=> \' +0\''] = [1, null, (object) ['a','b','c'], ' +0 '];
$tests['object[a, b, c] <=> \'0\' '] = [1, null, (object) ['a','b','c'], '0 '];
$tests['object[a, b, c] <=> \'-0\''] = [1, null, (object) ['a','b','c'], '-0 '];
$tests['object[a, b, c] <=> \'+0\''] = [1, null, (object) ['a','b','c'], '+0 '];
$tests['object[a, b, c] <=> \' 0.0\''] = [1, null, (object) ['a','b','c'], ' 0.0'];
$tests['object[a, b, c] <=> \' -0.0\''] = [1, null, (object) ['a','b','c'], ' -0.0'];
$tests['object[a, b, c] <=> \' +0.0\''] = [1, null, (object) ['a','b','c'], ' +0.0'];
$tests['object[a, b, c] <=> \' 0.0\' '] = [1, null, (object) ['a','b','c'], ' 0.0 '];
$tests['object[a, b, c] <=> \' -0.0\''] = [1, null, (object) ['a','b','c'], ' -0.0 '];
$tests['object[a, b, c] <=> \' +0.0\''] = [1, null, (object) ['a','b','c'], ' +0.0 '];
$tests['object[a, b, c] <=> \'0.0\' '] = [1, null, (object) ['a','b','c'], '0.0 '];
$tests['object[a, b, c] <=> \'-0.0\''] = [1, null, (object) ['a','b','c'], '-0.0 '];
$tests['object[a, b, c] <=> \'+0.0\''] = [1, null, (object) ['a','b','c'], '+0.0 '];
$tests['object[a, b, c] <=> \'03\''] = [1, null, (object) ['a','b','c'], '03'];
$tests['object[a, b, c] <=> \'2abc\''] = [1, null, (object) ['a','b','c'], '2abc'];
$tests['object[a, b, c] <=> \'2.5abc\''] = [1, null, (object) ['a','b','c'], '2.5abc'];
$tests['object[a, b, c] <=> \'abc2abc\''] = [1, null, (object) ['a','b','c'], 'abc2abc'];
$tests['object[a, b, c] <=> \'abc2.5abc\''] = [1, null, (object) ['a','b','c'], 'abc2.5abc'];
$tests['object[a, b, c] <=> \'\\0\''] = [1, null, (object) ['a','b','c'], hex2bin('00')];
$tests['object[a, b, c] <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [1, null, (object) ['a','b','c'], hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['object[a, b, c] <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [1, null, (object) ['a','b','c'], hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['object[a, b, c] <=> 12.0000000000001'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) ['a','b','c'], 12.0000000000001];
$tests['object[a, b, c] <=> 12.000000000000002'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) ['a','b','c'], 12.000000000000002];
$tests['object[a, b, c] <=> pi'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) ['a','b','c'], M_PI];
$tests['object[a, b, c] <=> int(max)'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], (object) ['a','b','c'], PHP_INT_MAX];
$tests['object[a, b, c] <=> int(min)'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], (object) ['a','b','c'], PHP_INT_MIN];
$tests['object[a, b, c] <=> float(epsilon)'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) ['a','b','c'], PHP_FLOAT_EPSILON];
$tests['object[a, b, c] <=> float(min)'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) ['a','b','c'], PHP_FLOAT_MIN];
$tests['object[a, b, c] <=> float(max)'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) ['a','b','c'], PHP_FLOAT_MAX];
$tests['object[a, b, c] <=> float(inf)'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) ['a','b','c'], INF];
$tests['object[a, b, c] <=> float(-inf)'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) ['a','b','c'], -INF];
$tests['object[a, b, c] <=> float(nan)'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) ['a','b','c'], NAN];
$tests['object[a, b, c] <=> $closure1'] = [1, null, (object) ['a','b','c'], $closure1];
$tests['object[a, b, c] <=> $closure2'] = [1, null, (object) ['a','b','c'], $closure2];
$tests['object[a, b, c] <=> $fh1'] = [1, null, (object) ['a','b','c'], $fh1];
$tests['object[a, b, c] <=> $fh2'] = [1, null, (object) ['a','b','c'], $fh2];
$tests['object[a, b, c] <=> $proc'] = [1, null, (object) ['a','b','c'], $proc];
$tests['object[a, b, c] <=> DateTime(2024-01-01T12:00:00Z)'] = [1, null, (object) ['a','b','c'], unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['object[a, b, c] <=> DateTime(2024-01-01T12:00:01Z)'] = [1, null, (object) ['a','b','c'], unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['object[a, b, c] <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [1, null, (object) ['a','b','c'], unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['object[a, b, c] <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [1, null, (object) ['a','b','c'], unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['object[a, b, c] <=> []'] = [1, null, (object) ['a','b','c'], []];
$tests['object[a, b, c] <=> [[]]'] = [1, null, (object) ['a','b','c'], [[]]];
$tests['object[a, b, c] <=> [1 => []]'] = [1, null, (object) ['a','b','c'], [1 => []]];
$tests['object[a, b, c] <=> [1 => null]'] = [1, null, (object) ['a','b','c'], [1 => null]];
$tests['object[a, b, c] <=> [0]'] = [1, null, (object) ['a','b','c'], [0]];
$tests['object[a, b, c] <=> [0.0]'] = [1, null, (object) ['a','b','c'], [0.0]];
$tests['object[a, b, c] <=> [null]'] = [1, null, (object) ['a','b','c'], [null]];
$tests['object[a, b, c] <=> [false]'] = [1, null, (object) ['a','b','c'], [false]];
$tests['object[a, b, c] <=> [true]'] = [1, null, (object) ['a','b','c'], [true]];
$tests['object[a, b, c] <=> [\'\']'] = [1, null, (object) ['a','b','c'], ['']];
$tests['object[a, b, c] <=> [a, b, c]'] = [1, null, (object) ['a','b','c'], ['a','b','c']];
$tests['object[a, b, c] <=> [$fh1]'] = [1, null, (object) ['a','b','c'], [$fh1]];
$tests['object[a, b, c] <=> [foo => bar]'] = [1, null, (object) ['a','b','c'], ['foo' => 'bar']];
$tests['object[a, b, c] <=> object[]'] = [1, null, (object) ['a','b','c'], (object) []];
$tests['object[a, b, c] <=> object[[]]'] = [1, null, (object) ['a','b','c'], (object) [[]]];
$tests['object[a, b, c] <=> object[1 => []]'] = [1, null, (object) ['a','b','c'], (object) [1 => []]];
$tests['object[a, b, c] <=> object[1 => null]'] = [1, null, (object) ['a','b','c'], (object) [1 => null]];
$tests['object[a, b, c] <=> object[0]'] = [1, null, (object) ['a','b','c'], (object) [0]];
$tests['object[a, b, c] <=> object[0.0]'] = [1, null, (object) ['a','b','c'], (object) [0.0]];
$tests['object[a, b, c] <=> object[null]'] = [1, null, (object) ['a','b','c'], (object) [null]];
$tests['object[a, b, c] <=> object[false]'] = [1, null, (object) ['a','b','c'], (object) [false]];
$tests['object[a, b, c] <=> object[true]'] = [1, null, (object) ['a','b','c'], (object) [true]];
$tests['object[a, b, c] <=> object[\'\']'] = [1, null, (object) ['a','b','c'], (object) ['']];
$tests['object[a, b, c] <=> object[a, b, c]'] = [0, null, (object) ['a','b','c'], (object) ['a','b','c']];
$tests['object[a, b, c] <=> object[$fh1]'] = [1, null, (object) ['a','b','c'], (object) [$fh1]];
$tests['object[a, b, c] <=> object[foo => bar]'] = [1, null, (object) ['a','b','c'], (object) ['foo' => 'bar']];
$tests['object[$fh1] <=> false'] = [1, null, (object) [$fh1], false];
$tests['object[$fh1] <=> true'] = [0, null, (object) [$fh1], true];
$tests['object[$fh1] <=> null'] = [1, null, (object) [$fh1], null];
$tests['object[$fh1] <=> 0'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], (object) [$fh1], 0];
$tests['object[$fh1] <=> 1'] = [0, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], (object) [$fh1], 1];
$tests['object[$fh1] <=> -1'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], (object) [$fh1], -1];
$tests['object[$fh1] <=> 0.0'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [$fh1], 0.0];
$tests['object[$fh1] <=> -1.0'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [$fh1], -1.0];
$tests['object[$fh1] <=> 1.0'] = [0, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [$fh1], 1.0];
$tests['object[$fh1] <=> \'\''] = [1, null, (object) [$fh1], ''];
$tests['object[$fh1] <=> \'0\''] = [1, null, (object) [$fh1], '0'];
$tests['object[$fh1] <=> \'-0\''] = [1, null, (object) [$fh1], '-0'];
$tests['object[$fh1] <=> \'+0\''] = [1, null, (object) [$fh1], '+0'];
$tests['object[$fh1] <=> \'0.0\''] = [1, null, (object) [$fh1], '0.0'];
$tests['object[$fh1] <=> \'-0.0\''] = [1, null, (object) [$fh1], '-0.0'];
$tests['object[$fh1] <=> \'+0.0\''] = [1, null, (object) [$fh1], '+0.0'];
$tests['object[$fh1] <=> \'1.0\''] = [1, null, (object) [$fh1], '1.0'];
$tests['object[$fh1] <=> \'-1.0\''] = [1, null, (object) [$fh1], '-1.0'];
$tests['object[$fh1] <=> \'+1.0\''] = [1, null, (object) [$fh1], '+1.0'];
$tests['object[$fh1] <=> \'-1\''] = [1, null, (object) [$fh1], '-1'];
$tests['object[$fh1] <=> \'+1\''] = [1, null, (object) [$fh1], '+1'];
$tests['object[$fh1] <=> \'1\''] = [1, null, (object) [$fh1], '1'];
$tests['object[$fh1] <=> \' 0\''] = [1, null, (object) [$fh1], ' 0'];
$tests['object[$fh1] <=> \' -0\''] = [1, null, (object) [$fh1], ' -0'];
$tests['object[$fh1] <=> \' +0\''] = [1, null, (object) [$fh1], ' +0'];
$tests['object[$fh1] <=> \' 0\' '] = [1, null, (object) [$fh1], ' 0 '];
$tests['object[$fh1] <=> \' -0\''] = [1, null, (object) [$fh1], ' -0 '];
$tests['object[$fh1] <=> \' +0\''] = [1, null, (object) [$fh1], ' +0 '];
$tests['object[$fh1] <=> \'0\' '] = [1, null, (object) [$fh1], '0 '];
$tests['object[$fh1] <=> \'-0\''] = [1, null, (object) [$fh1], '-0 '];
$tests['object[$fh1] <=> \'+0\''] = [1, null, (object) [$fh1], '+0 '];
$tests['object[$fh1] <=> \' 0.0\''] = [1, null, (object) [$fh1], ' 0.0'];
$tests['object[$fh1] <=> \' -0.0\''] = [1, null, (object) [$fh1], ' -0.0'];
$tests['object[$fh1] <=> \' +0.0\''] = [1, null, (object) [$fh1], ' +0.0'];
$tests['object[$fh1] <=> \' 0.0\' '] = [1, null, (object) [$fh1], ' 0.0 '];
$tests['object[$fh1] <=> \' -0.0\''] = [1, null, (object) [$fh1], ' -0.0 '];
$tests['object[$fh1] <=> \' +0.0\''] = [1, null, (object) [$fh1], ' +0.0 '];
$tests['object[$fh1] <=> \'0.0\' '] = [1, null, (object) [$fh1], '0.0 '];
$tests['object[$fh1] <=> \'-0.0\''] = [1, null, (object) [$fh1], '-0.0 '];
$tests['object[$fh1] <=> \'+0.0\''] = [1, null, (object) [$fh1], '+0.0 '];
$tests['object[$fh1] <=> \'03\''] = [1, null, (object) [$fh1], '03'];
$tests['object[$fh1] <=> \'2abc\''] = [1, null, (object) [$fh1], '2abc'];
$tests['object[$fh1] <=> \'2.5abc\''] = [1, null, (object) [$fh1], '2.5abc'];
$tests['object[$fh1] <=> \'abc2abc\''] = [1, null, (object) [$fh1], 'abc2abc'];
$tests['object[$fh1] <=> \'abc2.5abc\''] = [1, null, (object) [$fh1], 'abc2.5abc'];
$tests['object[$fh1] <=> \'\\0\''] = [1, null, (object) [$fh1], hex2bin('00')];
$tests['object[$fh1] <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [1, null, (object) [$fh1], hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['object[$fh1] <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [1, null, (object) [$fh1], hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['object[$fh1] <=> 12.0000000000001'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [$fh1], 12.0000000000001];
$tests['object[$fh1] <=> 12.000000000000002'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [$fh1], 12.000000000000002];
$tests['object[$fh1] <=> pi'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [$fh1], M_PI];
$tests['object[$fh1] <=> int(max)'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], (object) [$fh1], PHP_INT_MAX];
$tests['object[$fh1] <=> int(min)'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], (object) [$fh1], PHP_INT_MIN];
$tests['object[$fh1] <=> float(epsilon)'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [$fh1], PHP_FLOAT_EPSILON];
$tests['object[$fh1] <=> float(min)'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [$fh1], PHP_FLOAT_MIN];
$tests['object[$fh1] <=> float(max)'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [$fh1], PHP_FLOAT_MAX];
$tests['object[$fh1] <=> float(inf)'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [$fh1], INF];
$tests['object[$fh1] <=> float(-inf)'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [$fh1], -INF];
$tests['object[$fh1] <=> float(nan)'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) [$fh1], NAN];
$tests['object[$fh1] <=> $closure1'] = [1, null, (object) [$fh1], $closure1];
$tests['object[$fh1] <=> $closure2'] = [1, null, (object) [$fh1], $closure2];
$tests['object[$fh1] <=> $fh1'] = [1, null, (object) [$fh1], $fh1];
$tests['object[$fh1] <=> $fh2'] = [1, null, (object) [$fh1], $fh2];
$tests['object[$fh1] <=> $proc'] = [1, null, (object) [$fh1], $proc];
$tests['object[$fh1] <=> DateTime(2024-01-01T12:00:00Z)'] = [1, null, (object) [$fh1], unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['object[$fh1] <=> DateTime(2024-01-01T12:00:01Z)'] = [1, null, (object) [$fh1], unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['object[$fh1] <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [1, null, (object) [$fh1], unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['object[$fh1] <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [1, null, (object) [$fh1], unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['object[$fh1] <=> []'] = [1, null, (object) [$fh1], []];
$tests['object[$fh1] <=> [[]]'] = [1, null, (object) [$fh1], [[]]];
$tests['object[$fh1] <=> [1 => []]'] = [1, null, (object) [$fh1], [1 => []]];
$tests['object[$fh1] <=> [1 => null]'] = [1, null, (object) [$fh1], [1 => null]];
$tests['object[$fh1] <=> [0]'] = [1, null, (object) [$fh1], [0]];
$tests['object[$fh1] <=> [0.0]'] = [1, null, (object) [$fh1], [0.0]];
$tests['object[$fh1] <=> [null]'] = [1, null, (object) [$fh1], [null]];
$tests['object[$fh1] <=> [false]'] = [1, null, (object) [$fh1], [false]];
$tests['object[$fh1] <=> [true]'] = [1, null, (object) [$fh1], [true]];
$tests['object[$fh1] <=> [\'\']'] = [1, null, (object) [$fh1], ['']];
$tests['object[$fh1] <=> [a, b, c]'] = [1, null, (object) [$fh1], ['a','b','c']];
$tests['object[$fh1] <=> [$fh1]'] = [1, null, (object) [$fh1], [$fh1]];
$tests['object[$fh1] <=> [foo => bar]'] = [1, null, (object) [$fh1], ['foo' => 'bar']];
$tests['object[$fh1] <=> object[]'] = [1, null, (object) [$fh1], (object) []];
$tests['object[$fh1] <=> object[[]]'] = [1, null, (object) [$fh1], (object) [[]]];
$tests['object[$fh1] <=> object[1 => []]'] = [1, null, (object) [$fh1], (object) [1 => []]];
$tests['object[$fh1] <=> object[1 => null]'] = [1, null, (object) [$fh1], (object) [1 => null]];
$tests['object[$fh1] <=> object[0]'] = [1, ['type' => 8,'message' => 'Object of class VarRef could not be converted to int'], (object) [$fh1], (object) [0]];
$tests['object[$fh1] <=> object[0.0]'] = [1, ['type' => 8,'message' => 'Object of class VarRef could not be converted to float'], (object) [$fh1], (object) [0.0]];
$tests['object[$fh1] <=> object[null]'] = [1, null, (object) [$fh1], (object) [null]];
$tests['object[$fh1] <=> object[false]'] = [1, null, (object) [$fh1], (object) [false]];
$tests['object[$fh1] <=> object[true]'] = [0, null, (object) [$fh1], (object) [true]];
$tests['object[$fh1] <=> object[\'\']'] = [1, null, (object) [$fh1], (object) ['']];
$tests['object[$fh1] <=> object[a, b, c]'] = [-1, null, (object) [$fh1], (object) ['a','b','c']];
$tests['object[$fh1] <=> object[$fh1]'] = [0, null, (object) [$fh1], (object) [$fh1]];
$tests['object[$fh1] <=> object[foo => bar]'] = [1, null, (object) [$fh1], (object) ['foo' => 'bar']];
$tests['object[foo => bar] <=> false'] = [1, null, (object) ['foo' => 'bar'], false];
$tests['object[foo => bar] <=> true'] = [0, null, (object) ['foo' => 'bar'], true];
$tests['object[foo => bar] <=> null'] = [1, null, (object) ['foo' => 'bar'], null];
$tests['object[foo => bar] <=> 0'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], (object) ['foo' => 'bar'], 0];
$tests['object[foo => bar] <=> 1'] = [0, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], (object) ['foo' => 'bar'], 1];
$tests['object[foo => bar] <=> -1'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], (object) ['foo' => 'bar'], -1];
$tests['object[foo => bar] <=> 0.0'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) ['foo' => 'bar'], 0.0];
$tests['object[foo => bar] <=> -1.0'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) ['foo' => 'bar'], -1.0];
$tests['object[foo => bar] <=> 1.0'] = [0, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) ['foo' => 'bar'], 1.0];
$tests['object[foo => bar] <=> \'\''] = [1, null, (object) ['foo' => 'bar'], ''];
$tests['object[foo => bar] <=> \'0\''] = [1, null, (object) ['foo' => 'bar'], '0'];
$tests['object[foo => bar] <=> \'-0\''] = [1, null, (object) ['foo' => 'bar'], '-0'];
$tests['object[foo => bar] <=> \'+0\''] = [1, null, (object) ['foo' => 'bar'], '+0'];
$tests['object[foo => bar] <=> \'0.0\''] = [1, null, (object) ['foo' => 'bar'], '0.0'];
$tests['object[foo => bar] <=> \'-0.0\''] = [1, null, (object) ['foo' => 'bar'], '-0.0'];
$tests['object[foo => bar] <=> \'+0.0\''] = [1, null, (object) ['foo' => 'bar'], '+0.0'];
$tests['object[foo => bar] <=> \'1.0\''] = [1, null, (object) ['foo' => 'bar'], '1.0'];
$tests['object[foo => bar] <=> \'-1.0\''] = [1, null, (object) ['foo' => 'bar'], '-1.0'];
$tests['object[foo => bar] <=> \'+1.0\''] = [1, null, (object) ['foo' => 'bar'], '+1.0'];
$tests['object[foo => bar] <=> \'-1\''] = [1, null, (object) ['foo' => 'bar'], '-1'];
$tests['object[foo => bar] <=> \'+1\''] = [1, null, (object) ['foo' => 'bar'], '+1'];
$tests['object[foo => bar] <=> \'1\''] = [1, null, (object) ['foo' => 'bar'], '1'];
$tests['object[foo => bar] <=> \' 0\''] = [1, null, (object) ['foo' => 'bar'], ' 0'];
$tests['object[foo => bar] <=> \' -0\''] = [1, null, (object) ['foo' => 'bar'], ' -0'];
$tests['object[foo => bar] <=> \' +0\''] = [1, null, (object) ['foo' => 'bar'], ' +0'];
$tests['object[foo => bar] <=> \' 0\' '] = [1, null, (object) ['foo' => 'bar'], ' 0 '];
$tests['object[foo => bar] <=> \' -0\''] = [1, null, (object) ['foo' => 'bar'], ' -0 '];
$tests['object[foo => bar] <=> \' +0\''] = [1, null, (object) ['foo' => 'bar'], ' +0 '];
$tests['object[foo => bar] <=> \'0\' '] = [1, null, (object) ['foo' => 'bar'], '0 '];
$tests['object[foo => bar] <=> \'-0\''] = [1, null, (object) ['foo' => 'bar'], '-0 '];
$tests['object[foo => bar] <=> \'+0\''] = [1, null, (object) ['foo' => 'bar'], '+0 '];
$tests['object[foo => bar] <=> \' 0.0\''] = [1, null, (object) ['foo' => 'bar'], ' 0.0'];
$tests['object[foo => bar] <=> \' -0.0\''] = [1, null, (object) ['foo' => 'bar'], ' -0.0'];
$tests['object[foo => bar] <=> \' +0.0\''] = [1, null, (object) ['foo' => 'bar'], ' +0.0'];
$tests['object[foo => bar] <=> \' 0.0\' '] = [1, null, (object) ['foo' => 'bar'], ' 0.0 '];
$tests['object[foo => bar] <=> \' -0.0\''] = [1, null, (object) ['foo' => 'bar'], ' -0.0 '];
$tests['object[foo => bar] <=> \' +0.0\''] = [1, null, (object) ['foo' => 'bar'], ' +0.0 '];
$tests['object[foo => bar] <=> \'0.0\' '] = [1, null, (object) ['foo' => 'bar'], '0.0 '];
$tests['object[foo => bar] <=> \'-0.0\''] = [1, null, (object) ['foo' => 'bar'], '-0.0 '];
$tests['object[foo => bar] <=> \'+0.0\''] = [1, null, (object) ['foo' => 'bar'], '+0.0 '];
$tests['object[foo => bar] <=> \'03\''] = [1, null, (object) ['foo' => 'bar'], '03'];
$tests['object[foo => bar] <=> \'2abc\''] = [1, null, (object) ['foo' => 'bar'], '2abc'];
$tests['object[foo => bar] <=> \'2.5abc\''] = [1, null, (object) ['foo' => 'bar'], '2.5abc'];
$tests['object[foo => bar] <=> \'abc2abc\''] = [1, null, (object) ['foo' => 'bar'], 'abc2abc'];
$tests['object[foo => bar] <=> \'abc2.5abc\''] = [1, null, (object) ['foo' => 'bar'], 'abc2.5abc'];
$tests['object[foo => bar] <=> \'\\0\''] = [1, null, (object) ['foo' => 'bar'], hex2bin('00')];
$tests['object[foo => bar] <=> \'\\t\\n\\r\\v\\f5\\t\\n\\r\\v\\f\''] = [1, null, (object) ['foo' => 'bar'], hex2bin('090a0d0b0c35090a0d0b0c')];
$tests['object[foo => bar] <=> \'\\0\\t\\n\\r\\v\\f5\\0\\t\\n\\r\\v\\f\''] = [1, null, (object) ['foo' => 'bar'], hex2bin('00090a0d0b0c3500090a0d0b0c')];
$tests['object[foo => bar] <=> 12.0000000000001'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) ['foo' => 'bar'], 12.0000000000001];
$tests['object[foo => bar] <=> 12.000000000000002'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) ['foo' => 'bar'], 12.000000000000002];
$tests['object[foo => bar] <=> pi'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) ['foo' => 'bar'], M_PI];
$tests['object[foo => bar] <=> int(max)'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], (object) ['foo' => 'bar'], PHP_INT_MAX];
$tests['object[foo => bar] <=> int(min)'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to int'], (object) ['foo' => 'bar'], PHP_INT_MIN];
$tests['object[foo => bar] <=> float(epsilon)'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) ['foo' => 'bar'], PHP_FLOAT_EPSILON];
$tests['object[foo => bar] <=> float(min)'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) ['foo' => 'bar'], PHP_FLOAT_MIN];
$tests['object[foo => bar] <=> float(max)'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) ['foo' => 'bar'], PHP_FLOAT_MAX];
$tests['object[foo => bar] <=> float(inf)'] = [-1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) ['foo' => 'bar'], INF];
$tests['object[foo => bar] <=> float(-inf)'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) ['foo' => 'bar'], -INF];
$tests['object[foo => bar] <=> float(nan)'] = [1, ['type' => 8,'message' => 'Object of class stdClass could not be converted to float'], (object) ['foo' => 'bar'], NAN];
$tests['object[foo => bar] <=> $closure1'] = [1, null, (object) ['foo' => 'bar'], $closure1];
$tests['object[foo => bar] <=> $closure2'] = [1, null, (object) ['foo' => 'bar'], $closure2];
$tests['object[foo => bar] <=> $fh1'] = [1, null, (object) ['foo' => 'bar'], $fh1];
$tests['object[foo => bar] <=> $fh2'] = [1, null, (object) ['foo' => 'bar'], $fh2];
$tests['object[foo => bar] <=> $proc'] = [1, null, (object) ['foo' => 'bar'], $proc];
$tests['object[foo => bar] <=> DateTime(2024-01-01T12:00:00Z)'] = [1, null, (object) ['foo' => 'bar'], unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['object[foo => bar] <=> DateTime(2024-01-01T12:00:01Z)'] = [1, null, (object) ['foo' => 'bar'], unserialize('O:8:"DateTime":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['object[foo => bar] <=> DateTimeImmutable(2024-01-01T12:00:00Z)'] = [1, null, (object) ['foo' => 'bar'], unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:00.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['object[foo => bar] <=> DateTimeImmutable(2024-01-01T12:00:01Z)'] = [1, null, (object) ['foo' => 'bar'], unserialize('O:17:"DateTimeImmutable":3:{s:4:"date";s:26:"2024-01-01 12:00:01.000000";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"UTC";}')];
$tests['object[foo => bar] <=> []'] = [1, null, (object) ['foo' => 'bar'], []];
$tests['object[foo => bar] <=> [[]]'] = [1, null, (object) ['foo' => 'bar'], [[]]];
$tests['object[foo => bar] <=> [1 => []]'] = [1, null, (object) ['foo' => 'bar'], [1 => []]];
$tests['object[foo => bar] <=> [1 => null]'] = [1, null, (object) ['foo' => 'bar'], [1 => null]];
$tests['object[foo => bar] <=> [0]'] = [1, null, (object) ['foo' => 'bar'], [0]];
$tests['object[foo => bar] <=> [0.0]'] = [1, null, (object) ['foo' => 'bar'], [0.0]];
$tests['object[foo => bar] <=> [null]'] = [1, null, (object) ['foo' => 'bar'], [null]];
$tests['object[foo => bar] <=> [false]'] = [1, null, (object) ['foo' => 'bar'], [false]];
$tests['object[foo => bar] <=> [true]'] = [1, null, (object) ['foo' => 'bar'], [true]];
$tests['object[foo => bar] <=> [\'\']'] = [1, null, (object) ['foo' => 'bar'], ['']];
$tests['object[foo => bar] <=> [a, b, c]'] = [1, null, (object) ['foo' => 'bar'], ['a','b','c']];
$tests['object[foo => bar] <=> [$fh1]'] = [1, null, (object) ['foo' => 'bar'], [$fh1]];
$tests['object[foo => bar] <=> [foo => bar]'] = [1, null, (object) ['foo' => 'bar'], ['foo' => 'bar']];
$tests['object[foo => bar] <=> object[]'] = [1, null, (object) ['foo' => 'bar'], (object) []];
$tests['object[foo => bar] <=> object[[]]'] = [1, null, (object) ['foo' => 'bar'], (object) [[]]];
$tests['object[foo => bar] <=> object[1 => []]'] = [1, null, (object) ['foo' => 'bar'], (object) [1 => []]];
$tests['object[foo => bar] <=> object[1 => null]'] = [1, null, (object) ['foo' => 'bar'], (object) [1 => null]];
$tests['object[foo => bar] <=> object[0]'] = [1, null, (object) ['foo' => 'bar'], (object) [0]];
$tests['object[foo => bar] <=> object[0.0]'] = [1, null, (object) ['foo' => 'bar'], (object) [0.0]];
$tests['object[foo => bar] <=> object[null]'] = [1, null, (object) ['foo' => 'bar'], (object) [null]];
$tests['object[foo => bar] <=> object[false]'] = [1, null, (object) ['foo' => 'bar'], (object) [false]];
$tests['object[foo => bar] <=> object[true]'] = [1, null, (object) ['foo' => 'bar'], (object) [true]];
$tests['object[foo => bar] <=> object[\'\']'] = [1, null, (object) ['foo' => 'bar'], (object) ['']];
$tests['object[foo => bar] <=> object[a, b, c]'] = [-1, null, (object) ['foo' => 'bar'], (object) ['a','b','c']];
$tests['object[foo => bar] <=> object[$fh1]'] = [1, null, (object) ['foo' => 'bar'], (object) [$fh1]];
$tests['object[foo => bar] <=> object[foo => bar]'] = [0, null, (object) ['foo' => 'bar'], (object) ['foo' => 'bar']];
return $tests;
})();
